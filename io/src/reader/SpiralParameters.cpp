// Copyright (C) 2005-2007 Code Synthesis Tools CC
//
// This program was generated by XML Schema Definition Compiler (XSD)
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SpiralParameters.hpp"

// SpiralParameters::_xsd_SpiralParameters_::SpiralParameters
// 

const SpiralParameters::_xsd_SpiralParameters_::SpiralParameters::SimulationDuration::type& SpiralParameters::_xsd_SpiralParameters_::SpiralParameters::
SimulationDuration () const
{
  return this->_xsd_SimulationDuration_.get ();
}

SpiralParameters::_xsd_SpiralParameters_::SpiralParameters::SimulationDuration::type& SpiralParameters::_xsd_SpiralParameters_::SpiralParameters::
SimulationDuration ()
{
  return this->_xsd_SimulationDuration_.get ();
}

void SpiralParameters::_xsd_SpiralParameters_::SpiralParameters::
SimulationDuration (const SimulationDuration::type& SimulationDuration)
{
  this->_xsd_SimulationDuration_.set (SimulationDuration);
}

const SpiralParameters::_xsd_SpiralParameters_::SpiralParameters::SlabWidth::type& SpiralParameters::_xsd_SpiralParameters_::SpiralParameters::
SlabWidth () const
{
  return this->_xsd_SlabWidth_.get ();
}

SpiralParameters::_xsd_SpiralParameters_::SpiralParameters::SlabWidth::type& SpiralParameters::_xsd_SpiralParameters_::SpiralParameters::
SlabWidth ()
{
  return this->_xsd_SlabWidth_.get ();
}

void SpiralParameters::_xsd_SpiralParameters_::SpiralParameters::
SlabWidth (const SlabWidth::type& SlabWidth)
{
  this->_xsd_SlabWidth_.set (SlabWidth);
}

const SpiralParameters::_xsd_SpiralParameters_::SpiralParameters::SlabHeight::type& SpiralParameters::_xsd_SpiralParameters_::SpiralParameters::
SlabHeight () const
{
  return this->_xsd_SlabHeight_.get ();
}

SpiralParameters::_xsd_SpiralParameters_::SpiralParameters::SlabHeight::type& SpiralParameters::_xsd_SpiralParameters_::SpiralParameters::
SlabHeight ()
{
  return this->_xsd_SlabHeight_.get ();
}

void SpiralParameters::_xsd_SpiralParameters_::SpiralParameters::
SlabHeight (const SlabHeight::type& SlabHeight)
{
  this->_xsd_SlabHeight_.set (SlabHeight);
}

const SpiralParameters::_xsd_SpiralParameters_::SpiralParameters::InterNodeSpace::type& SpiralParameters::_xsd_SpiralParameters_::SpiralParameters::
InterNodeSpace () const
{
  return this->_xsd_InterNodeSpace_.get ();
}

SpiralParameters::_xsd_SpiralParameters_::SpiralParameters::InterNodeSpace::type& SpiralParameters::_xsd_SpiralParameters_::SpiralParameters::
InterNodeSpace ()
{
  return this->_xsd_InterNodeSpace_.get ();
}

void SpiralParameters::_xsd_SpiralParameters_::SpiralParameters::
InterNodeSpace (const InterNodeSpace::type& InterNodeSpace)
{
  this->_xsd_InterNodeSpace_.set (InterNodeSpace);
}

const SpiralParameters::_xsd_SpiralParameters_::SpiralParameters::FaceStimulusWidth::type& SpiralParameters::_xsd_SpiralParameters_::SpiralParameters::
FaceStimulusWidth () const
{
  return this->_xsd_FaceStimulusWidth_.get ();
}

SpiralParameters::_xsd_SpiralParameters_::SpiralParameters::FaceStimulusWidth::type& SpiralParameters::_xsd_SpiralParameters_::SpiralParameters::
FaceStimulusWidth ()
{
  return this->_xsd_FaceStimulusWidth_.get ();
}

void SpiralParameters::_xsd_SpiralParameters_::SpiralParameters::
FaceStimulusWidth (const FaceStimulusWidth::type& FaceStimulusWidth)
{
  this->_xsd_FaceStimulusWidth_.set (FaceStimulusWidth);
}

const SpiralParameters::_xsd_SpiralParameters_::SpiralParameters::QuadrantStimulusDelay::type& SpiralParameters::_xsd_SpiralParameters_::SpiralParameters::
QuadrantStimulusDelay () const
{
  return this->_xsd_QuadrantStimulusDelay_.get ();
}

SpiralParameters::_xsd_SpiralParameters_::SpiralParameters::QuadrantStimulusDelay::type& SpiralParameters::_xsd_SpiralParameters_::SpiralParameters::
QuadrantStimulusDelay ()
{
  return this->_xsd_QuadrantStimulusDelay_.get ();
}

void SpiralParameters::_xsd_SpiralParameters_::SpiralParameters::
QuadrantStimulusDelay (const QuadrantStimulusDelay::type& QuadrantStimulusDelay)
{
  this->_xsd_QuadrantStimulusDelay_.set (QuadrantStimulusDelay);
}

const SpiralParameters::_xsd_SpiralParameters_::SpiralParameters::OutputDirectory::type& SpiralParameters::_xsd_SpiralParameters_::SpiralParameters::
OutputDirectory () const
{
  return this->_xsd_OutputDirectory_.get ();
}

SpiralParameters::_xsd_SpiralParameters_::SpiralParameters::OutputDirectory::type& SpiralParameters::_xsd_SpiralParameters_::SpiralParameters::
OutputDirectory ()
{
  return this->_xsd_OutputDirectory_.get ();
}

void SpiralParameters::_xsd_SpiralParameters_::SpiralParameters::
OutputDirectory (const OutputDirectory::type& OutputDirectory)
{
  this->_xsd_OutputDirectory_.set (OutputDirectory);
}

void SpiralParameters::_xsd_SpiralParameters_::SpiralParameters::
OutputDirectory (::std::auto_ptr< OutputDirectory::type > OutputDirectory)
{
  this->_xsd_OutputDirectory_.set (OutputDirectory);
}

const SpiralParameters::_xsd_SpiralParameters_::SpiralParameters::MeshOutputDirectory::type& SpiralParameters::_xsd_SpiralParameters_::SpiralParameters::
MeshOutputDirectory () const
{
  return this->_xsd_MeshOutputDirectory_.get ();
}

SpiralParameters::_xsd_SpiralParameters_::SpiralParameters::MeshOutputDirectory::type& SpiralParameters::_xsd_SpiralParameters_::SpiralParameters::
MeshOutputDirectory ()
{
  return this->_xsd_MeshOutputDirectory_.get ();
}

void SpiralParameters::_xsd_SpiralParameters_::SpiralParameters::
MeshOutputDirectory (const MeshOutputDirectory::type& MeshOutputDirectory)
{
  this->_xsd_MeshOutputDirectory_.set (MeshOutputDirectory);
}

void SpiralParameters::_xsd_SpiralParameters_::SpiralParameters::
MeshOutputDirectory (::std::auto_ptr< MeshOutputDirectory::type > MeshOutputDirectory)
{
  this->_xsd_MeshOutputDirectory_.set (MeshOutputDirectory);
}


#include <xsd/cxx/xml/dom/elements.hxx>
#include <xsd/cxx/xml/dom/parser.hxx>

// SpiralParameters::_xsd_SpiralParameters_::SpiralParameters
//

SpiralParameters::_xsd_SpiralParameters_::SpiralParameters::
SpiralParameters (const SimulationDuration::type& _xsd_SimulationDuration,
                  const SlabWidth::type& _xsd_SlabWidth,
                  const SlabHeight::type& _xsd_SlabHeight,
                  const InterNodeSpace::type& _xsd_InterNodeSpace,
                  const FaceStimulusWidth::type& _xsd_FaceStimulusWidth,
                  const QuadrantStimulusDelay::type& _xsd_QuadrantStimulusDelay,
                  const OutputDirectory::type& _xsd_OutputDirectory,
                  const MeshOutputDirectory::type& _xsd_MeshOutputDirectory)
: ::xml_schema::type (),
_xsd_SimulationDuration_ (_xsd_SimulationDuration,
                          ::xml_schema::flags (),
                          this),
_xsd_SlabWidth_ (_xsd_SlabWidth,
                 ::xml_schema::flags (),
                 this),
_xsd_SlabHeight_ (_xsd_SlabHeight,
                  ::xml_schema::flags (),
                  this),
_xsd_InterNodeSpace_ (_xsd_InterNodeSpace,
                      ::xml_schema::flags (),
                      this),
_xsd_FaceStimulusWidth_ (_xsd_FaceStimulusWidth,
                         ::xml_schema::flags (),
                         this),
_xsd_QuadrantStimulusDelay_ (_xsd_QuadrantStimulusDelay,
                             ::xml_schema::flags (),
                             this),
_xsd_OutputDirectory_ (_xsd_OutputDirectory,
                       ::xml_schema::flags (),
                       this),
_xsd_MeshOutputDirectory_ (_xsd_MeshOutputDirectory,
                           ::xml_schema::flags (),
                           this)
{
}

SpiralParameters::_xsd_SpiralParameters_::SpiralParameters::
SpiralParameters (const SpiralParameters& _xsd_SpiralParameters,
                  ::xml_schema::flags f,
                  ::xml_schema::type* c)
: ::xml_schema::type (_xsd_SpiralParameters, f, c),
_xsd_SimulationDuration_ (_xsd_SpiralParameters._xsd_SimulationDuration_,
                          f | ::xml_schema::flags::not_root,
                          this),
_xsd_SlabWidth_ (_xsd_SpiralParameters._xsd_SlabWidth_,
                 f | ::xml_schema::flags::not_root,
                 this),
_xsd_SlabHeight_ (_xsd_SpiralParameters._xsd_SlabHeight_,
                  f | ::xml_schema::flags::not_root,
                  this),
_xsd_InterNodeSpace_ (_xsd_SpiralParameters._xsd_InterNodeSpace_,
                      f | ::xml_schema::flags::not_root,
                      this),
_xsd_FaceStimulusWidth_ (_xsd_SpiralParameters._xsd_FaceStimulusWidth_,
                         f | ::xml_schema::flags::not_root,
                         this),
_xsd_QuadrantStimulusDelay_ (_xsd_SpiralParameters._xsd_QuadrantStimulusDelay_,
                             f | ::xml_schema::flags::not_root,
                             this),
_xsd_OutputDirectory_ (_xsd_SpiralParameters._xsd_OutputDirectory_,
                       f | ::xml_schema::flags::not_root,
                       this),
_xsd_MeshOutputDirectory_ (_xsd_SpiralParameters._xsd_MeshOutputDirectory_,
                           f | ::xml_schema::flags::not_root,
                           this)
{
}

SpiralParameters::_xsd_SpiralParameters_::SpiralParameters::
SpiralParameters (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f,
                  ::xml_schema::type* c)
: ::xml_schema::type (e, f, c),
_xsd_SimulationDuration_ (f | ::xml_schema::flags::not_root, this),
_xsd_SlabWidth_ (f | ::xml_schema::flags::not_root, this),
_xsd_SlabHeight_ (f | ::xml_schema::flags::not_root, this),
_xsd_InterNodeSpace_ (f | ::xml_schema::flags::not_root, this),
_xsd_FaceStimulusWidth_ (f | ::xml_schema::flags::not_root, this),
_xsd_QuadrantStimulusDelay_ (f | ::xml_schema::flags::not_root, this),
_xsd_OutputDirectory_ (f | ::xml_schema::flags::not_root, this),
_xsd_MeshOutputDirectory_ (f | ::xml_schema::flags::not_root, this)
{
  parse (e, f);
}

void SpiralParameters::_xsd_SpiralParameters_::SpiralParameters::
parse (const ::xercesc::DOMElement& e, ::xml_schema::flags f)
{
  ::xsd::cxx::xml::dom::parser< char > p (e);

  while (p.more_elements ())
  {
    const ::xsd::cxx::xml::dom::element< char > e (p.next_element ());

    // SimulationDuration
    //
    {
      if (e.name () == "SimulationDuration" && e.namespace_ () == "")
      {
        if (_xsd_SimulationDuration_.present ())
          continue;
        this->SimulationDuration (
          SimulationDuration::traits::create (
            e.dom_element (),
            f | ::xml_schema::flags::not_root,
            this));
        continue;
      }
    }

    // SlabWidth
    //
    {
      if (e.name () == "SlabWidth" && e.namespace_ () == "")
      {
        if (_xsd_SlabWidth_.present ())
          continue;
        this->SlabWidth (
          SlabWidth::traits::create (
            e.dom_element (),
            f | ::xml_schema::flags::not_root,
            this));
        continue;
      }
    }

    // SlabHeight
    //
    {
      if (e.name () == "SlabHeight" && e.namespace_ () == "")
      {
        if (_xsd_SlabHeight_.present ())
          continue;
        this->SlabHeight (
          SlabHeight::traits::create (
            e.dom_element (),
            f | ::xml_schema::flags::not_root,
            this));
        continue;
      }
    }

    // InterNodeSpace
    //
    {
      if (e.name () == "InterNodeSpace" && e.namespace_ () == "")
      {
        if (_xsd_InterNodeSpace_.present ())
          continue;
        this->InterNodeSpace (
          InterNodeSpace::traits::create (
            e.dom_element (),
            f | ::xml_schema::flags::not_root,
            this));
        continue;
      }
    }

    // FaceStimulusWidth
    //
    {
      if (e.name () == "FaceStimulusWidth" && e.namespace_ () == "")
      {
        if (_xsd_FaceStimulusWidth_.present ())
          continue;
        this->FaceStimulusWidth (
          FaceStimulusWidth::traits::create (
            e.dom_element (),
            f | ::xml_schema::flags::not_root,
            this));
        continue;
      }
    }

    // QuadrantStimulusDelay
    //
    {
      if (e.name () == "QuadrantStimulusDelay" && e.namespace_ () == "")
      {
        if (_xsd_QuadrantStimulusDelay_.present ())
          continue;
        this->QuadrantStimulusDelay (
          QuadrantStimulusDelay::traits::create (
            e.dom_element (),
            f | ::xml_schema::flags::not_root,
            this));
        continue;
      }
    }

    // OutputDirectory
    //
    {
      if (e.name () == "OutputDirectory" && e.namespace_ () == "")
      {
        ::std::auto_ptr< OutputDirectory::type > r (
          OutputDirectory::traits::create (
            e.dom_element (),
            f | ::xml_schema::flags::not_root,
            this));

        if (_xsd_OutputDirectory_.present ())
          continue;
        this->OutputDirectory (r);
        continue;
      }
    }

    // MeshOutputDirectory
    //
    {
      if (e.name () == "MeshOutputDirectory" && e.namespace_ () == "")
      {
        ::std::auto_ptr< MeshOutputDirectory::type > r (
          MeshOutputDirectory::traits::create (
            e.dom_element (),
            f | ::xml_schema::flags::not_root,
            this));

        if (_xsd_MeshOutputDirectory_.present ())
          continue;
        this->MeshOutputDirectory (r);
        continue;
      }
    }
  }

  if (!_xsd_SimulationDuration_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "SimulationDuration",
      "");
  }

  if (!_xsd_SlabWidth_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "SlabWidth",
      "");
  }

  if (!_xsd_SlabHeight_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "SlabHeight",
      "");
  }

  if (!_xsd_InterNodeSpace_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "InterNodeSpace",
      "");
  }

  if (!_xsd_FaceStimulusWidth_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "FaceStimulusWidth",
      "");
  }

  if (!_xsd_QuadrantStimulusDelay_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "QuadrantStimulusDelay",
      "");
  }

  if (!_xsd_OutputDirectory_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "OutputDirectory",
      "");
  }

  if (!_xsd_MeshOutputDirectory_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "MeshOutputDirectory",
      "");
  }
}

SpiralParameters::_xsd_SpiralParameters_::SpiralParameters* SpiralParameters::_xsd_SpiralParameters_::SpiralParameters::
_clone (::xml_schema::flags f,
        ::xml_schema::type* c) const
{
  return new SpiralParameters (*this, f, c);
}

#include <istream>
#include <xercesc/framework/Wrapper4InputSource.hpp>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

::std::auto_ptr< SpiralParameters::type >
SpiralParameters (const ::std::basic_string< char >& u,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< char >& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::tree::error_handler< char > h;

  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::SpiralParameters (
    static_cast< const ::xercesc::DOMDocument& > (*d), f);
}

::std::auto_ptr< SpiralParameters::type >
SpiralParameters (const ::std::basic_string< char >& u,
                  ::xsd::cxx::xml::error_handler< char >& h,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< char >& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

  if (!d)
  {
    throw ::xsd::cxx::tree::parsing< char > ();
  }

  return ::SpiralParameters (
    static_cast< const ::xercesc::DOMDocument& > (*d), f);
}

::std::auto_ptr< SpiralParameters::type >
SpiralParameters (const ::std::basic_string< char >& u,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< char >& p)
{
  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

  if (!d)
  {
    throw ::xsd::cxx::tree::parsing< char > ();
  }

  return ::SpiralParameters (
    static_cast< const ::xercesc::DOMDocument& > (*d), f);
}

::std::auto_ptr< SpiralParameters::type >
SpiralParameters (::std::istream& is,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< char >& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  ::xercesc::Wrapper4InputSource wrap (&isrc, false);
  return ::SpiralParameters (wrap, f, p);
}

::std::auto_ptr< SpiralParameters::type >
SpiralParameters (::std::istream& is,
                  ::xsd::cxx::xml::error_handler< char >& h,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< char >& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  ::xercesc::Wrapper4InputSource wrap (&isrc, false);
  return ::SpiralParameters (wrap, h, f, p);
}

::std::auto_ptr< SpiralParameters::type >
SpiralParameters (::std::istream& is,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< char >& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  ::xercesc::Wrapper4InputSource wrap (&isrc, false);
  return ::SpiralParameters (wrap, h, f, p);
}

::std::auto_ptr< SpiralParameters::type >
SpiralParameters (::std::istream& is,
                  const ::std::basic_string< char >& sid,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< char >& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  ::xercesc::Wrapper4InputSource wrap (&isrc, false);
  return ::SpiralParameters (wrap, f, p);
}

::std::auto_ptr< SpiralParameters::type >
SpiralParameters (::std::istream& is,
                  const ::std::basic_string< char >& sid,
                  ::xsd::cxx::xml::error_handler< char >& h,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< char >& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  ::xercesc::Wrapper4InputSource wrap (&isrc, false);
  return ::SpiralParameters (wrap, h, f, p);
}

::std::auto_ptr< SpiralParameters::type >
SpiralParameters (::std::istream& is,
                  const ::std::basic_string< char >& sid,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< char >& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  ::xercesc::Wrapper4InputSource wrap (&isrc, false);
  return ::SpiralParameters (wrap, h, f, p);
}

::std::auto_ptr< SpiralParameters::type >
SpiralParameters (const ::xercesc::DOMInputSource& i,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< char >& p)
{
  ::xsd::cxx::tree::error_handler< char > h;

  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::SpiralParameters (
    static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
}

::std::auto_ptr< SpiralParameters::type >
SpiralParameters (const ::xercesc::DOMInputSource& i,
                  ::xsd::cxx::xml::error_handler< char >& h,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< char >& p)
{
  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

  if (!d)
  {
    throw ::xsd::cxx::tree::parsing< char > ();
  }

  return ::SpiralParameters (
    static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
}

::std::auto_ptr< SpiralParameters::type >
SpiralParameters (const ::xercesc::DOMInputSource& i,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< char >& p)
{
  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

  if (!d)
  {
    throw ::xsd::cxx::tree::parsing< char > ();
  }

  return ::SpiralParameters (
    static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
}

::std::auto_ptr< SpiralParameters::type >
SpiralParameters (const ::xercesc::DOMDocument& d,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< char >&)
{
  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
    (f & ::xml_schema::flags::keep_dom) 
    ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
    : 0);

  const ::xsd::cxx::xml::dom::element< char > e (
    c.get ()
    ? *c->getDocumentElement ()
    : *d.getDocumentElement ());

  if (e.name () == "SpiralParameters" &&
      e.namespace_ () == "")
  {
    ::std::auto_ptr< SpiralParameters::type > r (
      ::xsd::cxx::tree::traits< SpiralParameters::type, char >::create (
        e.dom_element (), f, 0));
    if (f & ::xml_schema::flags::keep_dom) c.release ();
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    e.name (),
    e.namespace_ (),
    "SpiralParameters",
    "");
}

::std::auto_ptr< ::xml_schema::decimal >
SimulationDuration (const ::std::basic_string< char >& u,
                    ::xml_schema::flags f,
                    const ::xsd::cxx::tree::properties< char >& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::tree::error_handler< char > h;

  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::SimulationDuration (
    static_cast< const ::xercesc::DOMDocument& > (*d), f);
}

::std::auto_ptr< ::xml_schema::decimal >
SimulationDuration (const ::std::basic_string< char >& u,
                    ::xsd::cxx::xml::error_handler< char >& h,
                    ::xml_schema::flags f,
                    const ::xsd::cxx::tree::properties< char >& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

  if (!d)
  {
    throw ::xsd::cxx::tree::parsing< char > ();
  }

  return ::SimulationDuration (
    static_cast< const ::xercesc::DOMDocument& > (*d), f);
}

::std::auto_ptr< ::xml_schema::decimal >
SimulationDuration (const ::std::basic_string< char >& u,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xsd::cxx::tree::properties< char >& p)
{
  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

  if (!d)
  {
    throw ::xsd::cxx::tree::parsing< char > ();
  }

  return ::SimulationDuration (
    static_cast< const ::xercesc::DOMDocument& > (*d), f);
}

::std::auto_ptr< ::xml_schema::decimal >
SimulationDuration (::std::istream& is,
                    ::xml_schema::flags f,
                    const ::xsd::cxx::tree::properties< char >& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  ::xercesc::Wrapper4InputSource wrap (&isrc, false);
  return ::SimulationDuration (wrap, f, p);
}

::std::auto_ptr< ::xml_schema::decimal >
SimulationDuration (::std::istream& is,
                    ::xsd::cxx::xml::error_handler< char >& h,
                    ::xml_schema::flags f,
                    const ::xsd::cxx::tree::properties< char >& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  ::xercesc::Wrapper4InputSource wrap (&isrc, false);
  return ::SimulationDuration (wrap, h, f, p);
}

::std::auto_ptr< ::xml_schema::decimal >
SimulationDuration (::std::istream& is,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xsd::cxx::tree::properties< char >& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  ::xercesc::Wrapper4InputSource wrap (&isrc, false);
  return ::SimulationDuration (wrap, h, f, p);
}

::std::auto_ptr< ::xml_schema::decimal >
SimulationDuration (::std::istream& is,
                    const ::std::basic_string< char >& sid,
                    ::xml_schema::flags f,
                    const ::xsd::cxx::tree::properties< char >& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  ::xercesc::Wrapper4InputSource wrap (&isrc, false);
  return ::SimulationDuration (wrap, f, p);
}

::std::auto_ptr< ::xml_schema::decimal >
SimulationDuration (::std::istream& is,
                    const ::std::basic_string< char >& sid,
                    ::xsd::cxx::xml::error_handler< char >& h,
                    ::xml_schema::flags f,
                    const ::xsd::cxx::tree::properties< char >& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  ::xercesc::Wrapper4InputSource wrap (&isrc, false);
  return ::SimulationDuration (wrap, h, f, p);
}

::std::auto_ptr< ::xml_schema::decimal >
SimulationDuration (::std::istream& is,
                    const ::std::basic_string< char >& sid,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xsd::cxx::tree::properties< char >& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  ::xercesc::Wrapper4InputSource wrap (&isrc, false);
  return ::SimulationDuration (wrap, h, f, p);
}

::std::auto_ptr< ::xml_schema::decimal >
SimulationDuration (const ::xercesc::DOMInputSource& i,
                    ::xml_schema::flags f,
                    const ::xsd::cxx::tree::properties< char >& p)
{
  ::xsd::cxx::tree::error_handler< char > h;

  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::SimulationDuration (
    static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
}

::std::auto_ptr< ::xml_schema::decimal >
SimulationDuration (const ::xercesc::DOMInputSource& i,
                    ::xsd::cxx::xml::error_handler< char >& h,
                    ::xml_schema::flags f,
                    const ::xsd::cxx::tree::properties< char >& p)
{
  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

  if (!d)
  {
    throw ::xsd::cxx::tree::parsing< char > ();
  }

  return ::SimulationDuration (
    static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
}

::std::auto_ptr< ::xml_schema::decimal >
SimulationDuration (const ::xercesc::DOMInputSource& i,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xsd::cxx::tree::properties< char >& p)
{
  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

  if (!d)
  {
    throw ::xsd::cxx::tree::parsing< char > ();
  }

  return ::SimulationDuration (
    static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
}

::std::auto_ptr< ::xml_schema::decimal >
SimulationDuration (const ::xercesc::DOMDocument& d,
                    ::xml_schema::flags f,
                    const ::xsd::cxx::tree::properties< char >&)
{
  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
    (f & ::xml_schema::flags::keep_dom) 
    ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
    : 0);

  const ::xsd::cxx::xml::dom::element< char > e (
    c.get ()
    ? *c->getDocumentElement ()
    : *d.getDocumentElement ());

  if (e.name () == "SimulationDuration" &&
      e.namespace_ () == "")
  {
    ::std::auto_ptr< ::xml_schema::decimal > r (
      new ::xml_schema::decimal (
        ::xsd::cxx::tree::traits< ::xml_schema::decimal, char >::create (
          e.dom_element (), f, 0)));
    if (f & ::xml_schema::flags::keep_dom) c.release ();
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    e.name (),
    e.namespace_ (),
    "SimulationDuration",
    "");
}

::std::auto_ptr< ::xml_schema::decimal >
SlabWidth (const ::std::basic_string< char >& u,
           ::xml_schema::flags f,
           const ::xsd::cxx::tree::properties< char >& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::tree::error_handler< char > h;

  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::SlabWidth (
    static_cast< const ::xercesc::DOMDocument& > (*d), f);
}

::std::auto_ptr< ::xml_schema::decimal >
SlabWidth (const ::std::basic_string< char >& u,
           ::xsd::cxx::xml::error_handler< char >& h,
           ::xml_schema::flags f,
           const ::xsd::cxx::tree::properties< char >& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

  if (!d)
  {
    throw ::xsd::cxx::tree::parsing< char > ();
  }

  return ::SlabWidth (
    static_cast< const ::xercesc::DOMDocument& > (*d), f);
}

::std::auto_ptr< ::xml_schema::decimal >
SlabWidth (const ::std::basic_string< char >& u,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::flags f,
           const ::xsd::cxx::tree::properties< char >& p)
{
  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

  if (!d)
  {
    throw ::xsd::cxx::tree::parsing< char > ();
  }

  return ::SlabWidth (
    static_cast< const ::xercesc::DOMDocument& > (*d), f);
}

::std::auto_ptr< ::xml_schema::decimal >
SlabWidth (::std::istream& is,
           ::xml_schema::flags f,
           const ::xsd::cxx::tree::properties< char >& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  ::xercesc::Wrapper4InputSource wrap (&isrc, false);
  return ::SlabWidth (wrap, f, p);
}

::std::auto_ptr< ::xml_schema::decimal >
SlabWidth (::std::istream& is,
           ::xsd::cxx::xml::error_handler< char >& h,
           ::xml_schema::flags f,
           const ::xsd::cxx::tree::properties< char >& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  ::xercesc::Wrapper4InputSource wrap (&isrc, false);
  return ::SlabWidth (wrap, h, f, p);
}

::std::auto_ptr< ::xml_schema::decimal >
SlabWidth (::std::istream& is,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::flags f,
           const ::xsd::cxx::tree::properties< char >& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  ::xercesc::Wrapper4InputSource wrap (&isrc, false);
  return ::SlabWidth (wrap, h, f, p);
}

::std::auto_ptr< ::xml_schema::decimal >
SlabWidth (::std::istream& is,
           const ::std::basic_string< char >& sid,
           ::xml_schema::flags f,
           const ::xsd::cxx::tree::properties< char >& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  ::xercesc::Wrapper4InputSource wrap (&isrc, false);
  return ::SlabWidth (wrap, f, p);
}

::std::auto_ptr< ::xml_schema::decimal >
SlabWidth (::std::istream& is,
           const ::std::basic_string< char >& sid,
           ::xsd::cxx::xml::error_handler< char >& h,
           ::xml_schema::flags f,
           const ::xsd::cxx::tree::properties< char >& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  ::xercesc::Wrapper4InputSource wrap (&isrc, false);
  return ::SlabWidth (wrap, h, f, p);
}

::std::auto_ptr< ::xml_schema::decimal >
SlabWidth (::std::istream& is,
           const ::std::basic_string< char >& sid,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::flags f,
           const ::xsd::cxx::tree::properties< char >& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  ::xercesc::Wrapper4InputSource wrap (&isrc, false);
  return ::SlabWidth (wrap, h, f, p);
}

::std::auto_ptr< ::xml_schema::decimal >
SlabWidth (const ::xercesc::DOMInputSource& i,
           ::xml_schema::flags f,
           const ::xsd::cxx::tree::properties< char >& p)
{
  ::xsd::cxx::tree::error_handler< char > h;

  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::SlabWidth (
    static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
}

::std::auto_ptr< ::xml_schema::decimal >
SlabWidth (const ::xercesc::DOMInputSource& i,
           ::xsd::cxx::xml::error_handler< char >& h,
           ::xml_schema::flags f,
           const ::xsd::cxx::tree::properties< char >& p)
{
  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

  if (!d)
  {
    throw ::xsd::cxx::tree::parsing< char > ();
  }

  return ::SlabWidth (
    static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
}

::std::auto_ptr< ::xml_schema::decimal >
SlabWidth (const ::xercesc::DOMInputSource& i,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::flags f,
           const ::xsd::cxx::tree::properties< char >& p)
{
  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

  if (!d)
  {
    throw ::xsd::cxx::tree::parsing< char > ();
  }

  return ::SlabWidth (
    static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
}

::std::auto_ptr< ::xml_schema::decimal >
SlabWidth (const ::xercesc::DOMDocument& d,
           ::xml_schema::flags f,
           const ::xsd::cxx::tree::properties< char >&)
{
  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
    (f & ::xml_schema::flags::keep_dom) 
    ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
    : 0);

  const ::xsd::cxx::xml::dom::element< char > e (
    c.get ()
    ? *c->getDocumentElement ()
    : *d.getDocumentElement ());

  if (e.name () == "SlabWidth" &&
      e.namespace_ () == "")
  {
    ::std::auto_ptr< ::xml_schema::decimal > r (
      new ::xml_schema::decimal (
        ::xsd::cxx::tree::traits< ::xml_schema::decimal, char >::create (
          e.dom_element (), f, 0)));
    if (f & ::xml_schema::flags::keep_dom) c.release ();
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    e.name (),
    e.namespace_ (),
    "SlabWidth",
    "");
}

::std::auto_ptr< ::xml_schema::decimal >
SlabHeight (const ::std::basic_string< char >& u,
            ::xml_schema::flags f,
            const ::xsd::cxx::tree::properties< char >& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::tree::error_handler< char > h;

  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::SlabHeight (
    static_cast< const ::xercesc::DOMDocument& > (*d), f);
}

::std::auto_ptr< ::xml_schema::decimal >
SlabHeight (const ::std::basic_string< char >& u,
            ::xsd::cxx::xml::error_handler< char >& h,
            ::xml_schema::flags f,
            const ::xsd::cxx::tree::properties< char >& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

  if (!d)
  {
    throw ::xsd::cxx::tree::parsing< char > ();
  }

  return ::SlabHeight (
    static_cast< const ::xercesc::DOMDocument& > (*d), f);
}

::std::auto_ptr< ::xml_schema::decimal >
SlabHeight (const ::std::basic_string< char >& u,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xsd::cxx::tree::properties< char >& p)
{
  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

  if (!d)
  {
    throw ::xsd::cxx::tree::parsing< char > ();
  }

  return ::SlabHeight (
    static_cast< const ::xercesc::DOMDocument& > (*d), f);
}

::std::auto_ptr< ::xml_schema::decimal >
SlabHeight (::std::istream& is,
            ::xml_schema::flags f,
            const ::xsd::cxx::tree::properties< char >& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  ::xercesc::Wrapper4InputSource wrap (&isrc, false);
  return ::SlabHeight (wrap, f, p);
}

::std::auto_ptr< ::xml_schema::decimal >
SlabHeight (::std::istream& is,
            ::xsd::cxx::xml::error_handler< char >& h,
            ::xml_schema::flags f,
            const ::xsd::cxx::tree::properties< char >& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  ::xercesc::Wrapper4InputSource wrap (&isrc, false);
  return ::SlabHeight (wrap, h, f, p);
}

::std::auto_ptr< ::xml_schema::decimal >
SlabHeight (::std::istream& is,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xsd::cxx::tree::properties< char >& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  ::xercesc::Wrapper4InputSource wrap (&isrc, false);
  return ::SlabHeight (wrap, h, f, p);
}

::std::auto_ptr< ::xml_schema::decimal >
SlabHeight (::std::istream& is,
            const ::std::basic_string< char >& sid,
            ::xml_schema::flags f,
            const ::xsd::cxx::tree::properties< char >& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  ::xercesc::Wrapper4InputSource wrap (&isrc, false);
  return ::SlabHeight (wrap, f, p);
}

::std::auto_ptr< ::xml_schema::decimal >
SlabHeight (::std::istream& is,
            const ::std::basic_string< char >& sid,
            ::xsd::cxx::xml::error_handler< char >& h,
            ::xml_schema::flags f,
            const ::xsd::cxx::tree::properties< char >& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  ::xercesc::Wrapper4InputSource wrap (&isrc, false);
  return ::SlabHeight (wrap, h, f, p);
}

::std::auto_ptr< ::xml_schema::decimal >
SlabHeight (::std::istream& is,
            const ::std::basic_string< char >& sid,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xsd::cxx::tree::properties< char >& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  ::xercesc::Wrapper4InputSource wrap (&isrc, false);
  return ::SlabHeight (wrap, h, f, p);
}

::std::auto_ptr< ::xml_schema::decimal >
SlabHeight (const ::xercesc::DOMInputSource& i,
            ::xml_schema::flags f,
            const ::xsd::cxx::tree::properties< char >& p)
{
  ::xsd::cxx::tree::error_handler< char > h;

  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::SlabHeight (
    static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
}

::std::auto_ptr< ::xml_schema::decimal >
SlabHeight (const ::xercesc::DOMInputSource& i,
            ::xsd::cxx::xml::error_handler< char >& h,
            ::xml_schema::flags f,
            const ::xsd::cxx::tree::properties< char >& p)
{
  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

  if (!d)
  {
    throw ::xsd::cxx::tree::parsing< char > ();
  }

  return ::SlabHeight (
    static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
}

::std::auto_ptr< ::xml_schema::decimal >
SlabHeight (const ::xercesc::DOMInputSource& i,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xsd::cxx::tree::properties< char >& p)
{
  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

  if (!d)
  {
    throw ::xsd::cxx::tree::parsing< char > ();
  }

  return ::SlabHeight (
    static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
}

::std::auto_ptr< ::xml_schema::decimal >
SlabHeight (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f,
            const ::xsd::cxx::tree::properties< char >&)
{
  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
    (f & ::xml_schema::flags::keep_dom) 
    ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
    : 0);

  const ::xsd::cxx::xml::dom::element< char > e (
    c.get ()
    ? *c->getDocumentElement ()
    : *d.getDocumentElement ());

  if (e.name () == "SlabHeight" &&
      e.namespace_ () == "")
  {
    ::std::auto_ptr< ::xml_schema::decimal > r (
      new ::xml_schema::decimal (
        ::xsd::cxx::tree::traits< ::xml_schema::decimal, char >::create (
          e.dom_element (), f, 0)));
    if (f & ::xml_schema::flags::keep_dom) c.release ();
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    e.name (),
    e.namespace_ (),
    "SlabHeight",
    "");
}

::std::auto_ptr< ::xml_schema::decimal >
InterNodeSpace (const ::std::basic_string< char >& u,
                ::xml_schema::flags f,
                const ::xsd::cxx::tree::properties< char >& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::tree::error_handler< char > h;

  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::InterNodeSpace (
    static_cast< const ::xercesc::DOMDocument& > (*d), f);
}

::std::auto_ptr< ::xml_schema::decimal >
InterNodeSpace (const ::std::basic_string< char >& u,
                ::xsd::cxx::xml::error_handler< char >& h,
                ::xml_schema::flags f,
                const ::xsd::cxx::tree::properties< char >& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

  if (!d)
  {
    throw ::xsd::cxx::tree::parsing< char > ();
  }

  return ::InterNodeSpace (
    static_cast< const ::xercesc::DOMDocument& > (*d), f);
}

::std::auto_ptr< ::xml_schema::decimal >
InterNodeSpace (const ::std::basic_string< char >& u,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xsd::cxx::tree::properties< char >& p)
{
  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

  if (!d)
  {
    throw ::xsd::cxx::tree::parsing< char > ();
  }

  return ::InterNodeSpace (
    static_cast< const ::xercesc::DOMDocument& > (*d), f);
}

::std::auto_ptr< ::xml_schema::decimal >
InterNodeSpace (::std::istream& is,
                ::xml_schema::flags f,
                const ::xsd::cxx::tree::properties< char >& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  ::xercesc::Wrapper4InputSource wrap (&isrc, false);
  return ::InterNodeSpace (wrap, f, p);
}

::std::auto_ptr< ::xml_schema::decimal >
InterNodeSpace (::std::istream& is,
                ::xsd::cxx::xml::error_handler< char >& h,
                ::xml_schema::flags f,
                const ::xsd::cxx::tree::properties< char >& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  ::xercesc::Wrapper4InputSource wrap (&isrc, false);
  return ::InterNodeSpace (wrap, h, f, p);
}

::std::auto_ptr< ::xml_schema::decimal >
InterNodeSpace (::std::istream& is,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xsd::cxx::tree::properties< char >& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  ::xercesc::Wrapper4InputSource wrap (&isrc, false);
  return ::InterNodeSpace (wrap, h, f, p);
}

::std::auto_ptr< ::xml_schema::decimal >
InterNodeSpace (::std::istream& is,
                const ::std::basic_string< char >& sid,
                ::xml_schema::flags f,
                const ::xsd::cxx::tree::properties< char >& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  ::xercesc::Wrapper4InputSource wrap (&isrc, false);
  return ::InterNodeSpace (wrap, f, p);
}

::std::auto_ptr< ::xml_schema::decimal >
InterNodeSpace (::std::istream& is,
                const ::std::basic_string< char >& sid,
                ::xsd::cxx::xml::error_handler< char >& h,
                ::xml_schema::flags f,
                const ::xsd::cxx::tree::properties< char >& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  ::xercesc::Wrapper4InputSource wrap (&isrc, false);
  return ::InterNodeSpace (wrap, h, f, p);
}

::std::auto_ptr< ::xml_schema::decimal >
InterNodeSpace (::std::istream& is,
                const ::std::basic_string< char >& sid,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xsd::cxx::tree::properties< char >& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  ::xercesc::Wrapper4InputSource wrap (&isrc, false);
  return ::InterNodeSpace (wrap, h, f, p);
}

::std::auto_ptr< ::xml_schema::decimal >
InterNodeSpace (const ::xercesc::DOMInputSource& i,
                ::xml_schema::flags f,
                const ::xsd::cxx::tree::properties< char >& p)
{
  ::xsd::cxx::tree::error_handler< char > h;

  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::InterNodeSpace (
    static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
}

::std::auto_ptr< ::xml_schema::decimal >
InterNodeSpace (const ::xercesc::DOMInputSource& i,
                ::xsd::cxx::xml::error_handler< char >& h,
                ::xml_schema::flags f,
                const ::xsd::cxx::tree::properties< char >& p)
{
  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

  if (!d)
  {
    throw ::xsd::cxx::tree::parsing< char > ();
  }

  return ::InterNodeSpace (
    static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
}

::std::auto_ptr< ::xml_schema::decimal >
InterNodeSpace (const ::xercesc::DOMInputSource& i,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xsd::cxx::tree::properties< char >& p)
{
  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

  if (!d)
  {
    throw ::xsd::cxx::tree::parsing< char > ();
  }

  return ::InterNodeSpace (
    static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
}

::std::auto_ptr< ::xml_schema::decimal >
InterNodeSpace (const ::xercesc::DOMDocument& d,
                ::xml_schema::flags f,
                const ::xsd::cxx::tree::properties< char >&)
{
  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
    (f & ::xml_schema::flags::keep_dom) 
    ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
    : 0);

  const ::xsd::cxx::xml::dom::element< char > e (
    c.get ()
    ? *c->getDocumentElement ()
    : *d.getDocumentElement ());

  if (e.name () == "InterNodeSpace" &&
      e.namespace_ () == "")
  {
    ::std::auto_ptr< ::xml_schema::decimal > r (
      new ::xml_schema::decimal (
        ::xsd::cxx::tree::traits< ::xml_schema::decimal, char >::create (
          e.dom_element (), f, 0)));
    if (f & ::xml_schema::flags::keep_dom) c.release ();
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    e.name (),
    e.namespace_ (),
    "InterNodeSpace",
    "");
}

::std::auto_ptr< ::xml_schema::decimal >
FaceStimulusWidth (const ::std::basic_string< char >& u,
                   ::xml_schema::flags f,
                   const ::xsd::cxx::tree::properties< char >& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::tree::error_handler< char > h;

  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::FaceStimulusWidth (
    static_cast< const ::xercesc::DOMDocument& > (*d), f);
}

::std::auto_ptr< ::xml_schema::decimal >
FaceStimulusWidth (const ::std::basic_string< char >& u,
                   ::xsd::cxx::xml::error_handler< char >& h,
                   ::xml_schema::flags f,
                   const ::xsd::cxx::tree::properties< char >& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

  if (!d)
  {
    throw ::xsd::cxx::tree::parsing< char > ();
  }

  return ::FaceStimulusWidth (
    static_cast< const ::xercesc::DOMDocument& > (*d), f);
}

::std::auto_ptr< ::xml_schema::decimal >
FaceStimulusWidth (const ::std::basic_string< char >& u,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xsd::cxx::tree::properties< char >& p)
{
  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

  if (!d)
  {
    throw ::xsd::cxx::tree::parsing< char > ();
  }

  return ::FaceStimulusWidth (
    static_cast< const ::xercesc::DOMDocument& > (*d), f);
}

::std::auto_ptr< ::xml_schema::decimal >
FaceStimulusWidth (::std::istream& is,
                   ::xml_schema::flags f,
                   const ::xsd::cxx::tree::properties< char >& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  ::xercesc::Wrapper4InputSource wrap (&isrc, false);
  return ::FaceStimulusWidth (wrap, f, p);
}

::std::auto_ptr< ::xml_schema::decimal >
FaceStimulusWidth (::std::istream& is,
                   ::xsd::cxx::xml::error_handler< char >& h,
                   ::xml_schema::flags f,
                   const ::xsd::cxx::tree::properties< char >& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  ::xercesc::Wrapper4InputSource wrap (&isrc, false);
  return ::FaceStimulusWidth (wrap, h, f, p);
}

::std::auto_ptr< ::xml_schema::decimal >
FaceStimulusWidth (::std::istream& is,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xsd::cxx::tree::properties< char >& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  ::xercesc::Wrapper4InputSource wrap (&isrc, false);
  return ::FaceStimulusWidth (wrap, h, f, p);
}

::std::auto_ptr< ::xml_schema::decimal >
FaceStimulusWidth (::std::istream& is,
                   const ::std::basic_string< char >& sid,
                   ::xml_schema::flags f,
                   const ::xsd::cxx::tree::properties< char >& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  ::xercesc::Wrapper4InputSource wrap (&isrc, false);
  return ::FaceStimulusWidth (wrap, f, p);
}

::std::auto_ptr< ::xml_schema::decimal >
FaceStimulusWidth (::std::istream& is,
                   const ::std::basic_string< char >& sid,
                   ::xsd::cxx::xml::error_handler< char >& h,
                   ::xml_schema::flags f,
                   const ::xsd::cxx::tree::properties< char >& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  ::xercesc::Wrapper4InputSource wrap (&isrc, false);
  return ::FaceStimulusWidth (wrap, h, f, p);
}

::std::auto_ptr< ::xml_schema::decimal >
FaceStimulusWidth (::std::istream& is,
                   const ::std::basic_string< char >& sid,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xsd::cxx::tree::properties< char >& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  ::xercesc::Wrapper4InputSource wrap (&isrc, false);
  return ::FaceStimulusWidth (wrap, h, f, p);
}

::std::auto_ptr< ::xml_schema::decimal >
FaceStimulusWidth (const ::xercesc::DOMInputSource& i,
                   ::xml_schema::flags f,
                   const ::xsd::cxx::tree::properties< char >& p)
{
  ::xsd::cxx::tree::error_handler< char > h;

  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::FaceStimulusWidth (
    static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
}

::std::auto_ptr< ::xml_schema::decimal >
FaceStimulusWidth (const ::xercesc::DOMInputSource& i,
                   ::xsd::cxx::xml::error_handler< char >& h,
                   ::xml_schema::flags f,
                   const ::xsd::cxx::tree::properties< char >& p)
{
  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

  if (!d)
  {
    throw ::xsd::cxx::tree::parsing< char > ();
  }

  return ::FaceStimulusWidth (
    static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
}

::std::auto_ptr< ::xml_schema::decimal >
FaceStimulusWidth (const ::xercesc::DOMInputSource& i,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xsd::cxx::tree::properties< char >& p)
{
  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

  if (!d)
  {
    throw ::xsd::cxx::tree::parsing< char > ();
  }

  return ::FaceStimulusWidth (
    static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
}

::std::auto_ptr< ::xml_schema::decimal >
FaceStimulusWidth (const ::xercesc::DOMDocument& d,
                   ::xml_schema::flags f,
                   const ::xsd::cxx::tree::properties< char >&)
{
  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
    (f & ::xml_schema::flags::keep_dom) 
    ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
    : 0);

  const ::xsd::cxx::xml::dom::element< char > e (
    c.get ()
    ? *c->getDocumentElement ()
    : *d.getDocumentElement ());

  if (e.name () == "FaceStimulusWidth" &&
      e.namespace_ () == "")
  {
    ::std::auto_ptr< ::xml_schema::decimal > r (
      new ::xml_schema::decimal (
        ::xsd::cxx::tree::traits< ::xml_schema::decimal, char >::create (
          e.dom_element (), f, 0)));
    if (f & ::xml_schema::flags::keep_dom) c.release ();
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    e.name (),
    e.namespace_ (),
    "FaceStimulusWidth",
    "");
}

::std::auto_ptr< ::xml_schema::decimal >
QuadrantStimulusDelay (const ::std::basic_string< char >& u,
                       ::xml_schema::flags f,
                       const ::xsd::cxx::tree::properties< char >& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::tree::error_handler< char > h;

  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::QuadrantStimulusDelay (
    static_cast< const ::xercesc::DOMDocument& > (*d), f);
}

::std::auto_ptr< ::xml_schema::decimal >
QuadrantStimulusDelay (const ::std::basic_string< char >& u,
                       ::xsd::cxx::xml::error_handler< char >& h,
                       ::xml_schema::flags f,
                       const ::xsd::cxx::tree::properties< char >& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

  if (!d)
  {
    throw ::xsd::cxx::tree::parsing< char > ();
  }

  return ::QuadrantStimulusDelay (
    static_cast< const ::xercesc::DOMDocument& > (*d), f);
}

::std::auto_ptr< ::xml_schema::decimal >
QuadrantStimulusDelay (const ::std::basic_string< char >& u,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xsd::cxx::tree::properties< char >& p)
{
  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

  if (!d)
  {
    throw ::xsd::cxx::tree::parsing< char > ();
  }

  return ::QuadrantStimulusDelay (
    static_cast< const ::xercesc::DOMDocument& > (*d), f);
}

::std::auto_ptr< ::xml_schema::decimal >
QuadrantStimulusDelay (::std::istream& is,
                       ::xml_schema::flags f,
                       const ::xsd::cxx::tree::properties< char >& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  ::xercesc::Wrapper4InputSource wrap (&isrc, false);
  return ::QuadrantStimulusDelay (wrap, f, p);
}

::std::auto_ptr< ::xml_schema::decimal >
QuadrantStimulusDelay (::std::istream& is,
                       ::xsd::cxx::xml::error_handler< char >& h,
                       ::xml_schema::flags f,
                       const ::xsd::cxx::tree::properties< char >& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  ::xercesc::Wrapper4InputSource wrap (&isrc, false);
  return ::QuadrantStimulusDelay (wrap, h, f, p);
}

::std::auto_ptr< ::xml_schema::decimal >
QuadrantStimulusDelay (::std::istream& is,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xsd::cxx::tree::properties< char >& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  ::xercesc::Wrapper4InputSource wrap (&isrc, false);
  return ::QuadrantStimulusDelay (wrap, h, f, p);
}

::std::auto_ptr< ::xml_schema::decimal >
QuadrantStimulusDelay (::std::istream& is,
                       const ::std::basic_string< char >& sid,
                       ::xml_schema::flags f,
                       const ::xsd::cxx::tree::properties< char >& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  ::xercesc::Wrapper4InputSource wrap (&isrc, false);
  return ::QuadrantStimulusDelay (wrap, f, p);
}

::std::auto_ptr< ::xml_schema::decimal >
QuadrantStimulusDelay (::std::istream& is,
                       const ::std::basic_string< char >& sid,
                       ::xsd::cxx::xml::error_handler< char >& h,
                       ::xml_schema::flags f,
                       const ::xsd::cxx::tree::properties< char >& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  ::xercesc::Wrapper4InputSource wrap (&isrc, false);
  return ::QuadrantStimulusDelay (wrap, h, f, p);
}

::std::auto_ptr< ::xml_schema::decimal >
QuadrantStimulusDelay (::std::istream& is,
                       const ::std::basic_string< char >& sid,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xsd::cxx::tree::properties< char >& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  ::xercesc::Wrapper4InputSource wrap (&isrc, false);
  return ::QuadrantStimulusDelay (wrap, h, f, p);
}

::std::auto_ptr< ::xml_schema::decimal >
QuadrantStimulusDelay (const ::xercesc::DOMInputSource& i,
                       ::xml_schema::flags f,
                       const ::xsd::cxx::tree::properties< char >& p)
{
  ::xsd::cxx::tree::error_handler< char > h;

  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::QuadrantStimulusDelay (
    static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
}

::std::auto_ptr< ::xml_schema::decimal >
QuadrantStimulusDelay (const ::xercesc::DOMInputSource& i,
                       ::xsd::cxx::xml::error_handler< char >& h,
                       ::xml_schema::flags f,
                       const ::xsd::cxx::tree::properties< char >& p)
{
  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

  if (!d)
  {
    throw ::xsd::cxx::tree::parsing< char > ();
  }

  return ::QuadrantStimulusDelay (
    static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
}

::std::auto_ptr< ::xml_schema::decimal >
QuadrantStimulusDelay (const ::xercesc::DOMInputSource& i,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xsd::cxx::tree::properties< char >& p)
{
  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

  if (!d)
  {
    throw ::xsd::cxx::tree::parsing< char > ();
  }

  return ::QuadrantStimulusDelay (
    static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
}

::std::auto_ptr< ::xml_schema::decimal >
QuadrantStimulusDelay (const ::xercesc::DOMDocument& d,
                       ::xml_schema::flags f,
                       const ::xsd::cxx::tree::properties< char >&)
{
  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
    (f & ::xml_schema::flags::keep_dom) 
    ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
    : 0);

  const ::xsd::cxx::xml::dom::element< char > e (
    c.get ()
    ? *c->getDocumentElement ()
    : *d.getDocumentElement ());

  if (e.name () == "QuadrantStimulusDelay" &&
      e.namespace_ () == "")
  {
    ::std::auto_ptr< ::xml_schema::decimal > r (
      new ::xml_schema::decimal (
        ::xsd::cxx::tree::traits< ::xml_schema::decimal, char >::create (
          e.dom_element (), f, 0)));
    if (f & ::xml_schema::flags::keep_dom) c.release ();
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    e.name (),
    e.namespace_ (),
    "QuadrantStimulusDelay",
    "");
}

::std::auto_ptr< ::xml_schema::string >
OutputDirectory (const ::std::basic_string< char >& u,
                 ::xml_schema::flags f,
                 const ::xsd::cxx::tree::properties< char >& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::tree::error_handler< char > h;

  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::OutputDirectory (
    static_cast< const ::xercesc::DOMDocument& > (*d), f);
}

::std::auto_ptr< ::xml_schema::string >
OutputDirectory (const ::std::basic_string< char >& u,
                 ::xsd::cxx::xml::error_handler< char >& h,
                 ::xml_schema::flags f,
                 const ::xsd::cxx::tree::properties< char >& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

  if (!d)
  {
    throw ::xsd::cxx::tree::parsing< char > ();
  }

  return ::OutputDirectory (
    static_cast< const ::xercesc::DOMDocument& > (*d), f);
}

::std::auto_ptr< ::xml_schema::string >
OutputDirectory (const ::std::basic_string< char >& u,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xsd::cxx::tree::properties< char >& p)
{
  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

  if (!d)
  {
    throw ::xsd::cxx::tree::parsing< char > ();
  }

  return ::OutputDirectory (
    static_cast< const ::xercesc::DOMDocument& > (*d), f);
}

::std::auto_ptr< ::xml_schema::string >
OutputDirectory (::std::istream& is,
                 ::xml_schema::flags f,
                 const ::xsd::cxx::tree::properties< char >& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  ::xercesc::Wrapper4InputSource wrap (&isrc, false);
  return ::OutputDirectory (wrap, f, p);
}

::std::auto_ptr< ::xml_schema::string >
OutputDirectory (::std::istream& is,
                 ::xsd::cxx::xml::error_handler< char >& h,
                 ::xml_schema::flags f,
                 const ::xsd::cxx::tree::properties< char >& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  ::xercesc::Wrapper4InputSource wrap (&isrc, false);
  return ::OutputDirectory (wrap, h, f, p);
}

::std::auto_ptr< ::xml_schema::string >
OutputDirectory (::std::istream& is,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xsd::cxx::tree::properties< char >& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  ::xercesc::Wrapper4InputSource wrap (&isrc, false);
  return ::OutputDirectory (wrap, h, f, p);
}

::std::auto_ptr< ::xml_schema::string >
OutputDirectory (::std::istream& is,
                 const ::std::basic_string< char >& sid,
                 ::xml_schema::flags f,
                 const ::xsd::cxx::tree::properties< char >& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  ::xercesc::Wrapper4InputSource wrap (&isrc, false);
  return ::OutputDirectory (wrap, f, p);
}

::std::auto_ptr< ::xml_schema::string >
OutputDirectory (::std::istream& is,
                 const ::std::basic_string< char >& sid,
                 ::xsd::cxx::xml::error_handler< char >& h,
                 ::xml_schema::flags f,
                 const ::xsd::cxx::tree::properties< char >& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  ::xercesc::Wrapper4InputSource wrap (&isrc, false);
  return ::OutputDirectory (wrap, h, f, p);
}

::std::auto_ptr< ::xml_schema::string >
OutputDirectory (::std::istream& is,
                 const ::std::basic_string< char >& sid,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xsd::cxx::tree::properties< char >& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  ::xercesc::Wrapper4InputSource wrap (&isrc, false);
  return ::OutputDirectory (wrap, h, f, p);
}

::std::auto_ptr< ::xml_schema::string >
OutputDirectory (const ::xercesc::DOMInputSource& i,
                 ::xml_schema::flags f,
                 const ::xsd::cxx::tree::properties< char >& p)
{
  ::xsd::cxx::tree::error_handler< char > h;

  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::OutputDirectory (
    static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
}

::std::auto_ptr< ::xml_schema::string >
OutputDirectory (const ::xercesc::DOMInputSource& i,
                 ::xsd::cxx::xml::error_handler< char >& h,
                 ::xml_schema::flags f,
                 const ::xsd::cxx::tree::properties< char >& p)
{
  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

  if (!d)
  {
    throw ::xsd::cxx::tree::parsing< char > ();
  }

  return ::OutputDirectory (
    static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
}

::std::auto_ptr< ::xml_schema::string >
OutputDirectory (const ::xercesc::DOMInputSource& i,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xsd::cxx::tree::properties< char >& p)
{
  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

  if (!d)
  {
    throw ::xsd::cxx::tree::parsing< char > ();
  }

  return ::OutputDirectory (
    static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
}

::std::auto_ptr< ::xml_schema::string >
OutputDirectory (const ::xercesc::DOMDocument& d,
                 ::xml_schema::flags f,
                 const ::xsd::cxx::tree::properties< char >&)
{
  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
    (f & ::xml_schema::flags::keep_dom) 
    ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
    : 0);

  const ::xsd::cxx::xml::dom::element< char > e (
    c.get ()
    ? *c->getDocumentElement ()
    : *d.getDocumentElement ());

  if (e.name () == "OutputDirectory" &&
      e.namespace_ () == "")
  {
    ::std::auto_ptr< ::xml_schema::string > r (
      ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
        e.dom_element (), f, 0));
    if (f & ::xml_schema::flags::keep_dom) c.release ();
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    e.name (),
    e.namespace_ (),
    "OutputDirectory",
    "");
}

::std::auto_ptr< ::xml_schema::string >
MeshOutputDirectory (const ::std::basic_string< char >& u,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< char >& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::tree::error_handler< char > h;

  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::MeshOutputDirectory (
    static_cast< const ::xercesc::DOMDocument& > (*d), f);
}

::std::auto_ptr< ::xml_schema::string >
MeshOutputDirectory (const ::std::basic_string< char >& u,
                     ::xsd::cxx::xml::error_handler< char >& h,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< char >& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

  if (!d)
  {
    throw ::xsd::cxx::tree::parsing< char > ();
  }

  return ::MeshOutputDirectory (
    static_cast< const ::xercesc::DOMDocument& > (*d), f);
}

::std::auto_ptr< ::xml_schema::string >
MeshOutputDirectory (const ::std::basic_string< char >& u,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< char >& p)
{
  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

  if (!d)
  {
    throw ::xsd::cxx::tree::parsing< char > ();
  }

  return ::MeshOutputDirectory (
    static_cast< const ::xercesc::DOMDocument& > (*d), f);
}

::std::auto_ptr< ::xml_schema::string >
MeshOutputDirectory (::std::istream& is,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< char >& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  ::xercesc::Wrapper4InputSource wrap (&isrc, false);
  return ::MeshOutputDirectory (wrap, f, p);
}

::std::auto_ptr< ::xml_schema::string >
MeshOutputDirectory (::std::istream& is,
                     ::xsd::cxx::xml::error_handler< char >& h,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< char >& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  ::xercesc::Wrapper4InputSource wrap (&isrc, false);
  return ::MeshOutputDirectory (wrap, h, f, p);
}

::std::auto_ptr< ::xml_schema::string >
MeshOutputDirectory (::std::istream& is,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< char >& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  ::xercesc::Wrapper4InputSource wrap (&isrc, false);
  return ::MeshOutputDirectory (wrap, h, f, p);
}

::std::auto_ptr< ::xml_schema::string >
MeshOutputDirectory (::std::istream& is,
                     const ::std::basic_string< char >& sid,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< char >& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  ::xercesc::Wrapper4InputSource wrap (&isrc, false);
  return ::MeshOutputDirectory (wrap, f, p);
}

::std::auto_ptr< ::xml_schema::string >
MeshOutputDirectory (::std::istream& is,
                     const ::std::basic_string< char >& sid,
                     ::xsd::cxx::xml::error_handler< char >& h,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< char >& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  ::xercesc::Wrapper4InputSource wrap (&isrc, false);
  return ::MeshOutputDirectory (wrap, h, f, p);
}

::std::auto_ptr< ::xml_schema::string >
MeshOutputDirectory (::std::istream& is,
                     const ::std::basic_string< char >& sid,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< char >& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  ::xercesc::Wrapper4InputSource wrap (&isrc, false);
  return ::MeshOutputDirectory (wrap, h, f, p);
}

::std::auto_ptr< ::xml_schema::string >
MeshOutputDirectory (const ::xercesc::DOMInputSource& i,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< char >& p)
{
  ::xsd::cxx::tree::error_handler< char > h;

  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::MeshOutputDirectory (
    static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
}

::std::auto_ptr< ::xml_schema::string >
MeshOutputDirectory (const ::xercesc::DOMInputSource& i,
                     ::xsd::cxx::xml::error_handler< char >& h,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< char >& p)
{
  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

  if (!d)
  {
    throw ::xsd::cxx::tree::parsing< char > ();
  }

  return ::MeshOutputDirectory (
    static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
}

::std::auto_ptr< ::xml_schema::string >
MeshOutputDirectory (const ::xercesc::DOMInputSource& i,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< char >& p)
{
  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

  if (!d)
  {
    throw ::xsd::cxx::tree::parsing< char > ();
  }

  return ::MeshOutputDirectory (
    static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
}

::std::auto_ptr< ::xml_schema::string >
MeshOutputDirectory (const ::xercesc::DOMDocument& d,
                     ::xml_schema::flags f,
                     const ::xsd::cxx::tree::properties< char >&)
{
  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
    (f & ::xml_schema::flags::keep_dom) 
    ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
    : 0);

  const ::xsd::cxx::xml::dom::element< char > e (
    c.get ()
    ? *c->getDocumentElement ()
    : *d.getDocumentElement ());

  if (e.name () == "MeshOutputDirectory" &&
      e.namespace_ () == "")
  {
    ::std::auto_ptr< ::xml_schema::string > r (
      ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
        e.dom_element (), f, 0));
    if (f & ::xml_schema::flags::keep_dom) c.release ();
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    e.name (),
    e.namespace_ (),
    "MeshOutputDirectory",
    "");
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

