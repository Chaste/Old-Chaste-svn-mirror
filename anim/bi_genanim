# Shell script to create animation following a simulation run
# It will create both a PoinTS and TRIangles file that can be read by Meshalyzer

#===========================================================

# Parameters that specify the location and name of the different input/output files


# 1D
tetgen_mesh_prefix=/home/chaste/eclipse/workspace/Chaste/mesh/test/data/1D_0_to_1_100_elements
results_prefix=/tmp/chaste/testoutput/bidomain1d_with_shock/Bidomain1d_with_shock
out_prefix=/home/chaste/eclipse/workspace/Chaste/anim/1D_0_to_1mm_bidomain

# 2D
#tetgen_mesh_prefix=/home/chaste/eclipse/workspace/Chaste/mesh/test/data/2D_0_to_1mm_400_elements
#results_prefix=/home/chaste/eclipse/workspace/Chaste/testoutput/MonoDg02dWithEdgeStimulus/NewMonodomainLR91_2dWithEdgeStimulus
#results_prefix=/home/chaste/eclipse/workspace/Chaste/testoutput/FhnWithEdgeStimulus/MonodomainFhn_2dWithEdgeStimulus
#out_prefix=/home/chaste/eclipse/workspace/Chaste/anim/2D_0_to_1mm

# 3D
#tetgen_mesh_prefix=/home/chaste/eclipse/workspace/Chaste/mesh/test/data/3D_0_to_1mm_6000_elements
#results_prefix=/tmp/chaste/testoutput/Bidomain3d/bidomain3d
#out_prefix=/home/chaste/eclipse/workspace/Chaste/anim/3D_0_to_1mm

# 3D slab big
#tetgen_mesh_prefix=/home/chaste/eclipse/workspace/Chaste/mesh/test/data/3D_0_to_100mm_6000_elements
#results_prefix=/home/chaste/eclipse/workspace/Chaste/testoutput/MonoDg03dSlabBig/NewMonodomainLR91_3dSlabBig
#out_prefix=/home/chaste/eclipse/workspace/Chaste/anim/3D_0_to_100mm

# heart
#tetgen_mesh_prefix=/home/chaste/eclipse/workspace/Chaste/mesh/test/data/heart
#results_prefix=/home/chaste/eclipse/workspace/Chaste/testoutput/MonoDg0Heart/MonodomainLR91_Heart
#out_prefix=/home/chaste/eclipse/workspace/Chaste/anim/heart

#===========================================================

# Convert node file into pts file to be read by meshalyser
# Note: part of the conversion is specific to 1d, 2d and 3d, so comment/uncomment what is necessary

cat ${tetgen_mesh_prefix}.node | head -n 1 | awk '{print $1}' > ${out_prefix}.pts

# For 1D:
cat ${tetgen_mesh_prefix}.node | tail -n +2 | awk '{print $2 "\t" 0 "\t" 0}' >> ${out_prefix}.pts

# For 2D:
#cat ${tetgen_mesh_prefix}.node | tail -n +2 | awk '{print $2 "\t" $3 "\t" 0}' >> ${out_prefix}.pts

# For 3D:
#cat ${tetgen_mesh_prefix}.node | tail -n +2 | awk '{print $2 "\t" $3 "\t" $4}' >> ${out_prefix}.pts

#===========================================================

# Convert ele/face file into tri file to be read by meshalyser
# Note: depending on whether we are in 2d or 3d the script is different

# For 2D:

#cat ${tetgen_mesh_prefix}.ele | head -n 1 | awk '{print $1}' > ${out_prefix}.tri
#cat ${tetgen_mesh_prefix}.ele | tail -n +2 | awk '{print $2 "\t" $3 "\t" $4 "\t" 1}' >> ${out_prefix}.tri

# For 3D:

#cat ${tetgen_mesh_prefix}.face | head -n 1 | awk '{print $1}' > ${out_prefix}.tri
#cat ${tetgen_mesh_prefix}.face | tail -n +2 | awk '{print $2 "\t" $3 "\t" $4 "\t" 1}' >> ${out_prefix}.tri

#========================================testoutput/MonoDg02dWithPointStimulus===================

# Create the scalar data

rm -f ${out_prefix}_voltage.dat
rm -f ${out_prefix}_extracell.dat
for i in ${results_prefix}_0*.dat; do
  tail -n +2 $i | awk '{if (NR%2==1) print $1}' >> ${out_prefix}_voltage.dat
  tail -n +2 $i | awk '{if (NR%2==0) print $1}' >> ${out_prefix}_extracell.dat
done
