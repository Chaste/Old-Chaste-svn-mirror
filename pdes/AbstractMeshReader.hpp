// AbstractMeshReader.hpp

/**
 * Abstract mesh reader class. Reads output generated by a mesh generator
 * and converts it to a standard format for use in constructing a finite
 * element mesh structure.
 * 
 * A derived class TrianglesMeshReader exists for reading meshes generated
 * by Triangles (in 2-d) and TetGen (in 3-d).
 * 
 * 
 */

#ifndef _ABSTRACTMESHREADER_HPP_
#define _ABSTRACTMESHREADER_HPP_

#include <vector>
#include <string>
#include <fstream>
#include <iostream>
#include <sstream>

#include "Exception.hpp"

class AbstractMeshReader
{
	//private:
	protected:
		int mNumElements; /**< Is the number of elements in the mesh*/
		int mNumNodes; /**< Is the number of nodes in the mesh*/
		int mNumFaces; /**< Is the number of faces (edges in 2-d) in the mesh*/
		int mNumBoundaryFaces; /**< Is the number of boundary faces (edges in 2-d) in the mesh*/
		int mDimension; /**< Is the dimension the mesh*/
		
		int mNumNodeAttributes; /**< Is the number of attributes stored at each node */
		int mMaxNodeBdyMarker; /**< Is the maximum node boundary marker */
		int mNumElementNodes; /** Is the number of nodes per element*/
		int mNumElementAttributes; /**< Is the number of attributes stored for each element */
		int mMaxFaceBdyMarker; /**< Is the maximum face (or edge) boundary marker */
		
		std::string mPathBaseName; /**< Path to the directory where the input files are stored */
		std::vector<std::string> mNodeRawData;  /**< Contents of node input file with comments removed */
		std::vector<std::string> mElementRawData;  /**< Contents of element input file with comments removed */
		std::vector<std::string> mFaceRawData;  /**< Contents of face (or edge) input file with comments removed */
	
		std::vector< std::vector<double> > mNodeData; /**< Is an array of node coordinates ((i,j)th entry is the jth coordinate of node i)*/
		std::vector< std::vector<int> > mElementData; /**< Is an array of the nodes in each element ((i,j)th entry is the jth node of element i) */
		std::vector< std::vector<int> > mFaceData; /**< Is an array of the nodes in each face ((i,j)th entry is the jth node of face i) */
		std::vector< std::vector<int> > mBoundaryFaceData; /**< Is an array of the nodes on each boundary face ((i,j)th entry is the jth node of face i) */		
		
		std::vector< std::vector<double> >::iterator mpNodeIterator; /**< Is an iterator for the node data */
		std::vector< std::vector<int> >::iterator mpElementIterator; /**< Is an iterator for the element data */
		std::vector< std::vector<int> >::iterator mpFaceIterator; /**< Is an iterator for the face data */
		std::vector< std::vector<int> >::iterator mpBoundaryFaceIterator; /**< Is an iterator for the boundary face data */		
	
		bool mIndexFromZero; /**< True if input data is numbered from zero, false otherwise */
	
		std::vector<std::string> GetRawDataFromFile(std::string fileName); /**< Reads an input file fileName, removes comments (indicated by a #) and blank lines */
		std::vector< std::vector<int> > CullInternalFaces(); /**< Remove internal faces and store the result in mBoundaryFaceData */
		
	public:
		AbstractMeshReader() /**< Constructor */
		{
			mNumElements = 0;
			mNumNodes = 0;
			mNumFaces = 0;
			mNumBoundaryFaces = 0;			
			mDimension = 0;
			
			mNumNodeAttributes = 0;
			mMaxNodeBdyMarker = 0;
			mNumElementNodes = 0;
			mNumElementAttributes = 0;
			mMaxFaceBdyMarker = 0;
			
			// We have initialized all numeric variables to zero
			
			mPathBaseName = "";
			mIndexFromZero = false; // Initially assume that nodes are not numbered from zero
		}
		int GetNumElements() const {return mNumElements;} /**< Returns the number of elements in the mesh */
		int GetNumNodes() const {return mNumNodes;} /**< Returns the number of nodes in the mesh */
		int GetNumFaces() const {return mNumFaces;} /**< Returns the number of faces in the mesh (synonym of GetNumEdges()) */
		int GetNumBoundaryFaces() const {return mNumBoundaryFaces;} /**< Returns the number of boundary faces in the mesh (synonym of GetNumBoundaryEdges()) */
		int GetNumEdges() const {return mNumFaces;}	/**< Returns the number of edges in the mesh (synonym of GetNumFaces()) */
		int GetNumBoundaryEdges() const {return mNumBoundaryFaces;}	/**< Returns the number of boundary edges in the mesh (synonym of GetNumBoundaryFaces()) */		
		int GetDimension() const {return mDimension;} /**< Returns the dimension of the system */
		
		int GetMaxNodeIndex(); /**< Returns the maximum node index */
		int GetMinNodeIndex(); /**< Returns the minimum node index */
		
		std::vector<double> GetNextNode(); /**< Returns a vector of the coordinates of each node in turn */
		std::vector<int> GetNextElement(); /**< Returns a vector of the nodes of each element in turn */
		std::vector<int> GetNextEdge(); /**< Returns a vector of the nodes of each edge in turn (synonym of GetNextFace()) */
		std::vector<int> GetNextBoundaryEdge(); /**< Returns a vector of the nodes of each boundary edge in turn (synonym of GetNextBoundaryFace()) */		
		std::vector<int> GetNextFace(); /**< Returns a vector of the nodes of each face in turn (synonym of GetNextEdge()) */
		std::vector<int> GetNextBoundaryFace(); /**< Returns a vector of the nodes of each boundary face in turn (synonym of GetNextBoundaryEdge()) */		

};
#endif //_ABSTRACTMESHREADER_HPP_
