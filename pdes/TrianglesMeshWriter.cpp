#include "TrianglesMeshWriter.hpp"

TrianglesMeshWriter::TrianglesMeshWriter(std::string pathBaseName, int dimension)
{
	
	//Copy path and base name of files to private data
	mPathBaseName=pathBaseName;
	mDimension=dimension;
}

void
TrianglesMeshWriter::WriteFiles()
{
	std::string comment="#Generated by Chaste mesh file writer";
	
	
//Write node file
	std::string node_file_name=mPathBaseName+".node";
	std::ofstream node_file(node_file_name.c_str());
	
	//Write the node header
	int num_attr=0;
	int max_bdy_marker=0;
	int num_nodes=GetNumNodes();
	node_file<< num_nodes << "\t";
	node_file<< mDimension << "\t";
	node_file<< num_attr << "\t";
	node_file<<max_bdy_marker <<"\n";
	
	//Write each node's data
	int default_marker=0;
	for (int item_num=0; item_num<num_nodes; item_num++)
	{
		std::vector<double> current_item=mNodeData[item_num];
		node_file<< item_num;
		for (int i=0;i<mDimension;i++)
		{
			node_file<<"\t"<<current_item[i];
		}
		node_file<<"\t"<< default_marker <<"\n";
		
	}
	node_file<<comment<<"\n";
	node_file.close();
	
	
	
//Write Element file
	std::string element_file_name=mPathBaseName+".ele";
	std::ofstream element_file(element_file_name.c_str());
	
	//Write the element header
	int num_elements=GetNumElements();
	int nodes_per_element=mDimension+1;
	
	element_file<< num_elements << "\t";
	element_file<< nodes_per_element << "\t";
	element_file<< num_attr << "\n";
	
	//Write each element's data
	for (int item_num=0; item_num<num_elements; item_num++)
	{
		std::vector<int> current_item=mElementData[item_num];
		element_file<< item_num;
		for (int i=0;i<nodes_per_element;i++)
		{
			element_file<<"\t"<<current_item[i];
		}
		element_file<<"\n";
		
	}
	element_file<<comment<<"\n";
	element_file.close();
	
	
	//Write boundary face file
	std::string face_file_name=mPathBaseName;
	if (mDimension == 1)
	{
		/** In 1-D there is no boundary file.  It's trivial to calculate*/
		return;
	}
	else if (mDimension == 2)
	{
		face_file_name=face_file_name+".edge";
	}
	else
	{
		face_file_name=face_file_name+".face";
	}
	
	std::ofstream face_file(face_file_name.c_str());
	
	//Write the boundary face header
	int num_faces=GetNumBoundaryFaces();
	
	face_file<< num_faces << "\t";
	face_file<< max_bdy_marker<< "\n";
	
	//Write each face's data
	for (int item_num=0; item_num<num_faces; item_num++)
	{
		std::vector<int> current_item=mBoundaryFaceData[item_num];
		face_file<< item_num;
		for (int i=0;i<mDimension;i++)
		{
			face_file<<"\t"<<current_item[i];
		}
		face_file<<"\t"<<default_marker<<"\n";
		
	}
	face_file<<comment<<"\n";
	face_file.close();
}


TrianglesMeshWriter::~TrianglesMeshWriter()
{
}
