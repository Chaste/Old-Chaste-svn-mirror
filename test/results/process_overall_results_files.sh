#!/bin/bash
#
# This script strips out text from overall_results files generated by 
# TestCryptInvasion.hpp and prints the relevant numbers to collated 
# results files.
#
# Last updated 13/10/09

# Here are all possible parameters...

MUTANT_STATE[0]="1"  #APC_ONE_HIT
MUTANT_STATE[1]="2"  #APC_TWO_HIT
MUTANT_STATE[2]="3"  #BETA_CATENIN_ONE_HIT
MUTANT_STATE[3]="4"  #LABELLED

MUTANT_HEIGHT_FRACTION[0]="0"  #[0.00, 0.05)
MUTANT_HEIGHT_FRACTION[1]="1"  #[0.05, 0.10)
MUTANT_HEIGHT_FRACTION[2]="2"  #[0.10, 0.15)

MUTANT_DAMPING_MULTIPLIER[0]="0.5"
MUTANT_DAMPING_MULTIPLIER[1]="0.75"
MUTANT_DAMPING_MULTIPLIER[2]="1.0"
MUTANT_DAMPING_MULTIPLIER[3]="1.5"
MUTANT_DAMPING_MULTIPLIER[4]="2.0"
MUTANT_DAMPING_MULTIPLIER[5]="2.5"
MUTANT_DAMPING_MULTIPLIER[6]="3.0"
MUTANT_DAMPING_MULTIPLIER[7]="3.5"
MUTANT_DAMPING_MULTIPLIER[8]="4.0"
MUTANT_DAMPING_MULTIPLIER[9]="5.0"
MUTANT_DAMPING_MULTIPLIER[10]="10.0"

for (( k=0 ; k<${#MUTANT_HEIGHT_FRACTION[*]} ; k++))
do
  for (( j=0 ; j<${#MUTANT_DAMPING_MULTIPLIER[*]} ; j++))
  do
  	for (( i=0 ; i<${#MUTANT_STATE[*]} ; i++))
  	do
  		INPUTFILENAME=overall_results${MUTANT_STATE[$i]}_${MUTANT_HEIGHT_FRACTION[$k]}_${MUTANT_DAMPING_MULTIPLIER[$j]}.dat

		# If this file exists...
		if [ -e $INPUTFILENAME ]; then
			echo "Processing $INPUTFILENAME..."

			OUTPUTFILENAME=processed/processed_results${MUTANT_STATE[$i]}_${MUTANT_HEIGHT_FRACTION[$k]}_${MUTANT_DAMPING_MULTIPLIER[$j]}.dat

			# The first line of the collated results file is the initial mutation state
			# (1=APC_ONE_HIT, 2=APC_TWO_HIT, 3=BETA_CATENIN_ONE_HIT, 4=LABELLED). The 
			# second line is the initial mutation height in the first experiment (from 
			# this we can infer the specified bucket). The third line is the damping 
			# multiplier for the initial mutation.

            # All this info in the filename
			#awk '{if (NR==2 || NR==3 || NR==4) print $NF}' $INPUTFILENAME > $OUTPUTFILENAME

			# Print the experiment number, height, duration and result of each experiment to a temporary file
			awk '{if (NR%8==1 || NR%8==3 || NR%8==7 || NR%8==0) print}' $INPUTFILENAME > tempfile.dat

			# Strip out the text so matlab can load the file easily. The result of each 
			# experiment is either 0 (corresponding to the mutant population being washed 
			# out of the crypt), 1 (corresponding to the mutant population taking over 
			# the crypt) or 2 (corresponding to there being no result in the allotted time)
			awk '{gsub(/EXPERIMENT = /,""); gsub(/Initial mutation height = /,""); gsub(/Experiment duration = /,""); gsub(/Mutant population washed out of crypt/,0); gsub(/Mutant population taken over crypt/,1); gsub(/No result/,-1); gsub(/EXPERIMENTS COMPLETE/,""); print}' tempfile.dat >> $OUTPUTFILENAME

			# Tidy up
			rm -f tempfile.dat

			echo "done."
		else
			echo "File $INPUTFILENAME doesn't exist."
		fi
	done
  done
done


## Compile the adhesion results.
## Note these are the same as the normal experiments
## just run for longer and more adhesion settings
## so hard-coded to overwrite those results in the
## processed folder.
ADHESION_NAMES[0]="0.3"
ADHESION_NAMES[1]="0.4"
ADHESION_NAMES[2]="0.5"
ADHESION_NAMES[3]="0.6"
ADHESION_NAMES[4]="0.7"
ADHESION_NAMES[5]="0.8"
ADHESION_NAMES[6]="0.9"
ADHESION_NAMES[7]="1.25"
ADHESION_NAMES[8]="1.75"
ADHESION_NAMES[9]="2.0"
ADHESION_NAMES[10]="2.25"
ADHESION_NAMES[11]="4.5"
ADHESION_NAMES[12]="5"
ADHESION_NAMES[13]="5.5"
ADHESION_NAMES[14]="6"
ADHESION_NAMES[15]="7"
ADHESION_NAMES[16]="8"
ADHESION_NAMES[17]="9"
ADHESION_NAMES[18]="10"

TARGET_ADHESION_NAMES[0]="0.3"
TARGET_ADHESION_NAMES[1]="0.4"
TARGET_ADHESION_NAMES[2]="0.5"
TARGET_ADHESION_NAMES[3]="0.6"
TARGET_ADHESION_NAMES[4]="0.7"
TARGET_ADHESION_NAMES[5]="0.8"
TARGET_ADHESION_NAMES[6]="0.9"
TARGET_ADHESION_NAMES[7]="1.25"
TARGET_ADHESION_NAMES[8]="1.75"
TARGET_ADHESION_NAMES[9]="2.0"
TARGET_ADHESION_NAMES[10]="2.25"
TARGET_ADHESION_NAMES[11]="4.5"
TARGET_ADHESION_NAMES[12]="5.0"
TARGET_ADHESION_NAMES[13]="5.5"
TARGET_ADHESION_NAMES[14]="6.0"
TARGET_ADHESION_NAMES[15]="7.0"
TARGET_ADHESION_NAMES[16]="8.0"
TARGET_ADHESION_NAMES[17]="9.0"
TARGET_ADHESION_NAMES[18]="10.0"

for (( k=0 ; k<${#ADHESION_NAMES[*]} ; k++))
do
  INPUTFILENAME=overall_results${ADHESION_NAMES[$k]}.dat

		# If this file exists...
		if [ -e $INPUTFILENAME ]; then
			echo "Processing $INPUTFILENAME..."

			OUTPUTFILENAME=processed/processed_results4_0_${TARGET_ADHESION_NAMES[$k]}.dat

			# The first line of the collated results file is the initial mutation state
			# (1=APC_ONE_HIT, 2=APC_TWO_HIT, 3=BETA_CATENIN_ONE_HIT, 4=LABELLED). The 
			# second line is the initial mutation height in the first experiment (from 
			# this we can infer the specified bucket). The third line is the damping 
			# multiplier for the initial mutation.

            # All this info in the filename
			#awk '{if (NR==2 || NR==3 || NR==4) print $NF}' $INPUTFILENAME > $OUTPUTFILENAME

                        # NB Fletcher changed the number of lines in the output file just to confuse me here.
			# Print the experiment number, height, duration and result of each experiment to a temporary file
			awk '{if (NR%8==1 || NR%8==2 || NR%8==6 || NR%8==0) print}' $INPUTFILENAME > tempfile.dat

			# Strip out the text so matlab can load the file easily. The result of each 
			# experiment is either 0 (corresponding to the mutant population being washed 
			# out of the crypt), 1 (corresponding to the mutant population taking over 
			# the crypt) or -1 (corresponding to there being no result in the allotted time)
			awk '{gsub(/EXPERIMENT = /,""); gsub(/Initial mutation height = /,""); gsub(/Experiment duration = /,""); gsub(/Mutant population washed out of crypt/,0); gsub(/Mutant population taken over crypt/,1); gsub(/No result/,-1); gsub(/EXPERIMENTS COMPLETE/,""); print}' tempfile.dat >> $OUTPUTFILENAME

			# Tidy up
			rm -f tempfile.dat

			echo "done."
		else
			echo "File $INPUTFILENAME doesn't exist."
		fi
done


## OLD RESULTS

OLD_ADHESION_NAMES[0]="2.50"
OLD_ADHESION_NAMES[1]="2.75"
OLD_ADHESION_NAMES[2]="3.00"
OLD_ADHESION_NAMES[3]="3.25"
OLD_ADHESION_NAMES[4]="3.50"
OLD_ADHESION_NAMES[5]="3.75"
OLD_ADHESION_NAMES[6]="4.00"

OLD_TARGET_ADHESION_NAMES[0]="2.5"
OLD_TARGET_ADHESION_NAMES[1]="2.75"
OLD_TARGET_ADHESION_NAMES[2]="3.0"
OLD_TARGET_ADHESION_NAMES[3]="3.25"
OLD_TARGET_ADHESION_NAMES[4]="3.5"
OLD_TARGET_ADHESION_NAMES[5]="3.75"
OLD_TARGET_ADHESION_NAMES[6]="4.0"

for (( k=0 ; k<${#OLD_ADHESION_NAMES[*]} ; k++))
do
  INPUTFILENAME=overall_results${OLD_ADHESION_NAMES[$k]}.dat

		# If this file exists...
		if [ -e $INPUTFILENAME ]; then
			echo "Processing $INPUTFILENAME..."

			OUTPUTFILENAME=processed/processed_results4_0_${OLD_TARGET_ADHESION_NAMES[$k]}.dat


			# The first line of the collated results file is the initial mutation state
			# (1=APC_ONE_HIT, 2=APC_TWO_HIT, 3=BETA_CATENIN_ONE_HIT, 4=LABELLED). The 
			# second line is the initial mutation height in the first experiment (from 
			# this we can infer the specified bucket). The third line is the damping 
			# multiplier for the initial mutation.

            # All this info in the filename
			#awk '{if (NR==2 || NR==3 || NR==4) print $NF}' $INPUTFILENAME > $OUTPUTFILENAME

                        # NB Fletcher changed the number of lines in the output file just to confuse me here.
			# Print the experiment number, height, duration and result of each experiment to a temporary file
			awk '{if (NR%7==1 || NR%7==2 || NR%7==6 || NR%7==0) print}' $INPUTFILENAME > tempfile.dat

			# Strip out the text so matlab can load the file easily. The result of each 
			# experiment is either 0 (corresponding to the mutant population being washed 
			# out of the crypt), 1 (corresponding to the mutant population taking over 
			# the crypt) or 2 (corresponding to there being no result in the allotted time)
			awk '{gsub(/EXPERIMENT = /,""); gsub(/Initial mutation height = /,""); gsub(/Experiment duration = /,""); gsub(/Mutant population washed out of crypt/,0); gsub(/Mutant population taken over crypt/,1); gsub(/No result/,-1); gsub(/EXPERIMENTS COMPLETE/,""); print}' tempfile.dat >> $OUTPUTFILENAME

			# Tidy up
			rm -f tempfile.dat

			echo "done."
		else
			echo "File $INPUTFILENAME doesn't exist."
		fi
done
