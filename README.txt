/*

Copyright (C) University of Oxford, 2005-2012

University of Oxford means the Chancellor, Masters and Scholars of the
University of Oxford, having an administrative office at Wellington
Square, Oxford OX1 2JD, UK.

This file is part of Chaste.

Chaste is free software: you can redistribute it and/or modify it
under the terms of the GNU Lesser General Public License as published
by the Free Software Foundation, either version 2.1 of the License, or
(at your option) any later version.

Chaste is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
License for more details. The offer of Chaste under the terms of the
License is subject to the License being interpreted in accordance with
English Law and subject to any action against the University of Oxford
being under the jurisdiction of the English Courts.

You should have received a copy of the GNU Lesser General Public License
along with Chaste. If not, see <http://www.gnu.org/licenses/>.

*/

This is a Chaste project folder - it should be put into a copy of the Chaste v3.0 source code in
projects/CryptInvasion

This Chaste project contains all the code necessary to reproduce the results of:

``A theoretical investigation of the effect of dysregulated proliferation 
and adhesion on monoclonal conversion in the colonic crypt" by Mirams, Fletcher, Maini, Byrne.
As published in the Journal of Theoretical Biology, 2012.
http://dx.doi.org/10.1016/j.jtbi.2012.08.002

THIS PROJECT WILL ONLY WORK WITH CHASTE v3.0

There are three folders - build, src and test. 

The <build> folder will contain the executables that you compile and can be ignored.

The <src> folder contains:
	
    * SunterSetup.hpp, SunterSetup.cpp - helper class that sets up a crypt as described by Sunter et al. (1979) 
				        				 for different sites along the length of the colon
    * CryptSimulation2dWithAncestorStoppingEvent (hpp and cpp) - this subclass of CryptSimulation2d (in main code)
               causes the simulation to stop when the crypt has become monoclonal.
    * CryptSimulation2dWithCryptInvasionStoppingEvent (hpp and cpp) - this subclass of CryptSimulation2d (in main code)
               stops when the crypt is monoclonal, and also records the forces on the base of the crypt (for some figures in the paper).				        				 

The <test> folder contains:

    * *run_script.sh - example scripts to run multiple jobs (crypt invasion experiments) with different input parameters.
    
	* TestGenerateSteadyStateCryptForInvasion.hpp - This file can be run to set up the steady-state crypt archives, 
	              which the main simulations are then run from.
    * TestGenerateSteadyStateCryptForInvasionWT.hpp - This file can be run to set up the steady-state crypt archives, 
                  which the main wild-type simulations are then run from.

 	* TestCryptInvasion.hpp - A single crypt invasion experiment introduces a mutation and waits for monoclonality, with any parameters.
 	    - TestAdhesionOnly.hpp - as above but only allows variation of adhesion scaling factor.
 	    - TestProliferationOnly.hpp - as above but only allows variation of proliferation ceiling.
 	    - TestWildTypeMonoclonality.hpp - as above but tailored for the Wild Type results of sections 3.1--3.3
 	
 	* <data> folder - to contain the various steady-state crypt archives generated by the first two tests, for loading by the lower ones.
 	
 	* <results> folder - contains all of the raw data (produced by above test files) and a script:
 	            ./process_all_results.sh - this reads the output and makes files suitable for matlab reading, putting them in:
 	            
 	            * <results/processed> - files with numbers and no text, for matlab to read.
 	            
 	            * <results/graphs> - matlab files that will recreate the paper graphs, from the data in <results/processed>.

Once you have all the Chaste dependencies installed (as per https://chaste.cs.ox.ac.uk/cgi-bin/trac.cgi/wiki/DeveloperInstallGuide 
using ubuntu is by far the easiest way to do this). You should get a copy of Chaste 3.0 (from http://www.cs.ox.ac.uk/chaste/download)
and copy the folder containing this readme file into 

<Chaste3.0 path>/projects/CryptInvasion

You can then run things with

e.g.

cd <Chaste3.0 path>

scons build=GccOptNative test_suite=projects/CryptInvasion/test/TestGenerateSteadyStateCryptForInvasion.hpp





