#!/bin/sh

# POST-COMMIT HOOK
#
# The post-commit hook is invoked after a commit.  Subversion runs
# this hook by invoking a program (script, executable, binary, etc.)
# named 'post-commit' (for which this file is a template) with the 
# following ordered arguments:
#
#   [1] REPOS-PATH   (the path to this repository)
#   [2] REV          (the number of the revision just committed)
#
# The default working directory for the invocation is undefined, so
# the program should set one explicitly if it cares.
#
# Because the commit has already completed and cannot be undone,
# the exit code of the hook program is ignored.  The hook program
# can use the 'svnlook' utility to help it examine the
# newly-committed tree.
#
# On a Unix system, the normal procedure is to have 'post-commit'
# invoke other programs to do the real work, though it may do the
# work itself too.
#
# Note that 'post-commit' must be executable by the user(s) who will
# invoke it (typically the user httpd runs as), and that user must
# have filesystem-level permission to access the repository.
#
# On a Windows system, you should name the hook program
# 'post-commit.bat' or 'post-commit.exe',
# but the basic idea is the same.
# 
# Here is an example hook script, for a Unix /bin/sh interpreter:

REPOS="$1"
REV="$2"

echo "Revision: $REV" > /var/www/html/out/$REV
ln -sf /var/www/html/out/$REV /var/www/html/out/latest
mkdir /var/www/chaste_test_data/continuous/$REV

(ssh bob@userpc60.comlab.ox.ac.uk ./builder $REV>>/var/www/html/out/$REV 2>&1 ;
scp -r bob@userpc60.comlab.ox.ac.uk:testresults/userpc60.comlab.ox.ac.uk.\* \
       /var/www/chaste_test_data/continuous/$REV/;
for dir in /var/www/chaste_test_data/continuous/$REV/*; do
  ln -s /var/www/html/out/$REV $dir/build.log;
done;
ssh bob@userpc60.comlab.ox.ac.uk /bin/rm -r ./testresults/userpc60.comlab.ox.ac.uk.\* ; ) &

#commit-email.pl "$REPOS" "$REV" commit-watchers@example.org
#log-commit.py --repository "$REPOS" --revision "$REV"
