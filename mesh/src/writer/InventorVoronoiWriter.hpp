#ifndef INVENTORVORONOIWRITER_HPP_
#define INVENTORVORONOIWRITER_HPP_

#include "OutputFileHandler.hpp"

const std::string inventor_header="#Inventor V2.0 ascii \n\
\n\
Separator { \n\
  Info { \n\
    string \"tetrahedron.iv generated by IVREAD.\" \n\
    string \"Original data in file tetrahedron.wrl.\" \n\
  } \n\
  Separator { \n\
    LightModel { \n\
      model BASE_COLOR \n\
    } \n\
\n\
    Material { \n\
      ambientColor  0.2 0.2 0.2 \n\
\n\
      emissiveColor 0.0 0.0 0.0 \n\
      specularColor 1.0 1.0 1.0 \n\
      shininess     0.2 \n\
\n\
    } \n\
    ShapeHints { \n\
      vertexOrdering COUNTERCLOCKWISE \n\
      shapeType UNKNOWN_SHAPE_TYPE \n\
      faceType CONVEX \n\
      creaseAngle 6.28319 \n\
    } \n\
\n\
    DrawStyle { \n\
        style           LINES \n\
        lineWidth           3 \n\
        linePattern       255 \n\
    } \n\
\n\
    Coordinate3 { \n\
      point [ \n\
";

const std::string inventor_mid="      ] \n\
    } \n\
    IndexedFaceSet { \n\
      coordIndex [ \n\
";

const std::string inventor_footer="      ] \n\
    } \n\
  } \n\
} \n\
";
class InventorVoronoiWriter
{
protected:
    OutputFileHandler *mpOutputFileHandler; /**< Output file handler */
    std::string mBaseName; /**< Base name for the input files */
    
public:
    /** Constructor */
    InventorVoronoiWriter(const std::string &rDirectory,
                       const std::string &rBaseName,
                       const bool clearOutputDir=true)
            : mBaseName(rBaseName)
    {
        mpOutputFileHandler = new OutputFileHandler(rDirectory, clearOutputDir);
    }
    
    /** Destructor */
    ~InventorVoronoiWriter()
    {
        delete mpOutputFileHandler;
    }
    
    void Write(const VoronoiTessellation& rTessellation)
    {
        // open inventor file
        std::string file_name = this->mBaseName+".iv";
        out_stream p_file = this->mpOutputFileHandler->OpenOutputFile(file_name);
        
        // write out header part of file      

        *p_file << inventor_header;
        
        // write out vertices
        // and construct map from pointer to vertex to vertex number
        
        std::map< c_vector<double, 3>*, unsigned> vertex_number_map;
        for ( unsigned vertex_number=0;
              vertex_number<rTessellation.mVertices.size();
              vertex_number++ )
        {
            c_vector<double ,3>& vertex=*(rTessellation.mVertices[vertex_number]);
            *p_file << "        " << vertex(0) << " " << vertex(1) << " " << vertex(2) << ",\n";
            
            vertex_number_map[rTessellation.mVertices[vertex_number]]=vertex_number;
        }
        
        *p_file << inventor_mid;
        
        // write out faces;
        
        for (unsigned face_number=0;
             face_number < rTessellation.mFaces.size();
             face_number++)
        {
            *p_file << "        ";
            Face& face=*(rTessellation.mFaces[face_number]);
            for (unsigned vertex_local_number=0;
                 vertex_local_number < face.mVertices.size();
                 vertex_local_number++)
            {
                 unsigned vertex_number=vertex_number_map[face.mVertices[vertex_local_number]];
                 *p_file << vertex_number << ", ";
            }
            *p_file << "\n";
        }
        *p_file << inventor_footer;
    }
};

#endif /*INVENTORVORONOIWRITER_HPP_*/
