#ifndef _TRIANGLESMESHWRITER_CPP_
#define _TRIANGLESMESHWRITER_CPP_

#include "TrianglesMeshWriter.hpp"

template<int ELEMENT_DIM, int SPACE_DIM>
TrianglesMeshWriter<ELEMENT_DIM, SPACE_DIM>::TrianglesMeshWriter(
                                         const std::string &rDirectory,
                                         const std::string &rBaseName,
                                         const int &rDimension)
    : AbstractMeshWriter<ELEMENT_DIM, SPACE_DIM>(rDirectory, rBaseName, rDimension)
{
}

template<int ELEMENT_DIM, int SPACE_DIM>
void TrianglesMeshWriter<ELEMENT_DIM, SPACE_DIM>::WriteFiles()
{
	std::string comment="#Generated by Chaste mesh file writer";
	
    //Write node file
    std::string node_file_name = this->mBaseName+".node";
    out_stream p_node_file = this->mpOutputFileHandler->OpenOutputFile(node_file_name);
	
	//Write the node header
	int num_attr=0;
	int max_bdy_marker=0;
	int num_nodes = this->GetNumNodes();
	*p_node_file<< num_nodes << "\t";
	*p_node_file<< this->mDimension << "\t";
	*p_node_file<< num_attr << "\t";
	*p_node_file<<max_bdy_marker <<"\n";
	
	//Write each node's data
	int default_marker=0;
	for (int item_num=0; item_num<num_nodes; item_num++)
	{
		std::vector<double> current_item = this->mNodeData[item_num];
		*p_node_file<< item_num;
		for (unsigned int i=0;i<this->mDimension;i++)
		{
			*p_node_file<<"\t"<<current_item[i];
		}
		*p_node_file<<"\t"<< default_marker <<"\n";
		
	}
	*p_node_file<<comment<<"\n";
	p_node_file->close();
	
    //Write Element file
    std::string element_file_name = this->mBaseName+".ele";
    out_stream p_element_file = this->mpOutputFileHandler->OpenOutputFile(element_file_name);
	
	//Write the element header
	int num_elements = this->GetNumElements();
	int nodes_per_element = this->mDimension+1;
	
	*p_element_file<< num_elements << "\t";
	*p_element_file<< nodes_per_element << "\t";
	*p_element_file<< num_attr << "\n";
	
	//Write each element's data
	for (int item_num=0; item_num<num_elements; item_num++)
	{
		std::vector<int> current_item = this->mElementData[item_num];
		*p_element_file<< item_num;
		for (int i=0;i<nodes_per_element;i++)
		{
			*p_element_file<<"\t"<<current_item[i];
		}
		*p_element_file<<"\n";
		
	}
	*p_element_file<<comment<<"\n";
	p_element_file->close();
	
	//Write boundary face file
    std::string face_file_name = this->mBaseName;
    
	if (this->mDimension == 1)
	{
		// In 1-D there is no boundary file.  It's trivial to calculate
		return;
	}
	else if (this->mDimension == 2)
	{
		face_file_name=face_file_name+".edge";
	}
	else
	{
		face_file_name=face_file_name+".face";
	}
	out_stream p_face_file = this->mpOutputFileHandler->OpenOutputFile(face_file_name);
	
	//Write the boundary face header
	int num_faces = this->GetNumBoundaryFaces();
	
	*p_face_file<< num_faces << "\t";
	*p_face_file<< max_bdy_marker<< "\n";
	
	//Write each face's data
	for (int item_num=0; item_num<num_faces; item_num++)
	{
		std::vector<int> current_item = this->mBoundaryFaceData[item_num];
		*p_face_file<< item_num;
		for (unsigned int i=0;i<this->mDimension;i++)
		{
			*p_face_file<<"\t"<<current_item[i];
		}
		*p_face_file<<"\t"<<default_marker<<"\n";
		
	}
	*p_face_file<<comment<<"\n";
	p_face_file->close();
}

template<int ELEMENT_DIM, int SPACE_DIM>
TrianglesMeshWriter<ELEMENT_DIM, SPACE_DIM>::~TrianglesMeshWriter()
{
}

#endif //_TRIANGLESMESHWRITER_CPP_
