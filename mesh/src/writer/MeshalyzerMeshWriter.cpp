#include "MeshalyzerMeshWriter.hpp"

MeshalyzerMeshWriter::MeshalyzerMeshWriter(std::string pathBaseName, bool setCoolGraphics)
{
	
	//Copy path and base name of files to private data
	mPathBaseName=pathBaseName;
	mDimension=3;
	
	if (setCoolGraphics) {
		mIndexFromZero=false;
		mWriteMetaFile=true;
	} else {
		mIndexFromZero=true;
		mWriteMetaFile=false;
	}
}


void
MeshalyzerMeshWriter::WriteFiles()
{
	//std::string comment="#Generated by Chaste mesh file writer";
	
	
//Write node file
	std::string node_file_name=mPathBaseName+".pts";
	std::ofstream node_file(node_file_name.c_str());
	
	//Write the node header
	int num_nodes=GetNumNodes();
	node_file<< num_nodes << "\n";
	
	//Write each node's data
	for (int item_num=0; item_num<num_nodes; item_num++)
	{
		std::vector<double> current_item=mNodeData[item_num];
		for (unsigned int i=0;i<mDimension;i++)
		{
			node_file<<current_item[i]<<"\t";
		}
		node_file<<"\n";
		
	}
	//node_file<<comment<<"\n";
	node_file.close();
	
	
	
//Write Element file
	std::string element_file_name=mPathBaseName+".tetras";
	std::ofstream element_file(element_file_name.c_str());
	
	//Write the element header
	int num_elements=GetNumElements();
	
	element_file<< num_elements << "\n";
		
	//Write each element's data
	int nodes_per_element = 4;
	for (int item_num=0; item_num<num_elements; item_num++)
	{
		std::vector<int> current_item=mElementData[item_num];
		for (int i=0;i<nodes_per_element;i++)
		{
			if (mIndexFromZero)
			{
				element_file<<current_item[i]<<"\t";
			} 
			else
			{
				element_file<<current_item[i]+1<<"\t";
			}
		}
		element_file<<"\n";
		
	}
	//element_file<<comment<<"\n";
	element_file.close();
	
	
	//Write boundary face file
	std::string face_file_name=mPathBaseName+".tris";
	std::ofstream face_file(face_file_name.c_str());
	
	//Write the boundary face header
	int num_faces=GetNumBoundaryFaces();
	
	face_file<< num_faces << "\n";
		
	//Write each face's data
	double material_property= 0.0;
	for (int item_num=0; item_num<num_faces; item_num++)
	{
		std::vector<int> current_item=mBoundaryFaceData[item_num];
		for (unsigned int i=0;i<mDimension;i++)
		{
			if (mIndexFromZero)
			{
				face_file<<current_item[i]<<"\t";
			} 
			else
			{
				face_file<<current_item[i]+1<<"\t";
			}
		}
		face_file<<material_property<<"\n";
		
	}
	//face_file<<comment<<"\n";
	face_file.close();

	if (mWriteMetaFile) {
		std::string meta_file_name=mPathBaseName+".cg_in";
		std::ofstream meta_file(meta_file_name.c_str());
		meta_file<< "1\n"<< "0\n";
		meta_file<< face_file_name<<"\n";
		meta_file.close();
	}
	

}





MeshalyzerMeshWriter::~MeshalyzerMeshWriter()
{
}
