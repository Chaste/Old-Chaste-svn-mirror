/*

Copyright (C) University of Oxford, 2005-2010

University of Oxford means the Chancellor, Masters and Scholars of the
University of Oxford, having an administrative office at Wellington
Square, Oxford OX1 2JD, UK.

This file is part of Chaste.

Chaste is free software: you can redistribute it and/or modify it
under the terms of the GNU Lesser General Public License as published
by the Free Software Foundation, either version 2.1 of the License, or
(at your option) any later version.

Chaste is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
License for more details. The offer of Chaste under the terms of the
License is subject to the License being interpreted in accordance with
English Law and subject to any action against the University of Oxford
being under the jurisdiction of the English Courts.

You should have received a copy of the GNU Lesser General Public License
along with Chaste. If not, see <http://www.gnu.org/licenses/>.

*/

#include "UblasIncludes.hpp"

#include <map>

#include "InventorVoronoiWriter.hpp"

#include "Exception.hpp"

const std::string INVENTOR_HEADER="#Inventor V2.0 ascii \n\
\n\
Separator { \n\
  Info { \n\
    string \"tetrahedron.iv generated by IVREAD.\" \n\
    string \"Original data in file tetrahedron.wrl.\" \n\
  } \n\
  Separator { \n\
    LightModel { \n\
      model BASE_COLOR \n\
    } \n\
\n\
    Material { \n\
      ambientColor  0.2 0.2 0.2 \n\
\n\
      emissiveColor 0.0 0.0 0.0 \n\
      specularColor 1.0 1.0 1.0 \n\
      shininess     0.2 \n\
\n\
    } \n\
    ShapeHints { \n\
      vertexOrdering COUNTERCLOCKWISE \n\
      shapeType UNKNOWN_SHAPE_TYPE \n\
      faceType CONVEX \n\
      creaseAngle 6.28319 \n\
    } \n\
\n\
    DrawStyle { \n\
        style           LINES \n\
        lineWidth           3 \n\
        linePattern       255 \n\
    } \n\
\n\
    Coordinate3 { \n\
      point [ \n\
";

const std::string INVENTOR_MID="      ] \n\
    } \n\
    IndexedFaceSet { \n\
      coordIndex [ \n\
";

const std::string INVENTOR_FOOTER="      ] \n\
    } \n\
  } \n\
} \n\
";



InventorVoronoiWriter::InventorVoronoiWriter(const std::string& rDirectory,
                                             const std::string& rBaseName,
                                             const bool clearOutputDir)
    : mBaseName(rBaseName)
{
    mpOutputFileHandler = new OutputFileHandler(rDirectory, clearOutputDir);
}

InventorVoronoiWriter::~InventorVoronoiWriter()
{
    delete mpOutputFileHandler;
}

void InventorVoronoiWriter::Write(const VoronoiTessellation<3>& rTessellation)
{
    // Open inventor file
    std::string file_name = this->mBaseName + ".iv";
    out_stream p_file = this->mpOutputFileHandler->OpenOutputFile(file_name);

    // Write out header part of file
    *p_file << INVENTOR_HEADER;

    // Write out vertices and construct map from pointer to vertex to vertex number
    std::map< c_vector<double, 3>*, unsigned> vertex_number_map;
    for (unsigned vertex_number=0; vertex_number<rTessellation.GetNumVertices(); vertex_number++)
    {
        c_vector<double ,3>& vertex = *(rTessellation.mVertices[vertex_number]);
        *p_file << "        " << vertex(0) << " " << vertex(1) << " " << vertex(2) << ",\n";

        vertex_number_map[rTessellation.mVertices[vertex_number]] = vertex_number;
    }

    *p_file << INVENTOR_MID; //  CHANGE this to: *p_file << "\n";

    // Write out faces
    for (unsigned face_number=0; face_number<rTessellation.GetNumFaces(); face_number++)
    {
        *p_file << "        ";
        Face<3>& face = *(rTessellation.mFaces[face_number]);
        for (unsigned vertex_local_number = 0;
             vertex_local_number < face.GetNumVertices();
             vertex_local_number++)
        {
            // Note this assumes we can definitely find the vertex in the map
            unsigned vertex_number = vertex_number_map[&(face.rGetVertex(vertex_local_number))];
           * p_file << vertex_number << ", ";
        }
        *p_file << "\n";
    }
    *p_file << INVENTOR_FOOTER;
}

void InventorVoronoiWriter::ScaleAndWrite(VoronoiTessellation<3>& rTessellation, double scaleFactor)
{
    if ((scaleFactor <= 0.0) || (scaleFactor > 1.0))
    {
        EXCEPTION("scaleFactor should be between 0 and 1");
    }

    // Open inventor file
    std::string file_name = this->mBaseName+".iv";
    out_stream p_file = this->mpOutputFileHandler->OpenOutputFile(file_name);

    // Write out header part of file
    *p_file << INVENTOR_HEADER;

    unsigned global_vertex_number = 0;

    // The face data which will be written to file afterwards
    std::vector<std::vector<unsigned> > new_faces_data;
    std::vector<unsigned> number_faces_per_cell;

    // Loop over cells and write out scaled vertices for each one, storing face info as we go
    for (unsigned cell_index=0; cell_index<rTessellation.mVoronoiCells.size(); cell_index++)
    {
        c_vector<double, 3>& r_cell_centre = rTessellation.mVoronoiCells[cell_index].rGetVoronoiCellCentre();

        // Map from position to (new) global vertex number, for this cell only
        std::map< c_vector<double, 3>*, unsigned> vertex_number_map;

        const VoronoiCell& r_cell = rTessellation.mVoronoiCells[cell_index];

        for (unsigned face_number=0; face_number<r_cell.GetNumFaces(); face_number++)
        {
            std::vector<unsigned> face_vertex_data;

            Face<3> face = r_cell.rGetFace(face_number);

            for (unsigned face_vertex_number=0; face_vertex_number<face.GetNumVertices(); face_vertex_number++)
            {
                unsigned global_number_for_this_vertex;

                // See if vertex is in the map
                std::map<c_vector<double, 3>*, unsigned>::iterator iter = vertex_number_map.find(&(face.rGetVertex(face_vertex_number)));

                if (iter != vertex_number_map.end())
                {
                    global_number_for_this_vertex = iter->second;
                }
                else
                {
                    global_number_for_this_vertex = global_vertex_number;

                    // Not in the map, so add it to map
                    vertex_number_map[&(face.rGetVertex(face_vertex_number))] = global_number_for_this_vertex;
                    global_vertex_number++;

                    // Scale the vertex and print out the new position
                    c_vector<double, 3> new_vertex = face.rGetVertex(face_vertex_number);
                    new_vertex = scaleFactor*(new_vertex - r_cell_centre) + r_cell_centre;

                    *p_file << "        " << new_vertex(0) << " " << new_vertex(1) << " " << new_vertex(2) << ",\n";
                }

                // Store this vertex's global number as a vertex for this face
                face_vertex_data.push_back(global_number_for_this_vertex);
            }

            // Add the vertex data for this face to the store
            new_faces_data.push_back( face_vertex_data );
        }

        // Store how many faces were in this cell
        number_faces_per_cell.push_back(r_cell.GetNumFaces());
    }

    unsigned index = 0;

    // Write the face info
    // Loop over cells
    for (unsigned i=0; i<number_faces_per_cell.size(); i++)
    {
        if (number_faces_per_cell[i] > 0)
        {
            *p_file << INVENTOR_MID;
            // Loop over faces
            for (unsigned j=0; j<number_faces_per_cell[i]; j++)
            {
                *p_file << "        ";
                assert(index<new_faces_data.size());
                if ( rTessellation.rGetCell(i).FaceIsOrientatedClockwise(j) )
                {
                    for (unsigned k=0; k<new_faces_data[index].size(); k++)
                    {
                        *p_file << new_faces_data[index][k] << ", ";
                    }
                 }
                 else
                 {
                    for (unsigned k=0; k<new_faces_data[index].size(); k++)
                    {
                        unsigned l = new_faces_data[index].size() - k - 1;
                        *p_file << new_faces_data[index][l] << ", ";
                    }
                 }
                 *p_file << "\n";
                 index++;
            }
        }
    }
    *p_file << INVENTOR_FOOTER;
}
