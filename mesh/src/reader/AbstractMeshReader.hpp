/*

Copyright (C) University of Oxford, 2008

University of Oxford means the Chancellor, Masters and Scholars of the
University of Oxford, having an administrative office at Wellington
Square, Oxford OX1 2JD, UK.

This file is part of Chaste.

Chaste is free software: you can redistribute it and/or modify it
under the terms of the GNU Lesser General Public License as published
by the Free Software Foundation, either version 2.1 of the License, or
(at your option) any later version.

Chaste is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
License for more details. The offer of Chaste under the terms of the
License is subject to the License being interpreted in accordance with
English Law and subject to any action against the University of Oxford
being under the jurisdiction of the English Courts.

You should have received a copy of the GNU Lesser General Public License
along with Chaste. If not, see <http://www.gnu.org/licenses/>.

*/


#ifndef _ABSTRACTMESHREADER_HPP_
#define _ABSTRACTMESHREADER_HPP_

/**
 * Abstract mesh reader class. Reads output generated by a mesh generator
 * and converts it to a standard format for use in constructing a finite
 * element mesh structure.
 *
 * A derived class TrianglesMeshReader exists for reading meshes generated
 * by Triangles (in 2-d) and TetGen (in 3-d).
 *
 * A derived class MemfemMeshReader reads 3D data from the Tulane University code
 *
 * A derived class FemlabMeshReader reads 2D data from Femlab or Matlab PDEToolbox
 *
 */


#include <vector>
#include <string>
#include <fstream>
#include <iostream>
#include <sstream>
#include "Exception.hpp"

template<unsigned ELEMENT_DIM, unsigned SPACE_DIM>
class AbstractMeshReader
{
protected:
//    unsigned mNumNodeAttributes; /**< Is the number of attributes stored at each node */
//    unsigned mMaxNodeBdyMarker; /**< Is the maximum node boundary marker */
//    unsigned mNumElementNodes; /** Is the number of nodes per element*/
//    unsigned mNumElementAttributes; /**< Is the number of attributes stored for each element */
//    unsigned mMaxFaceBdyMarker; /**< Is the maximum face (or edge) boundary marker */


//    bool mIndexFromZero; /**< True if input data is numbered from zero, false otherwise */

public:
//    AbstractMeshReader() /**< Constructor */
//    {
//        mNumNodeAttributes = 0;
//        mMaxNodeBdyMarker = 0;
//        mNumElementNodes = 0;
//        mNumElementAttributes = 0;
//        mMaxFaceBdyMarker = 0;
//
//        // We have initialized all numeric variables to zero
//
//        mIndexFromZero = false; // Initially assume that nodes are not numbered from zero
//    }
    virtual ~AbstractMeshReader()
    {}

    /*< Returns the number of elements in the mesh */
    virtual unsigned GetNumElements() const =0;

    /*< Returns the number of nodes in the mesh */
    virtual unsigned GetNumNodes() const =0;

    /*< Returns the number of faces in the mesh (synonym of GetNumEdges()) */
    virtual unsigned GetNumFaces() const =0;

    /*< Returns the number of edges in the mesh (synonym of GetNumFaces()) */
    unsigned GetNumEdges() const
    {
        return GetNumFaces();
    }

    /*< Returns a vector of the coordinates of each node in turn */
    virtual std::vector<double> GetNextNode()=0;
     
    /*< Resets pointers to beginning*/
    virtual void Reset()=0;     
     
    /*< Returns a vector of the nodes of each element in turn */
    virtual std::vector<unsigned> GetNextElement()=0; 
        
    /*< Returns a vector of the nodes of each face in turn (synonym of GetNextEdge()) */
    virtual std::vector<unsigned> GetNextFace()=0;
    
    /*< Returns a vector of the nodes of each edge in turn (synonym of GetNextFace()) */
    std::vector<unsigned> GetNextEdge()
    {
        return GetNextFace();
    }     
};


#endif //_ABSTRACTMESHREADER_HPP_
