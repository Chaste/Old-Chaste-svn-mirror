#ifndef _MALECKAR2009ODESYSTEM_
#define _MALECKAR2009ODESYSTEM_

//! @file
//! 
//! This source file was generated from CellML.
//! 
//! Model: Maleckar
//! 
//! Processed by pycml - CellML Tools in Python
//!     (translate: 7202, pycml: 7152)
//! on Thu Oct 29 17:57:24 2009
//! 
//! <autogenerated>

#include <boost/serialization/access.hpp>
#include <boost/serialization/base_object.hpp>
#include <cmath>
#include <cassert>
#include "AbstractCardiacCell.hpp"
#include "Exception.hpp"
#include "OdeSystemInformation.hpp"
#include "AbstractStimulusFunction.hpp"

// Needs to be included last
#include <boost/serialization/export.hpp>


/**
 * This class describes the Maleckar 2009 model of an atrial cell.
 * The code was automatically converted from the CellML repository file using Pycml (see above)
 * It was then manually split into cpp and hpp files.
 */
class Maleckar2009OdeSystem : public AbstractCardiacCell
{
    friend class boost::serialization::access;
    template<class Archive>
    void serialize(Archive & archive, const unsigned int version)
    {
        archive & boost::serialization::base_object<AbstractCardiacCell>(*this);
    }

private:

    /** Scale factor for Gks*/
    double mScaleFactorGks;
    /** Scale factor for Gto*/
    double mScaleFactorIto;
    /** Scale factor for Gkr*/
    double mScaleFactorGkr;
    /** Scale factor for Gna*/
    double mScaleFactorGna;
    /** Scale factor for Ach*/
    double mScaleFactorAch;
        
public:

    /**
     * Constructor
     * 
     * @param pSolver is a pointer to the ODE solver
     * @param pIntracellularStimulus is a pointer to the intracellular stimulus
     */
    Maleckar2009OdeSystem(boost::shared_ptr<AbstractIvpOdeSolver> pSolver, 
                 boost::shared_ptr<AbstractStimulusFunction> pIntracellularStimulus);
 
    /**
     * Destructor
     */   
    ~Maleckar2009OdeSystem(void);
    
    
    /**
     * verify the state variables
     */
    void VerifyGatingVariables();

    /**
     * Set the scale factor for Gks 
     * @param sfgks
     */
    void SetScaleFactorGks(double sfgks);

    /**
     * Set the scale factor for Ito, called It in this model
     * @param sfito
     */
    void SetScaleFactorIto(double sfito);

    /**
     * Set the scale factor for Gkr (might be useful for simulating LQT2)
     * @param sfgkr
     */
    void SetScaleFactorGkr(double sfgkr);

    /**
     * Set the scale factor for Gna, maximal sodium conductance
     * @param sfgna
     */
    void SetScaleFactorGna(double sfgna);
    
    /**
     * Set the scale factor for Ach, acetilcholine concentration
     * @param sfach
     */
    void SetScaleFactorAch(double sfach);

    /**
     * Calculates the ionic current
     * 
     * @returns the total ionic current
     */
    double GetIIonic();
    
    /**
     * Evaluate the derivatives of the state variables
     * 
     * @param var_Environment__time  the current time, in milliseconds
     * @param rY  current values of the state variables
     * @param rDY  to be filled in with derivatives
     */
    void EvaluateYDerivatives(double var_environment__time,
                              const std::vector<double> &rY,
                              std::vector<double> &rDY);
};
#endif
