#ifndef Cellnoble_varghese_kohl_noble_1998_with_stretch_FromCellML_HPP_
#define Cellnoble_varghese_kohl_noble_1998_with_stretch_FromCellML_HPP_

//! @file
//! 
//! This source file was generated from CellML.
//! 
//! Model: noble_varghese_kohl_noble_1998_stretch
//! 
//! Processed by pycml - CellML Tools in Python
//!     (translate: 8682, pycml: 8682)
//! on Wed Apr 21 12:15:28 2010
//! 
//! <autogenerated>

#include "ChasteSerialization.hpp"
#include <boost/serialization/base_object.hpp>
#include "AbstractCardiacCell.hpp"
#include "AbstractStimulusFunction.hpp"

class Cellnoble_varghese_kohl_noble_1998_with_stretch_FromCellML : public AbstractCardiacCell
{
    friend class boost::serialization::access;
    template<class Archive>
    void serialize(Archive & archive, const unsigned int version)
    {
        archive & boost::serialization::base_object<AbstractCardiacCell >(*this);
    }
        
private:
    double mSarcomereLength;
    
public:
    Cellnoble_varghese_kohl_noble_1998_with_stretch_FromCellML(boost::shared_ptr<AbstractIvpOdeSolver> pSolver, boost::shared_ptr<AbstractStimulusFunction> pIntracellularStimulus);
    ~Cellnoble_varghese_kohl_noble_1998_with_stretch_FromCellML();
    void VerifyStateVariables();
    double GetIIonic();
    void EvaluateYDerivatives(double var_environment__time, const std::vector<double>& rY, std::vector<double>& rDY);
    
    void SetStretch(double stretch)
    {
        assert(stretch > 0);
        mSarcomereLength = stretch*2.0; // 2.0um = sarcomere rest length - this value is hardcoded throughout this model
    }
    
    double GetStretch()
    {
        return mSarcomereLength/2.0; // 2.0um = sarcomere rest length - this value is hardcoded throughout this model
    }
};


// Needs to be included last
#include "SerializationExportWrapper.hpp"
CHASTE_CLASS_EXPORT(Cellnoble_varghese_kohl_noble_1998_with_stretch_FromCellML)

namespace boost
{
    namespace serialization
    {
        template<class Archive>
        inline void save_construct_data(
            Archive & ar, const Cellnoble_varghese_kohl_noble_1998_with_stretch_FromCellML * t, const unsigned int fileVersion)
        {
            const boost::shared_ptr<AbstractIvpOdeSolver> p_solver = t->GetSolver();
            const boost::shared_ptr<AbstractStimulusFunction> p_stimulus = t->GetStimulusFunction();
            ar << p_solver;
            ar << p_stimulus;
        }
        
        template<class Archive>
        inline void load_construct_data(
            Archive & ar, Cellnoble_varghese_kohl_noble_1998_with_stretch_FromCellML * t, const unsigned int fileVersion)
        {
            boost::shared_ptr<AbstractIvpOdeSolver> p_solver;
            boost::shared_ptr<AbstractStimulusFunction> p_stimulus;
            ar >> p_solver;
            ar >> p_stimulus;
            ::new(t)Cellnoble_varghese_kohl_noble_1998_with_stretch_FromCellML(p_solver, p_stimulus);
        }
        
    }
    
}

#endif // Cellnoble_varghese_kohl_noble_1998_with_stretch_FromCellML_HPP_
