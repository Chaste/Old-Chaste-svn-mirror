//! @file
//! 
//! This source file was generated from CellML.
//! 
//! Model: hodgkin_huxley_squid_axon_model_1952_modified
//! 
//! Processed by pycml - CellML Tools in Python
//!     (translators: 16411, pycml: 16306, optimize: 14997)
//! on Sun Aug  5 18:04:11 2012
//! 
//! <autogenerated>

#include "HH1952WithJacobian.hpp"
#include <cmath>
#include <cassert>
#include <memory>
#include "Exception.hpp"
#include "OdeSystemInformation.hpp"
#include "RegularStimulus.hpp"
#include "HeartConfig.hpp"
#include "IsNan.hpp"

    double HH1952WithJacobian::Get_chaste_interface__i_ionic()
    {
        return var_chaste_interface__i_ionic;
    }
    
    double HH1952WithJacobian::Get_membrane__Cm()
    {
        return var_membrane__Cm;
    }
    
    double HH1952WithJacobian::Get_chaste_interface__membrane__i_Stim()
    {
        return var_chaste_interface__membrane__i_Stim;
    }
    
    double HH1952WithJacobian::Get_chaste_interface__membrane__V()
    {
        return var_chaste_interface__membrane__V;
    }
    
    HH1952WithJacobian::HH1952WithJacobian(boost::shared_ptr<AbstractIvpOdeSolver> pSolver, boost::shared_ptr<AbstractStimulusFunction> pIntracellularStimulus)
        : AbstractCardiacCell(
                pSolver,
                4,
                0,
                pIntracellularStimulus)
    {
        // Time units: millisecond
        // 
        this->mpSystemInfo = OdeSystemInformation<HH1952WithJacobian>::Instance();
        Init();

    }
    
    HH1952WithJacobian::~HH1952WithJacobian()
    {
    }
    
    void HH1952WithJacobian::VerifyStateVariables()
    {
        
    }
    
    double HH1952WithJacobian::GetIIonic(const std::vector<double>* pStateVariables)
    {
        // For state variable interpolation (SVI) we read in interpolated state variables,
        // otherwise for ionic current interpolation (ICI) we use the state variables of this model (node).
        if (!pStateVariables) pStateVariables = &rGetStateVariables();
        const std::vector<double>& rY = *pStateVariables;
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -75
        double var_chaste_interface__sodium_channel_m_gate__m = rY[1];
        // Units: dimensionless; Initial value: 0.05
        double var_chaste_interface__sodium_channel_h_gate__h = rY[2];
        // Units: dimensionless; Initial value: 0.6
        double var_chaste_interface__potassium_channel_n_gate__n = rY[3];
        // Units: dimensionless; Initial value: 0.325
        
        const double var_sodium_channel__i_Na = 120.0 * pow(var_chaste_interface__sodium_channel_m_gate__m, 3.0) * var_chaste_interface__sodium_channel_h_gate__h * (var_chaste_interface__membrane__V - 40.0); // microA_per_cm2
        const double var_potassium_channel__i_K = 36.0 * pow(var_chaste_interface__potassium_channel_n_gate__n, 4.0) * (var_chaste_interface__membrane__V -  -87.0); // microA_per_cm2
        const double var_leakage_current__i_L = 0.3 * (var_chaste_interface__membrane__V -  -64.387); // microA_per_cm2
        var_chaste_interface__i_ionic = var_sodium_channel__i_Na + var_potassium_channel__i_K + var_leakage_current__i_L; // uA_per_cm2
        
        const double i_ionic = var_chaste_interface__i_ionic;
        EXCEPT_IF_NOT(!std::isnan(i_ionic));
        return i_ionic;
    }
    
    void HH1952WithJacobian::EvaluateYDerivatives(double var_chaste_interface__environment__time, const std::vector<double>& rY, std::vector<double>& rDY)
    {
        // Inputs:
        // Time units: millisecond
        double var_chaste_interface__membrane__V = (mSetVoltageDerivativeToZero ? this->mFixedVoltage : rY[0]);
        // Units: millivolt; Initial value: -75
        double var_chaste_interface__sodium_channel_m_gate__m = rY[1];
        // Units: dimensionless; Initial value: 0.05
        double var_chaste_interface__sodium_channel_h_gate__h = rY[2];
        // Units: dimensionless; Initial value: 0.6
        double var_chaste_interface__potassium_channel_n_gate__n = rY[3];
        // Units: dimensionless; Initial value: 0.325
        
        
        // Mathematics
        double d_dt_chaste_interface__membrane__V;
        const double d_dt_chaste_interface__sodium_channel_m_gate__m = ((( -0.1 * (var_chaste_interface__membrane__V + 50.0)) / (exp((-(var_chaste_interface__membrane__V + 50.0)) * 0.1) - 1.0)) * (1.0 - var_chaste_interface__sodium_channel_m_gate__m)) - ((4.0 * exp((-(var_chaste_interface__membrane__V + 75.0)) * 0.0555555555556)) * var_chaste_interface__sodium_channel_m_gate__m); // per_millisecond
        const double d_dt_chaste_interface__sodium_channel_h_gate__h = ((0.07 * exp((-(var_chaste_interface__membrane__V + 75.0)) * 0.05)) * (1.0 - var_chaste_interface__sodium_channel_h_gate__h)) - ((1.0 / (exp((-(var_chaste_interface__membrane__V + 45.0)) * 0.1) + 1.0)) * var_chaste_interface__sodium_channel_h_gate__h); // per_millisecond
        const double d_dt_chaste_interface__potassium_channel_n_gate__n = ((( -0.01 * (var_chaste_interface__membrane__V + 65.0)) / (exp((-(var_chaste_interface__membrane__V + 65.0)) * 0.1) - 1.0)) * (1.0 - var_chaste_interface__potassium_channel_n_gate__n)) - ((0.125 * exp((var_chaste_interface__membrane__V + 75.0) * 0.0125)) * var_chaste_interface__potassium_channel_n_gate__n); // per_millisecond
        
        if (mSetVoltageDerivativeToZero)
        {
            d_dt_chaste_interface__membrane__V = 0.0;
        }
        else
        {
            var_membrane__Cm = 1.0; // microF_per_cm2
            const double var_sodium_channel__i_Na = 120.0 * pow(var_chaste_interface__sodium_channel_m_gate__m, 3.0) * var_chaste_interface__sodium_channel_h_gate__h * (var_chaste_interface__membrane__V - 40.0); // microA_per_cm2
            const double var_potassium_channel__i_K = 36.0 * pow(var_chaste_interface__potassium_channel_n_gate__n, 4.0) * (var_chaste_interface__membrane__V -  -87.0); // microA_per_cm2
            const double var_leakage_current__i_L = 0.3 * (var_chaste_interface__membrane__V -  -64.387); // microA_per_cm2
            var_chaste_interface__membrane__i_Stim = GetIntracellularAreaStimulus(var_chaste_interface__environment__time);
            d_dt_chaste_interface__membrane__V = (-(var_chaste_interface__membrane__i_Stim + var_sodium_channel__i_Na + var_potassium_channel__i_K + var_leakage_current__i_L)) / var_membrane__Cm; // 'millivolt per millisecond'
        }
        
        rDY[0] = d_dt_chaste_interface__membrane__V;
        rDY[1] = d_dt_chaste_interface__sodium_channel_m_gate__m;
        rDY[2] = d_dt_chaste_interface__sodium_channel_h_gate__h;
        rDY[3] = d_dt_chaste_interface__potassium_channel_n_gate__n;
    }
    
    std::vector<double> HH1952WithJacobian::ComputeDerivedQuantities(double var_chaste_interface__environment__time, const std::vector<double> & rY)
    {
        // Inputs:
        // Time units: millisecond
        
        
        // Mathematics
        var_chaste_interface__membrane__i_Stim = GetIntracellularAreaStimulus(var_chaste_interface__environment__time);
        
        std::vector<double> dqs(1);
        dqs[0] = var_chaste_interface__membrane__i_Stim;
        return dqs;
    }
    
template<>
void OdeSystemInformation<HH1952WithJacobian>::Initialise(void)
{
    this->mSystemName = "hodgkin_huxley_squid_axon_model_1952_modified";
    this->mFreeVariableName = "environment__time";
    this->mFreeVariableUnits = "millisecond";
    
    this->mVariableNames.push_back("membrane_voltage");
    this->mVariableUnits.push_back("millivolt");
    this->mInitialConditions.push_back(-75);

    this->mVariableNames.push_back("sodium_channel_m_gate__m");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.05);

    this->mVariableNames.push_back("sodium_channel_h_gate__h");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.6);

    this->mVariableNames.push_back("potassium_channel_n_gate__n");
    this->mVariableUnits.push_back("dimensionless");
    this->mInitialConditions.push_back(0.325);

    this->mDerivedQuantityNames.push_back("membrane_stimulus_current");
    this->mDerivedQuantityUnits.push_back("uA_per_cm2");
    
    this->mInitialised = true;
}


// Serialization for Boost >= 1.36
#include "SerializationExportWrapperForCpp.hpp"
CHASTE_CLASS_EXPORT(HH1952WithJacobian)
