#ifndef _FaberRudy2000Version3Optimised
#define _FaberRudy2000Version3Optimised

/** @file
 *
 * Model: LR_Dynamic_model_2000
 *
 * Processed by pycml - CellML Tools in Python
 *     (translate: 1004, pycml: 896)
 * on Wed Dec 19 11:02:41 2007
 *
 * <autogenerated>
 */

#include <cmath>
#include <cassert>
#include "AbstractCardiacCell.hpp"
#include "Exception.hpp"
#include "AbstractStimulusFunction.hpp"
#include "OdeSystemInformation.hpp"

class FaberRudy2000Version3OptimisedLookupTables
{
public:
    static FaberRudy2000Version3OptimisedLookupTables* Instance()
    {
        if (mpInstance == NULL)
        {
            mpInstance = new FaberRudy2000Version3OptimisedLookupTables;
        }
        return mpInstance;
    }

    // Methods to look up values from lookup tables
    // using linear interpolation
    inline double _lookup_0(unsigned i, double factor)
    {
        double y1 = _lookup_table_0[i][0];
        double y2 = _lookup_table_0[i+1][0];
        return y1 + (y2-y1)*factor;
    }

    inline double _lookup_1(unsigned i, double factor)
    {
        double y1 = _lookup_table_0[i][1];
        double y2 = _lookup_table_0[i+1][1];
        return y1 + (y2-y1)*factor;
    }

    inline double _lookup_2(unsigned i, double factor)
    {
        double y1 = _lookup_table_0[i][2];
        double y2 = _lookup_table_0[i+1][2];
        return y1 + (y2-y1)*factor;
    }

    inline double _lookup_3(unsigned i, double factor)
    {
        double y1 = _lookup_table_0[i][3];
        double y2 = _lookup_table_0[i+1][3];
        return y1 + (y2-y1)*factor;
    }

    inline double _lookup_4(unsigned i, double factor)
    {
        double y1 = _lookup_table_0[i][4];
        double y2 = _lookup_table_0[i+1][4];
        return y1 + (y2-y1)*factor;
    }

    inline double _lookup_5(unsigned i, double factor)
    {
        double y1 = _lookup_table_0[i][5];
        double y2 = _lookup_table_0[i+1][5];
        return y1 + (y2-y1)*factor;
    }

    inline double _lookup_6(unsigned i, double factor)
    {
        double y1 = _lookup_table_0[i][6];
        double y2 = _lookup_table_0[i+1][6];
        return y1 + (y2-y1)*factor;
    }

    inline double _lookup_7(unsigned i, double factor)
    {
        double y1 = _lookup_table_0[i][7];
        double y2 = _lookup_table_0[i+1][7];
        return y1 + (y2-y1)*factor;
    }

    inline double _lookup_8(unsigned i, double factor)
    {
        double y1 = _lookup_table_0[i][8];
        double y2 = _lookup_table_0[i+1][8];
        return y1 + (y2-y1)*factor;
    }

    inline double _lookup_9(unsigned i, double factor)
    {
        double y1 = _lookup_table_0[i][9];
        double y2 = _lookup_table_0[i+1][9];
        return y1 + (y2-y1)*factor;
    }

    inline double _lookup_10(unsigned i, double factor)
    {
        double y1 = _lookup_table_0[i][10];
        double y2 = _lookup_table_0[i+1][10];
        return y1 + (y2-y1)*factor;
    }

    inline double _lookup_11(unsigned i, double factor)
    {
        double y1 = _lookup_table_0[i][11];
        double y2 = _lookup_table_0[i+1][11];
        return y1 + (y2-y1)*factor;
    }

    inline double _lookup_12(unsigned i, double factor)
    {
        double y1 = _lookup_table_0[i][12];
        double y2 = _lookup_table_0[i+1][12];
        return y1 + (y2-y1)*factor;
    }

    inline double _lookup_13(unsigned i, double factor)
    {
        double y1 = _lookup_table_0[i][13];
        double y2 = _lookup_table_0[i+1][13];
        return y1 + (y2-y1)*factor;
    }

    inline double _lookup_14(unsigned i, double factor)
    {
        double y1 = _lookup_table_0[i][14];
        double y2 = _lookup_table_0[i+1][14];
        return y1 + (y2-y1)*factor;
    }

    inline double _lookup_15(unsigned i, double factor)
    {
        double y1 = _lookup_table_0[i][15];
        double y2 = _lookup_table_0[i+1][15];
        return y1 + (y2-y1)*factor;
    }

    inline double _lookup_16(unsigned i, double factor)
    {
        double y1 = _lookup_table_0[i][16];
        double y2 = _lookup_table_0[i+1][16];
        return y1 + (y2-y1)*factor;
    }

    inline double _lookup_17(unsigned i, double factor)
    {
        double y1 = _lookup_table_0[i][17];
        double y2 = _lookup_table_0[i+1][17];
        return y1 + (y2-y1)*factor;
    }

    inline double _lookup_18(unsigned i, double factor)
    {
        double y1 = _lookup_table_0[i][18];
        double y2 = _lookup_table_0[i+1][18];
        return y1 + (y2-y1)*factor;
    }

    inline double _lookup_19(unsigned i, double factor)
    {
        double y1 = _lookup_table_0[i][19];
        double y2 = _lookup_table_0[i+1][19];
        return y1 + (y2-y1)*factor;
    }

    inline double _lookup_20(unsigned i, double factor)
    {
        double y1 = _lookup_table_0[i][20];
        double y2 = _lookup_table_0[i+1][20];
        return y1 + (y2-y1)*factor;
    }

    inline double _lookup_21(unsigned i, double factor)
    {
        double y1 = _lookup_table_0[i][21];
        double y2 = _lookup_table_0[i+1][21];
        return y1 + (y2-y1)*factor;
    }

    inline double _lookup_22(unsigned i, double factor)
    {
        double y1 = _lookup_table_0[i][22];
        double y2 = _lookup_table_0[i+1][22];
        return y1 + (y2-y1)*factor;
    }

    inline double _lookup_23(unsigned i, double factor)
    {
        double y1 = _lookup_table_0[i][23];
        double y2 = _lookup_table_0[i+1][23];
        return y1 + (y2-y1)*factor;
    }

    inline double _lookup_24(unsigned i, double factor)
    {
        double y1 = _lookup_table_0[i][24];
        double y2 = _lookup_table_0[i+1][24];
        return y1 + (y2-y1)*factor;
    }

    inline double _lookup_25(unsigned i, double factor)
    {
        double y1 = _lookup_table_0[i][25];
        double y2 = _lookup_table_0[i+1][25];
        return y1 + (y2-y1)*factor;
    }

    inline double _lookup_26(unsigned i, double factor)
    {
        double y1 = _lookup_table_0[i][26];
        double y2 = _lookup_table_0[i+1][26];
        return y1 + (y2-y1)*factor;
    }

    inline double _lookup_27(unsigned i, double factor)
    {
        double y1 = _lookup_table_0[i][27];
        double y2 = _lookup_table_0[i+1][27];
        return y1 + (y2-y1)*factor;
    }

    inline double _lookup_28(unsigned i, double factor)
    {
        double y1 = _lookup_table_0[i][28];
        double y2 = _lookup_table_0[i+1][28];
        return y1 + (y2-y1)*factor;
    }

    inline double _lookup_29(unsigned i, double factor)
    {
        double y1 = _lookup_table_0[i][29];
        double y2 = _lookup_table_0[i+1][29];
        return y1 + (y2-y1)*factor;
    }

    inline double _lookup_30(unsigned i, double factor)
    {
        double y1 = _lookup_table_0[i][30];
        double y2 = _lookup_table_0[i+1][30];
        return y1 + (y2-y1)*factor;
    }

    inline double _lookup_31(unsigned i, double factor)
    {
        double y1 = _lookup_table_0[i][31];
        double y2 = _lookup_table_0[i+1][31];
        return y1 + (y2-y1)*factor;
    }

    inline double _lookup_32(unsigned i, double factor)
    {
        double y1 = _lookup_table_0[i][32];
        double y2 = _lookup_table_0[i+1][32];
        return y1 + (y2-y1)*factor;
    }

    inline double _lookup_33(unsigned i, double factor)
    {
        double y1 = _lookup_table_0[i][33];
        double y2 = _lookup_table_0[i+1][33];
        return y1 + (y2-y1)*factor;
    }

    inline double _lookup_34(unsigned i, double factor)
    {
        double y1 = _lookup_table_0[i][34];
        double y2 = _lookup_table_0[i+1][34];
        return y1 + (y2-y1)*factor;
    }

    inline double _lookup_35(unsigned i, double factor)
    {
        double y1 = _lookup_table_0[i][35];
        double y2 = _lookup_table_0[i+1][35];
        return y1 + (y2-y1)*factor;
    }

    inline double _lookup_36(unsigned i, double factor)
    {
        double y1 = _lookup_table_0[i][36];
        double y2 = _lookup_table_0[i+1][36];
        return y1 + (y2-y1)*factor;
    }

    inline double _lookup_37(unsigned i, double factor)
    {
        double y1 = _lookup_table_0[i][37];
        double y2 = _lookup_table_0[i+1][37];
        return y1 + (y2-y1)*factor;
    }

    inline double _lookup_38(unsigned i, double factor)
    {
        double y1 = _lookup_table_0[i][38];
        double y2 = _lookup_table_0[i+1][38];
        return y1 + (y2-y1)*factor;
    }


protected:
    FaberRudy2000Version3OptimisedLookupTables(const FaberRudy2000Version3OptimisedLookupTables&);
    FaberRudy2000Version3OptimisedLookupTables& operator= (const FaberRudy2000Version3OptimisedLookupTables&);
    FaberRudy2000Version3OptimisedLookupTables();
private:
    /** The single instance of the class */
    static FaberRudy2000Version3OptimisedLookupTables *mpInstance;
    // Lookup tables
    double _lookup_table_0[20001][39];

};

class FaberRudy2000Version3Optimised : public AbstractCardiacCell
{
public:
    FaberRudy2000Version3Optimised(boost::shared_ptr<AbstractIvpOdeSolver> pSolver,
                                   boost::shared_ptr<AbstractStimulusFunction> pIntracellularStimulus);

    ~FaberRudy2000Version3Optimised(void);

    // Lookup table indices
    unsigned _table_index_0;
    double _factor_0;

    double GetIIonic();

    void EvaluateYDerivatives (
            double var_environment__time,
            const std::vector<double> &rY,
            std::vector<double> &rDY);

};

#endif
