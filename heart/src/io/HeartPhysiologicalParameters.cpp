// Copyright (C) 2005-2007 Code Synthesis Tools CC
//
// This program was generated by XML Schema Definition Compiler (XSD)
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
#define COVERAGE_IGNORE
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "HeartPhysiologicalParameters.hpp"

// ConductivitiesType
// 

const ConductivitiesType::Conductivity::container& ConductivitiesType::
Conductivity () const
{
  return this->_xsd_Conductivity_;
}

ConductivitiesType::Conductivity::container& ConductivitiesType::
Conductivity ()
{
  return this->_xsd_Conductivity_;
}

void ConductivitiesType::
Conductivity (const Conductivity::container& Conductivity)
{
  this->_xsd_Conductivity_ = Conductivity;
}


// HeartPhysiologicalParametersType
// 

const HeartPhysiologicalParametersType::SurfaceAreaToVolumeRatio::type& HeartPhysiologicalParametersType::
SurfaceAreaToVolumeRatio () const
{
  return this->_xsd_SurfaceAreaToVolumeRatio_.get ();
}

HeartPhysiologicalParametersType::SurfaceAreaToVolumeRatio::type& HeartPhysiologicalParametersType::
SurfaceAreaToVolumeRatio ()
{
  return this->_xsd_SurfaceAreaToVolumeRatio_.get ();
}

void HeartPhysiologicalParametersType::
SurfaceAreaToVolumeRatio (const SurfaceAreaToVolumeRatio::type& SurfaceAreaToVolumeRatio)
{
  this->_xsd_SurfaceAreaToVolumeRatio_.set (SurfaceAreaToVolumeRatio);
}

const HeartPhysiologicalParametersType::Capacitance::type& HeartPhysiologicalParametersType::
Capacitance () const
{
  return this->_xsd_Capacitance_.get ();
}

HeartPhysiologicalParametersType::Capacitance::type& HeartPhysiologicalParametersType::
Capacitance ()
{
  return this->_xsd_Capacitance_.get ();
}

void HeartPhysiologicalParametersType::
Capacitance (const Capacitance::type& Capacitance)
{
  this->_xsd_Capacitance_.set (Capacitance);
}

const HeartPhysiologicalParametersType::Conductivities::type& HeartPhysiologicalParametersType::
Conductivities () const
{
  return this->_xsd_Conductivities_.get ();
}

HeartPhysiologicalParametersType::Conductivities::type& HeartPhysiologicalParametersType::
Conductivities ()
{
  return this->_xsd_Conductivities_.get ();
}

void HeartPhysiologicalParametersType::
Conductivities (const Conductivities::type& Conductivities)
{
  this->_xsd_Conductivities_.set (Conductivities);
}

void HeartPhysiologicalParametersType::
Conductivities (::std::auto_ptr< Conductivities::type > Conductivities)
{
  this->_xsd_Conductivities_.set (Conductivities);
}


#include <xsd/cxx/xml/dom/elements.hxx>
#include <xsd/cxx/xml/dom/parser.hxx>

// ConductivitiesType
//

ConductivitiesType::
ConductivitiesType ()
: ::xml_schema::type (),
_xsd_Conductivity_ (::xml_schema::flags (), this)
{
}

ConductivitiesType::
ConductivitiesType (const ConductivitiesType& _xsd_ConductivitiesType,
                    ::xml_schema::flags f,
                    ::xml_schema::type* c)
: ::xml_schema::type (_xsd_ConductivitiesType, f, c),
_xsd_Conductivity_ (_xsd_ConductivitiesType._xsd_Conductivity_,
                    f | ::xml_schema::flags::not_root,
                    this)
{
}

ConductivitiesType::
ConductivitiesType (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f,
                    ::xml_schema::type* c)
: ::xml_schema::type (e, f, c),
_xsd_Conductivity_ (f | ::xml_schema::flags::not_root, this)
{
  parse (e, f);
}

void ConductivitiesType::
parse (const ::xercesc::DOMElement& e, ::xml_schema::flags f)
{
  ::xsd::cxx::xml::dom::parser< char > p (e);

  while (p.more_elements ())
  {
    const ::xsd::cxx::xml::dom::element< char > e (p.next_element ());

    // Conductivity
    //
    {
      if (e.name () == "Conductivity" && e.namespace_ ().empty ())
      {
        this->Conductivity ().push_back (
          Conductivity::traits::create (
            e.dom_element (),
            f | ::xml_schema::flags::not_root,
            this));
        continue;
      }
    }
  }
}

ConductivitiesType* ConductivitiesType::
_clone (::xml_schema::flags f,
        ::xml_schema::type* c) const
{
  return new ConductivitiesType (*this, f, c);
}

// HeartPhysiologicalParametersType
//

HeartPhysiologicalParametersType::
HeartPhysiologicalParametersType (const SurfaceAreaToVolumeRatio::type& _xsd_SurfaceAreaToVolumeRatio,
                                  const Capacitance::type& _xsd_Capacitance,
                                  const Conductivities::type& _xsd_Conductivities)
: ::xml_schema::type (),
_xsd_SurfaceAreaToVolumeRatio_ (_xsd_SurfaceAreaToVolumeRatio,
                                ::xml_schema::flags (),
                                this),
_xsd_Capacitance_ (_xsd_Capacitance,
                   ::xml_schema::flags (),
                   this),
_xsd_Conductivities_ (_xsd_Conductivities,
                      ::xml_schema::flags (),
                      this)
{
}

HeartPhysiologicalParametersType::
HeartPhysiologicalParametersType (const HeartPhysiologicalParametersType& _xsd_HeartPhysiologicalParametersType,
                                  ::xml_schema::flags f,
                                  ::xml_schema::type* c)
: ::xml_schema::type (_xsd_HeartPhysiologicalParametersType, f, c),
_xsd_SurfaceAreaToVolumeRatio_ (_xsd_HeartPhysiologicalParametersType._xsd_SurfaceAreaToVolumeRatio_,
                                f | ::xml_schema::flags::not_root,
                                this),
_xsd_Capacitance_ (_xsd_HeartPhysiologicalParametersType._xsd_Capacitance_,
                   f | ::xml_schema::flags::not_root,
                   this),
_xsd_Conductivities_ (_xsd_HeartPhysiologicalParametersType._xsd_Conductivities_,
                      f | ::xml_schema::flags::not_root,
                      this)
{
}

HeartPhysiologicalParametersType::
HeartPhysiologicalParametersType (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f,
                                  ::xml_schema::type* c)
: ::xml_schema::type (e, f, c),
_xsd_SurfaceAreaToVolumeRatio_ (f | ::xml_schema::flags::not_root, this),
_xsd_Capacitance_ (f | ::xml_schema::flags::not_root, this),
_xsd_Conductivities_ (f | ::xml_schema::flags::not_root, this)
{
  parse (e, f);
}

void HeartPhysiologicalParametersType::
parse (const ::xercesc::DOMElement& e, ::xml_schema::flags f)
{
  ::xsd::cxx::xml::dom::parser< char > p (e);

  while (p.more_elements ())
  {
    const ::xsd::cxx::xml::dom::element< char > e (p.next_element ());

    // SurfaceAreaToVolumeRatio
    //
    {
      if (e.name () == "SurfaceAreaToVolumeRatio" && e.namespace_ ().empty ())
      {
        if (_xsd_SurfaceAreaToVolumeRatio_.present ())
          continue;
        this->SurfaceAreaToVolumeRatio (
          SurfaceAreaToVolumeRatio::traits::create (
            e.dom_element (),
            f | ::xml_schema::flags::not_root,
            this));
        continue;
      }
    }

    // Capacitance
    //
    {
      if (e.name () == "Capacitance" && e.namespace_ ().empty ())
      {
        if (_xsd_Capacitance_.present ())
          continue;
        this->Capacitance (
          Capacitance::traits::create (
            e.dom_element (),
            f | ::xml_schema::flags::not_root,
            this));
        continue;
      }
    }

    // Conductivities
    //
    {
      if (e.name () == "Conductivities" && e.namespace_ ().empty ())
      {
        ::std::auto_ptr< Conductivities::type > r (
          Conductivities::traits::create (
            e.dom_element (),
            f | ::xml_schema::flags::not_root,
            this));

        if (_xsd_Conductivities_.present ())
          continue;
        this->Conductivities (r);
        continue;
      }
    }
  }

  if (!_xsd_SurfaceAreaToVolumeRatio_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "SurfaceAreaToVolumeRatio",
      "");
  }

  if (!_xsd_Capacitance_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "Capacitance",
      "");
  }

  if (!_xsd_Conductivities_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "Conductivities",
      "");
  }
}

HeartPhysiologicalParametersType* HeartPhysiologicalParametersType::
_clone (::xml_schema::flags f,
        ::xml_schema::type* c) const
{
  return new HeartPhysiologicalParametersType (*this, f, c);
}

#include <istream>
#include <xercesc/framework/Wrapper4InputSource.hpp>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

::std::auto_ptr< ::HeartPhysiologicalParametersType >
HeartPhysiologicalParameters (const ::std::basic_string< char >& u,
                              ::xml_schema::flags f,
                              const ::xsd::cxx::tree::properties< char >& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::tree::error_handler< char > h;

  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::HeartPhysiologicalParameters (
    static_cast< const ::xercesc::DOMDocument& > (*d), f);
}

::std::auto_ptr< ::HeartPhysiologicalParametersType >
HeartPhysiologicalParameters (const ::std::basic_string< char >& u,
                              ::xsd::cxx::xml::error_handler< char >& h,
                              ::xml_schema::flags f,
                              const ::xsd::cxx::tree::properties< char >& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

  if (!d)
  {
    throw ::xsd::cxx::tree::parsing< char > ();
  }

  return ::HeartPhysiologicalParameters (
    static_cast< const ::xercesc::DOMDocument& > (*d), f);
}

::std::auto_ptr< ::HeartPhysiologicalParametersType >
HeartPhysiologicalParameters (const ::std::basic_string< char >& u,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xsd::cxx::tree::properties< char >& p)
{
  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

  if (!d)
  {
    throw ::xsd::cxx::tree::parsing< char > ();
  }

  return ::HeartPhysiologicalParameters (
    static_cast< const ::xercesc::DOMDocument& > (*d), f);
}

::std::auto_ptr< ::HeartPhysiologicalParametersType >
HeartPhysiologicalParameters (::std::istream& is,
                              ::xml_schema::flags f,
                              const ::xsd::cxx::tree::properties< char >& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  ::xercesc::Wrapper4InputSource wrap (&isrc, false);
  return ::HeartPhysiologicalParameters (wrap, f, p);
}

::std::auto_ptr< ::HeartPhysiologicalParametersType >
HeartPhysiologicalParameters (::std::istream& is,
                              ::xsd::cxx::xml::error_handler< char >& h,
                              ::xml_schema::flags f,
                              const ::xsd::cxx::tree::properties< char >& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  ::xercesc::Wrapper4InputSource wrap (&isrc, false);
  return ::HeartPhysiologicalParameters (wrap, h, f, p);
}

::std::auto_ptr< ::HeartPhysiologicalParametersType >
HeartPhysiologicalParameters (::std::istream& is,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xsd::cxx::tree::properties< char >& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  ::xercesc::Wrapper4InputSource wrap (&isrc, false);
  return ::HeartPhysiologicalParameters (wrap, h, f, p);
}

::std::auto_ptr< ::HeartPhysiologicalParametersType >
HeartPhysiologicalParameters (::std::istream& is,
                              const ::std::basic_string< char >& sid,
                              ::xml_schema::flags f,
                              const ::xsd::cxx::tree::properties< char >& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  ::xercesc::Wrapper4InputSource wrap (&isrc, false);
  return ::HeartPhysiologicalParameters (wrap, f, p);
}

::std::auto_ptr< ::HeartPhysiologicalParametersType >
HeartPhysiologicalParameters (::std::istream& is,
                              const ::std::basic_string< char >& sid,
                              ::xsd::cxx::xml::error_handler< char >& h,
                              ::xml_schema::flags f,
                              const ::xsd::cxx::tree::properties< char >& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  ::xercesc::Wrapper4InputSource wrap (&isrc, false);
  return ::HeartPhysiologicalParameters (wrap, h, f, p);
}

::std::auto_ptr< ::HeartPhysiologicalParametersType >
HeartPhysiologicalParameters (::std::istream& is,
                              const ::std::basic_string< char >& sid,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xsd::cxx::tree::properties< char >& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  ::xercesc::Wrapper4InputSource wrap (&isrc, false);
  return ::HeartPhysiologicalParameters (wrap, h, f, p);
}

::std::auto_ptr< ::HeartPhysiologicalParametersType >
HeartPhysiologicalParameters (const ::xercesc::DOMInputSource& i,
                              ::xml_schema::flags f,
                              const ::xsd::cxx::tree::properties< char >& p)
{
  ::xsd::cxx::tree::error_handler< char > h;

  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::HeartPhysiologicalParameters (
    static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
}

::std::auto_ptr< ::HeartPhysiologicalParametersType >
HeartPhysiologicalParameters (const ::xercesc::DOMInputSource& i,
                              ::xsd::cxx::xml::error_handler< char >& h,
                              ::xml_schema::flags f,
                              const ::xsd::cxx::tree::properties< char >& p)
{
  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

  if (!d)
  {
    throw ::xsd::cxx::tree::parsing< char > ();
  }

  return ::HeartPhysiologicalParameters (
    static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
}

::std::auto_ptr< ::HeartPhysiologicalParametersType >
HeartPhysiologicalParameters (const ::xercesc::DOMInputSource& i,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xsd::cxx::tree::properties< char >& p)
{
  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

  if (!d)
  {
    throw ::xsd::cxx::tree::parsing< char > ();
  }

  return ::HeartPhysiologicalParameters (
    static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
}

::std::auto_ptr< ::HeartPhysiologicalParametersType >
HeartPhysiologicalParameters (const ::xercesc::DOMDocument& d,
                              ::xml_schema::flags f,
                              const ::xsd::cxx::tree::properties< char >&)
{
  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
    (f & ::xml_schema::flags::keep_dom) 
    ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
    : 0);

  const ::xsd::cxx::xml::dom::element< char > e (
    c.get ()
    ? *c->getDocumentElement ()
    : *d.getDocumentElement ());

  if (e.name () == "HeartPhysiologicalParameters" &&
      e.namespace_ () == "")
  {
    ::std::auto_ptr< ::HeartPhysiologicalParametersType > r (
      ::xsd::cxx::tree::traits< ::HeartPhysiologicalParametersType, char >::create (
        e.dom_element (), f, 0));
    if (f & ::xml_schema::flags::keep_dom) c.release ();
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    e.name (),
    e.namespace_ (),
    "HeartPhysiologicalParameters",
    "");
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
#undef COVERAGE_IGNORE
//
// End epilogue.

