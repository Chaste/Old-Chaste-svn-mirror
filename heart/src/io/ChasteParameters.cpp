// Copyright (C) 2005-2007 Code Synthesis Tools CC
//
// This program was generated by XML Schema Definition Compiler (XSD)
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
#define COVERAGE_IGNORE
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "ChasteParameters.hpp"

// domain_type
// 

domain_type::
domain_type (_xsd_domain_type v)
: ::xml_schema::string (_xsd_domain_type_literals_[v])
{
}

domain_type::
domain_type (const ::xml_schema::string& _xsd_domain_type)
: ::xml_schema::string (_xsd_domain_type)
{
}

domain_type::
domain_type (const domain_type& v,
             ::xml_schema::flags f,
             ::xml_schema::type* c)
: ::xml_schema::string (v, f, c)
{
}

domain_type& domain_type::
operator= (_xsd_domain_type v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_domain_type_literals_[v]);

  return *this;
}


// ionic_model_type
// 

ionic_model_type::
ionic_model_type (_xsd_ionic_model_type v)
: ::xml_schema::string (_xsd_ionic_model_type_literals_[v])
{
}

ionic_model_type::
ionic_model_type (const ::xml_schema::string& _xsd_ionic_model_type)
: ::xml_schema::string (_xsd_ionic_model_type)
{
}

ionic_model_type::
ionic_model_type (const ionic_model_type& v,
                  ::xml_schema::flags f,
                  ::xml_schema::type* c)
: ::xml_schema::string (v, f, c)
{
}

ionic_model_type& ionic_model_type::
operator= (_xsd_ionic_model_type v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_ionic_model_type_literals_[v]);

  return *this;
}


// point_type
// 

const point_type::X::type& point_type::
X () const
{
  return this->_xsd_X_.get ();
}

point_type::X::type& point_type::
X ()
{
  return this->_xsd_X_.get ();
}

void point_type::
X (const X::type& X)
{
  this->_xsd_X_.set (X);
}

const point_type::Y::container& point_type::
Y () const
{
  return this->_xsd_Y_;
}

point_type::Y::container& point_type::
Y ()
{
  return this->_xsd_Y_;
}

void point_type::
Y (const Y::type& Y)
{
  this->_xsd_Y_.set (Y);
}

void point_type::
Y (const Y::container& Y)
{
  this->_xsd_Y_ = Y;
}

const point_type::Z::container& point_type::
Z () const
{
  return this->_xsd_Z_;
}

point_type::Z::container& point_type::
Z ()
{
  return this->_xsd_Z_;
}

void point_type::
Z (const Z::type& Z)
{
  this->_xsd_Z_.set (Z);
}

void point_type::
Z (const Z::container& Z)
{
  this->_xsd_Z_ = Z;
}


// box_type
// 

const box_type::CornerA::type& box_type::
CornerA () const
{
  return this->_xsd_CornerA_.get ();
}

box_type::CornerA::type& box_type::
CornerA ()
{
  return this->_xsd_CornerA_.get ();
}

void box_type::
CornerA (const CornerA::type& CornerA)
{
  this->_xsd_CornerA_.set (CornerA);
}

void box_type::
CornerA (::std::auto_ptr< CornerA::type > CornerA)
{
  this->_xsd_CornerA_.set (CornerA);
}

const box_type::CornerB::type& box_type::
CornerB () const
{
  return this->_xsd_CornerB_.get ();
}

box_type::CornerB::type& box_type::
CornerB ()
{
  return this->_xsd_CornerB_.get ();
}

void box_type::
CornerB (const CornerB::type& CornerB)
{
  this->_xsd_CornerB_.set (CornerB);
}

void box_type::
CornerB (::std::auto_ptr< CornerB::type > CornerB)
{
  this->_xsd_CornerB_.set (CornerB);
}


// stimulus_type
// 

const stimulus_type::Strength::type& stimulus_type::
Strength () const
{
  return this->_xsd_Strength_.get ();
}

stimulus_type::Strength::type& stimulus_type::
Strength ()
{
  return this->_xsd_Strength_.get ();
}

void stimulus_type::
Strength (const Strength::type& Strength)
{
  this->_xsd_Strength_.set (Strength);
}

const stimulus_type::Duration::type& stimulus_type::
Duration () const
{
  return this->_xsd_Duration_.get ();
}

stimulus_type::Duration::type& stimulus_type::
Duration ()
{
  return this->_xsd_Duration_.get ();
}

void stimulus_type::
Duration (const Duration::type& Duration)
{
  this->_xsd_Duration_.set (Duration);
}

const stimulus_type::Delay::type& stimulus_type::
Delay () const
{
  return this->_xsd_Delay_.get ();
}

stimulus_type::Delay::type& stimulus_type::
Delay ()
{
  return this->_xsd_Delay_.get ();
}

void stimulus_type::
Delay (const Delay::type& Delay)
{
  this->_xsd_Delay_.set (Delay);
}

const stimulus_type::Location::type& stimulus_type::
Location () const
{
  return this->_xsd_Location_.get ();
}

stimulus_type::Location::type& stimulus_type::
Location ()
{
  return this->_xsd_Location_.get ();
}

void stimulus_type::
Location (const Location::type& Location)
{
  this->_xsd_Location_.set (Location);
}

void stimulus_type::
Location (::std::auto_ptr< Location::type > Location)
{
  this->_xsd_Location_.set (Location);
}


// cell_heterogeneity_type
// 

const cell_heterogeneity_type::ScaleFactorGks::type& cell_heterogeneity_type::
ScaleFactorGks () const
{
  return this->_xsd_ScaleFactorGks_.get ();
}

cell_heterogeneity_type::ScaleFactorGks::type& cell_heterogeneity_type::
ScaleFactorGks ()
{
  return this->_xsd_ScaleFactorGks_.get ();
}

void cell_heterogeneity_type::
ScaleFactorGks (const ScaleFactorGks::type& ScaleFactorGks)
{
  this->_xsd_ScaleFactorGks_.set (ScaleFactorGks);
}

const cell_heterogeneity_type::ScaleFactorIto::type& cell_heterogeneity_type::
ScaleFactorIto () const
{
  return this->_xsd_ScaleFactorIto_.get ();
}

cell_heterogeneity_type::ScaleFactorIto::type& cell_heterogeneity_type::
ScaleFactorIto ()
{
  return this->_xsd_ScaleFactorIto_.get ();
}

void cell_heterogeneity_type::
ScaleFactorIto (const ScaleFactorIto::type& ScaleFactorIto)
{
  this->_xsd_ScaleFactorIto_.set (ScaleFactorIto);
}

const cell_heterogeneity_type::Location::type& cell_heterogeneity_type::
Location () const
{
  return this->_xsd_Location_.get ();
}

cell_heterogeneity_type::Location::type& cell_heterogeneity_type::
Location ()
{
  return this->_xsd_Location_.get ();
}

void cell_heterogeneity_type::
Location (const Location::type& Location)
{
  this->_xsd_Location_.set (Location);
}

void cell_heterogeneity_type::
Location (::std::auto_ptr< Location::type > Location)
{
  this->_xsd_Location_.set (Location);
}


// conductivity_heterogeneity_type
// 

const conductivity_heterogeneity_type::Longitudinal::type& conductivity_heterogeneity_type::
Longitudinal () const
{
  return this->_xsd_Longitudinal_.get ();
}

conductivity_heterogeneity_type::Longitudinal::type& conductivity_heterogeneity_type::
Longitudinal ()
{
  return this->_xsd_Longitudinal_.get ();
}

void conductivity_heterogeneity_type::
Longitudinal (const Longitudinal::type& Longitudinal)
{
  this->_xsd_Longitudinal_.set (Longitudinal);
}

const conductivity_heterogeneity_type::Transverse::type& conductivity_heterogeneity_type::
Transverse () const
{
  return this->_xsd_Transverse_.get ();
}

conductivity_heterogeneity_type::Transverse::type& conductivity_heterogeneity_type::
Transverse ()
{
  return this->_xsd_Transverse_.get ();
}

void conductivity_heterogeneity_type::
Transverse (const Transverse::type& Transverse)
{
  this->_xsd_Transverse_.set (Transverse);
}

const conductivity_heterogeneity_type::Normal::type& conductivity_heterogeneity_type::
Normal () const
{
  return this->_xsd_Normal_.get ();
}

conductivity_heterogeneity_type::Normal::type& conductivity_heterogeneity_type::
Normal ()
{
  return this->_xsd_Normal_.get ();
}

void conductivity_heterogeneity_type::
Normal (const Normal::type& Normal)
{
  this->_xsd_Normal_.set (Normal);
}

const conductivity_heterogeneity_type::Location::type& conductivity_heterogeneity_type::
Location () const
{
  return this->_xsd_Location_.get ();
}

conductivity_heterogeneity_type::Location::type& conductivity_heterogeneity_type::
Location ()
{
  return this->_xsd_Location_.get ();
}

void conductivity_heterogeneity_type::
Location (const Location::type& Location)
{
  this->_xsd_Location_.set (Location);
}

void conductivity_heterogeneity_type::
Location (::std::auto_ptr< Location::type > Location)
{
  this->_xsd_Location_.set (Location);
}


// chaste_parameters_type
// 

const chaste_parameters_type::SimulationDuration::type& chaste_parameters_type::
SimulationDuration () const
{
  return this->_xsd_SimulationDuration_.get ();
}

chaste_parameters_type::SimulationDuration::type& chaste_parameters_type::
SimulationDuration ()
{
  return this->_xsd_SimulationDuration_.get ();
}

void chaste_parameters_type::
SimulationDuration (const SimulationDuration::type& SimulationDuration)
{
  this->_xsd_SimulationDuration_.set (SimulationDuration);
}

const chaste_parameters_type::Domain::type& chaste_parameters_type::
Domain () const
{
  return this->_xsd_Domain_.get ();
}

chaste_parameters_type::Domain::type& chaste_parameters_type::
Domain ()
{
  return this->_xsd_Domain_.get ();
}

void chaste_parameters_type::
Domain (const Domain::type& Domain)
{
  this->_xsd_Domain_.set (Domain);
}

void chaste_parameters_type::
Domain (::std::auto_ptr< Domain::type > Domain)
{
  this->_xsd_Domain_.set (Domain);
}

const chaste_parameters_type::IonicModel::type& chaste_parameters_type::
IonicModel () const
{
  return this->_xsd_IonicModel_.get ();
}

chaste_parameters_type::IonicModel::type& chaste_parameters_type::
IonicModel ()
{
  return this->_xsd_IonicModel_.get ();
}

void chaste_parameters_type::
IonicModel (const IonicModel::type& IonicModel)
{
  this->_xsd_IonicModel_.set (IonicModel);
}

void chaste_parameters_type::
IonicModel (::std::auto_ptr< IonicModel::type > IonicModel)
{
  this->_xsd_IonicModel_.set (IonicModel);
}

const chaste_parameters_type::SlabX::type& chaste_parameters_type::
SlabX () const
{
  return this->_xsd_SlabX_.get ();
}

chaste_parameters_type::SlabX::type& chaste_parameters_type::
SlabX ()
{
  return this->_xsd_SlabX_.get ();
}

void chaste_parameters_type::
SlabX (const SlabX::type& SlabX)
{
  this->_xsd_SlabX_.set (SlabX);
}

const chaste_parameters_type::SlabY::type& chaste_parameters_type::
SlabY () const
{
  return this->_xsd_SlabY_.get ();
}

chaste_parameters_type::SlabY::type& chaste_parameters_type::
SlabY ()
{
  return this->_xsd_SlabY_.get ();
}

void chaste_parameters_type::
SlabY (const SlabY::type& SlabY)
{
  this->_xsd_SlabY_.set (SlabY);
}

const chaste_parameters_type::SlabZ::type& chaste_parameters_type::
SlabZ () const
{
  return this->_xsd_SlabZ_.get ();
}

chaste_parameters_type::SlabZ::type& chaste_parameters_type::
SlabZ ()
{
  return this->_xsd_SlabZ_.get ();
}

void chaste_parameters_type::
SlabZ (const SlabZ::type& SlabZ)
{
  this->_xsd_SlabZ_.set (SlabZ);
}

const chaste_parameters_type::InterNodeSpace::type& chaste_parameters_type::
InterNodeSpace () const
{
  return this->_xsd_InterNodeSpace_.get ();
}

chaste_parameters_type::InterNodeSpace::type& chaste_parameters_type::
InterNodeSpace ()
{
  return this->_xsd_InterNodeSpace_.get ();
}

void chaste_parameters_type::
InterNodeSpace (const InterNodeSpace::type& InterNodeSpace)
{
  this->_xsd_InterNodeSpace_.set (InterNodeSpace);
}

const chaste_parameters_type::LongitudinalConductivity::type& chaste_parameters_type::
LongitudinalConductivity () const
{
  return this->_xsd_LongitudinalConductivity_.get ();
}

chaste_parameters_type::LongitudinalConductivity::type& chaste_parameters_type::
LongitudinalConductivity ()
{
  return this->_xsd_LongitudinalConductivity_.get ();
}

void chaste_parameters_type::
LongitudinalConductivity (const LongitudinalConductivity::type& LongitudinalConductivity)
{
  this->_xsd_LongitudinalConductivity_.set (LongitudinalConductivity);
}

const chaste_parameters_type::TransverseConductivity::type& chaste_parameters_type::
TransverseConductivity () const
{
  return this->_xsd_TransverseConductivity_.get ();
}

chaste_parameters_type::TransverseConductivity::type& chaste_parameters_type::
TransverseConductivity ()
{
  return this->_xsd_TransverseConductivity_.get ();
}

void chaste_parameters_type::
TransverseConductivity (const TransverseConductivity::type& TransverseConductivity)
{
  this->_xsd_TransverseConductivity_.set (TransverseConductivity);
}

const chaste_parameters_type::NormalConductivity::type& chaste_parameters_type::
NormalConductivity () const
{
  return this->_xsd_NormalConductivity_.get ();
}

chaste_parameters_type::NormalConductivity::type& chaste_parameters_type::
NormalConductivity ()
{
  return this->_xsd_NormalConductivity_.get ();
}

void chaste_parameters_type::
NormalConductivity (const NormalConductivity::type& NormalConductivity)
{
  this->_xsd_NormalConductivity_.set (NormalConductivity);
}

const chaste_parameters_type::Stimulus::container& chaste_parameters_type::
Stimulus () const
{
  return this->_xsd_Stimulus_;
}

chaste_parameters_type::Stimulus::container& chaste_parameters_type::
Stimulus ()
{
  return this->_xsd_Stimulus_;
}

void chaste_parameters_type::
Stimulus (const Stimulus::container& Stimulus)
{
  this->_xsd_Stimulus_ = Stimulus;
}

const chaste_parameters_type::CellHeterogeneity::container& chaste_parameters_type::
CellHeterogeneity () const
{
  return this->_xsd_CellHeterogeneity_;
}

chaste_parameters_type::CellHeterogeneity::container& chaste_parameters_type::
CellHeterogeneity ()
{
  return this->_xsd_CellHeterogeneity_;
}

void chaste_parameters_type::
CellHeterogeneity (const CellHeterogeneity::container& CellHeterogeneity)
{
  this->_xsd_CellHeterogeneity_ = CellHeterogeneity;
}

const chaste_parameters_type::ConductivityHeterogeneity::container& chaste_parameters_type::
ConductivityHeterogeneity () const
{
  return this->_xsd_ConductivityHeterogeneity_;
}

chaste_parameters_type::ConductivityHeterogeneity::container& chaste_parameters_type::
ConductivityHeterogeneity ()
{
  return this->_xsd_ConductivityHeterogeneity_;
}

void chaste_parameters_type::
ConductivityHeterogeneity (const ConductivityHeterogeneity::container& ConductivityHeterogeneity)
{
  this->_xsd_ConductivityHeterogeneity_ = ConductivityHeterogeneity;
}

const chaste_parameters_type::OutputDirectory::type& chaste_parameters_type::
OutputDirectory () const
{
  return this->_xsd_OutputDirectory_.get ();
}

chaste_parameters_type::OutputDirectory::type& chaste_parameters_type::
OutputDirectory ()
{
  return this->_xsd_OutputDirectory_.get ();
}

void chaste_parameters_type::
OutputDirectory (const OutputDirectory::type& OutputDirectory)
{
  this->_xsd_OutputDirectory_.set (OutputDirectory);
}

void chaste_parameters_type::
OutputDirectory (::std::auto_ptr< OutputDirectory::type > OutputDirectory)
{
  this->_xsd_OutputDirectory_.set (OutputDirectory);
}

const chaste_parameters_type::MeshOutputDirectory::type& chaste_parameters_type::
MeshOutputDirectory () const
{
  return this->_xsd_MeshOutputDirectory_.get ();
}

chaste_parameters_type::MeshOutputDirectory::type& chaste_parameters_type::
MeshOutputDirectory ()
{
  return this->_xsd_MeshOutputDirectory_.get ();
}

void chaste_parameters_type::
MeshOutputDirectory (const MeshOutputDirectory::type& MeshOutputDirectory)
{
  this->_xsd_MeshOutputDirectory_.set (MeshOutputDirectory);
}

void chaste_parameters_type::
MeshOutputDirectory (::std::auto_ptr< MeshOutputDirectory::type > MeshOutputDirectory)
{
  this->_xsd_MeshOutputDirectory_.set (MeshOutputDirectory);
}


#include <xsd/cxx/xml/dom/elements.hxx>
#include <xsd/cxx/xml/dom/parser.hxx>

// domain_type
//

domain_type::
domain_type (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f,
             ::xml_schema::type* c)
: ::xml_schema::string (e, f, c)
{
  _xsd_domain_type_convert ();
}

domain_type::
domain_type (const ::xercesc::DOMAttr& a,
             ::xml_schema::flags f,
             ::xml_schema::type* c)
: ::xml_schema::string (a, f, c)
{
  _xsd_domain_type_convert ();
}

domain_type::
domain_type (const ::std::basic_string< char >& s,
             const ::xercesc::DOMElement* e,
             ::xml_schema::flags f,
             ::xml_schema::type* c)
: ::xml_schema::string (s, e, f, c)
{
  _xsd_domain_type_convert ();
}

domain_type* domain_type::
_clone (::xml_schema::flags f,
        ::xml_schema::type* c) const
{
  return new domain_type (*this, f, c);
}

domain_type::_xsd_domain_type domain_type::
_xsd_domain_type_convert () const
{
  ::xsd::cxx::tree::enum_comparator< char > c (_xsd_domain_type_literals_);
  const _xsd_domain_type* i (::std::lower_bound (
                               _xsd_domain_type_indexes_,
                               _xsd_domain_type_indexes_ + 2,
                               *this,
                               c));

  if (i == _xsd_domain_type_indexes_ + 2 || _xsd_domain_type_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
  }

  return *i;
}

const char* const domain_type::
_xsd_domain_type_literals_[2] =
{
  "Mono",
  "Bi"
};

const domain_type::_xsd_domain_type domain_type::
_xsd_domain_type_indexes_[2] =
{
  ::domain_type::Bi,
  ::domain_type::Mono
};

// ionic_model_type
//

ionic_model_type::
ionic_model_type (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f,
                  ::xml_schema::type* c)
: ::xml_schema::string (e, f, c)
{
  _xsd_ionic_model_type_convert ();
}

ionic_model_type::
ionic_model_type (const ::xercesc::DOMAttr& a,
                  ::xml_schema::flags f,
                  ::xml_schema::type* c)
: ::xml_schema::string (a, f, c)
{
  _xsd_ionic_model_type_convert ();
}

ionic_model_type::
ionic_model_type (const ::std::basic_string< char >& s,
                  const ::xercesc::DOMElement* e,
                  ::xml_schema::flags f,
                  ::xml_schema::type* c)
: ::xml_schema::string (s, e, f, c)
{
  _xsd_ionic_model_type_convert ();
}

ionic_model_type* ionic_model_type::
_clone (::xml_schema::flags f,
        ::xml_schema::type* c) const
{
  return new ionic_model_type (*this, f, c);
}

ionic_model_type::_xsd_ionic_model_type ionic_model_type::
_xsd_ionic_model_type_convert () const
{
  ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ionic_model_type_literals_);
  const _xsd_ionic_model_type* i (::std::lower_bound (
                                    _xsd_ionic_model_type_indexes_,
                                    _xsd_ionic_model_type_indexes_ + 5,
                                    *this,
                                    c));

  if (i == _xsd_ionic_model_type_indexes_ + 5 || _xsd_ionic_model_type_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
  }

  return *i;
}

const char* const ionic_model_type::
_xsd_ionic_model_type_literals_[5] =
{
  "BackwardEulerFoxModel2002Modified",
  "BackwardEulerLuoRudyIModel1991",
  "LuoRudyIModel1991OdeSystem",
  "FaberRudy2000Version3Optimised",
  "FaberRudy2000Version3"
};

const ionic_model_type::_xsd_ionic_model_type ionic_model_type::
_xsd_ionic_model_type_indexes_[5] =
{
  ::ionic_model_type::BackwardEulerFoxModel2002Modified,
  ::ionic_model_type::BackwardEulerLuoRudyIModel1991,
  ::ionic_model_type::FaberRudy2000Version3,
  ::ionic_model_type::FaberRudy2000Version3Optimised,
  ::ionic_model_type::LuoRudyIModel1991OdeSystem
};

// point_type
//

point_type::
point_type (const X::type& _xsd_X)
: ::xml_schema::type (),
_xsd_X_ (_xsd_X,
         ::xml_schema::flags (),
         this),
_xsd_Y_ (::xml_schema::flags (), this),
_xsd_Z_ (::xml_schema::flags (), this)
{
}

point_type::
point_type (const point_type& _xsd_point_type,
            ::xml_schema::flags f,
            ::xml_schema::type* c)
: ::xml_schema::type (_xsd_point_type, f, c),
_xsd_X_ (_xsd_point_type._xsd_X_,
         f | ::xml_schema::flags::not_root,
         this),
_xsd_Y_ (_xsd_point_type._xsd_Y_,
         f | ::xml_schema::flags::not_root,
         this),
_xsd_Z_ (_xsd_point_type._xsd_Z_,
         f | ::xml_schema::flags::not_root,
         this)
{
}

point_type::
point_type (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f,
            ::xml_schema::type* c)
: ::xml_schema::type (e, f, c),
_xsd_X_ (f | ::xml_schema::flags::not_root, this),
_xsd_Y_ (f | ::xml_schema::flags::not_root, this),
_xsd_Z_ (f | ::xml_schema::flags::not_root, this)
{
  parse (e, f);
}

void point_type::
parse (const ::xercesc::DOMElement& e, ::xml_schema::flags f)
{
  ::xsd::cxx::xml::dom::parser< char > p (e);

  while (p.more_attributes ())
  {
    const ::xsd::cxx::xml::dom::attribute< char > a (p.next_attribute ());

    if (a.name () == "X" && a.namespace_ ().empty ())
    {
      this->X (
        X::traits::create (
          a.dom_attribute (),
          f | ::xml_schema::flags::not_root,
          this));
      continue;
    }

    if (a.name () == "Y" && a.namespace_ ().empty ())
    {
      this->Y (
        Y::traits::create (
          a.dom_attribute (),
          f | ::xml_schema::flags::not_root,
          this));
      continue;
    }

    if (a.name () == "Z" && a.namespace_ ().empty ())
    {
      this->Z (
        Z::traits::create (
          a.dom_attribute (),
          f | ::xml_schema::flags::not_root,
          this));
      continue;
    }
  }

  if (!_xsd_X_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "X",
      "");
  }
}

point_type* point_type::
_clone (::xml_schema::flags f,
        ::xml_schema::type* c) const
{
  return new point_type (*this, f, c);
}

// box_type
//

box_type::
box_type (const CornerA::type& _xsd_CornerA,
          const CornerB::type& _xsd_CornerB)
: ::xml_schema::type (),
_xsd_CornerA_ (_xsd_CornerA,
               ::xml_schema::flags (),
               this),
_xsd_CornerB_ (_xsd_CornerB,
               ::xml_schema::flags (),
               this)
{
}

box_type::
box_type (const box_type& _xsd_box_type,
          ::xml_schema::flags f,
          ::xml_schema::type* c)
: ::xml_schema::type (_xsd_box_type, f, c),
_xsd_CornerA_ (_xsd_box_type._xsd_CornerA_,
               f | ::xml_schema::flags::not_root,
               this),
_xsd_CornerB_ (_xsd_box_type._xsd_CornerB_,
               f | ::xml_schema::flags::not_root,
               this)
{
}

box_type::
box_type (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f,
          ::xml_schema::type* c)
: ::xml_schema::type (e, f, c),
_xsd_CornerA_ (f | ::xml_schema::flags::not_root, this),
_xsd_CornerB_ (f | ::xml_schema::flags::not_root, this)
{
  parse (e, f);
}

void box_type::
parse (const ::xercesc::DOMElement& e, ::xml_schema::flags f)
{
  ::xsd::cxx::xml::dom::parser< char > p (e);

  while (p.more_elements ())
  {
    const ::xsd::cxx::xml::dom::element< char > e (p.next_element ());

    // CornerA
    //
    {
      if (e.name () == "CornerA" && e.namespace_ ().empty ())
      {
        ::std::auto_ptr< CornerA::type > r (
          CornerA::traits::create (
            e.dom_element (),
            f | ::xml_schema::flags::not_root,
            this));

        if (_xsd_CornerA_.present ())
          continue;
        this->CornerA (r);
        continue;
      }
    }

    // CornerB
    //
    {
      if (e.name () == "CornerB" && e.namespace_ ().empty ())
      {
        ::std::auto_ptr< CornerB::type > r (
          CornerB::traits::create (
            e.dom_element (),
            f | ::xml_schema::flags::not_root,
            this));

        if (_xsd_CornerB_.present ())
          continue;
        this->CornerB (r);
        continue;
      }
    }
  }

  if (!_xsd_CornerA_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "CornerA",
      "");
  }

  if (!_xsd_CornerB_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "CornerB",
      "");
  }
}

box_type* box_type::
_clone (::xml_schema::flags f,
        ::xml_schema::type* c) const
{
  return new box_type (*this, f, c);
}

// stimulus_type
//

stimulus_type::
stimulus_type (const Strength::type& _xsd_Strength,
               const Duration::type& _xsd_Duration,
               const Delay::type& _xsd_Delay,
               const Location::type& _xsd_Location)
: ::xml_schema::type (),
_xsd_Strength_ (_xsd_Strength,
                ::xml_schema::flags (),
                this),
_xsd_Duration_ (_xsd_Duration,
                ::xml_schema::flags (),
                this),
_xsd_Delay_ (_xsd_Delay,
             ::xml_schema::flags (),
             this),
_xsd_Location_ (_xsd_Location,
                ::xml_schema::flags (),
                this)
{
}

stimulus_type::
stimulus_type (const stimulus_type& _xsd_stimulus_type,
               ::xml_schema::flags f,
               ::xml_schema::type* c)
: ::xml_schema::type (_xsd_stimulus_type, f, c),
_xsd_Strength_ (_xsd_stimulus_type._xsd_Strength_,
                f | ::xml_schema::flags::not_root,
                this),
_xsd_Duration_ (_xsd_stimulus_type._xsd_Duration_,
                f | ::xml_schema::flags::not_root,
                this),
_xsd_Delay_ (_xsd_stimulus_type._xsd_Delay_,
             f | ::xml_schema::flags::not_root,
             this),
_xsd_Location_ (_xsd_stimulus_type._xsd_Location_,
                f | ::xml_schema::flags::not_root,
                this)
{
}

stimulus_type::
stimulus_type (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f,
               ::xml_schema::type* c)
: ::xml_schema::type (e, f, c),
_xsd_Strength_ (f | ::xml_schema::flags::not_root, this),
_xsd_Duration_ (f | ::xml_schema::flags::not_root, this),
_xsd_Delay_ (f | ::xml_schema::flags::not_root, this),
_xsd_Location_ (f | ::xml_schema::flags::not_root, this)
{
  parse (e, f);
}

void stimulus_type::
parse (const ::xercesc::DOMElement& e, ::xml_schema::flags f)
{
  ::xsd::cxx::xml::dom::parser< char > p (e);

  while (p.more_elements ())
  {
    const ::xsd::cxx::xml::dom::element< char > e (p.next_element ());

    // Strength
    //
    {
      if (e.name () == "Strength" && e.namespace_ ().empty ())
      {
        if (_xsd_Strength_.present ())
          continue;
        this->Strength (
          Strength::traits::create (
            e.dom_element (),
            f | ::xml_schema::flags::not_root,
            this));
        continue;
      }
    }

    // Duration
    //
    {
      if (e.name () == "Duration" && e.namespace_ ().empty ())
      {
        if (_xsd_Duration_.present ())
          continue;
        this->Duration (
          Duration::traits::create (
            e.dom_element (),
            f | ::xml_schema::flags::not_root,
            this));
        continue;
      }
    }

    // Delay
    //
    {
      if (e.name () == "Delay" && e.namespace_ ().empty ())
      {
        if (_xsd_Delay_.present ())
          continue;
        this->Delay (
          Delay::traits::create (
            e.dom_element (),
            f | ::xml_schema::flags::not_root,
            this));
        continue;
      }
    }

    // Location
    //
    {
      if (e.name () == "Location" && e.namespace_ ().empty ())
      {
        ::std::auto_ptr< Location::type > r (
          Location::traits::create (
            e.dom_element (),
            f | ::xml_schema::flags::not_root,
            this));

        if (_xsd_Location_.present ())
          continue;
        this->Location (r);
        continue;
      }
    }
  }

  if (!_xsd_Strength_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "Strength",
      "");
  }

  if (!_xsd_Duration_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "Duration",
      "");
  }

  if (!_xsd_Delay_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "Delay",
      "");
  }

  if (!_xsd_Location_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "Location",
      "");
  }
}

stimulus_type* stimulus_type::
_clone (::xml_schema::flags f,
        ::xml_schema::type* c) const
{
  return new stimulus_type (*this, f, c);
}

// cell_heterogeneity_type
//

cell_heterogeneity_type::
cell_heterogeneity_type (const ScaleFactorGks::type& _xsd_ScaleFactorGks,
                         const ScaleFactorIto::type& _xsd_ScaleFactorIto,
                         const Location::type& _xsd_Location)
: ::xml_schema::type (),
_xsd_ScaleFactorGks_ (_xsd_ScaleFactorGks,
                      ::xml_schema::flags (),
                      this),
_xsd_ScaleFactorIto_ (_xsd_ScaleFactorIto,
                      ::xml_schema::flags (),
                      this),
_xsd_Location_ (_xsd_Location,
                ::xml_schema::flags (),
                this)
{
}

cell_heterogeneity_type::
cell_heterogeneity_type (const cell_heterogeneity_type& _xsd_cell_heterogeneity_type,
                         ::xml_schema::flags f,
                         ::xml_schema::type* c)
: ::xml_schema::type (_xsd_cell_heterogeneity_type, f, c),
_xsd_ScaleFactorGks_ (_xsd_cell_heterogeneity_type._xsd_ScaleFactorGks_,
                      f | ::xml_schema::flags::not_root,
                      this),
_xsd_ScaleFactorIto_ (_xsd_cell_heterogeneity_type._xsd_ScaleFactorIto_,
                      f | ::xml_schema::flags::not_root,
                      this),
_xsd_Location_ (_xsd_cell_heterogeneity_type._xsd_Location_,
                f | ::xml_schema::flags::not_root,
                this)
{
}

cell_heterogeneity_type::
cell_heterogeneity_type (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f,
                         ::xml_schema::type* c)
: ::xml_schema::type (e, f, c),
_xsd_ScaleFactorGks_ (f | ::xml_schema::flags::not_root, this),
_xsd_ScaleFactorIto_ (f | ::xml_schema::flags::not_root, this),
_xsd_Location_ (f | ::xml_schema::flags::not_root, this)
{
  parse (e, f);
}

void cell_heterogeneity_type::
parse (const ::xercesc::DOMElement& e, ::xml_schema::flags f)
{
  ::xsd::cxx::xml::dom::parser< char > p (e);

  while (p.more_elements ())
  {
    const ::xsd::cxx::xml::dom::element< char > e (p.next_element ());

    // ScaleFactorGks
    //
    {
      if (e.name () == "ScaleFactorGks" && e.namespace_ ().empty ())
      {
        if (_xsd_ScaleFactorGks_.present ())
          continue;
        this->ScaleFactorGks (
          ScaleFactorGks::traits::create (
            e.dom_element (),
            f | ::xml_schema::flags::not_root,
            this));
        continue;
      }
    }

    // ScaleFactorIto
    //
    {
      if (e.name () == "ScaleFactorIto" && e.namespace_ ().empty ())
      {
        if (_xsd_ScaleFactorIto_.present ())
          continue;
        this->ScaleFactorIto (
          ScaleFactorIto::traits::create (
            e.dom_element (),
            f | ::xml_schema::flags::not_root,
            this));
        continue;
      }
    }

    // Location
    //
    {
      if (e.name () == "Location" && e.namespace_ ().empty ())
      {
        ::std::auto_ptr< Location::type > r (
          Location::traits::create (
            e.dom_element (),
            f | ::xml_schema::flags::not_root,
            this));

        if (_xsd_Location_.present ())
          continue;
        this->Location (r);
        continue;
      }
    }
  }

  if (!_xsd_ScaleFactorGks_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "ScaleFactorGks",
      "");
  }

  if (!_xsd_ScaleFactorIto_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "ScaleFactorIto",
      "");
  }

  if (!_xsd_Location_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "Location",
      "");
  }
}

cell_heterogeneity_type* cell_heterogeneity_type::
_clone (::xml_schema::flags f,
        ::xml_schema::type* c) const
{
  return new cell_heterogeneity_type (*this, f, c);
}

// conductivity_heterogeneity_type
//

conductivity_heterogeneity_type::
conductivity_heterogeneity_type (const Longitudinal::type& _xsd_Longitudinal,
                                 const Transverse::type& _xsd_Transverse,
                                 const Normal::type& _xsd_Normal,
                                 const Location::type& _xsd_Location)
: ::xml_schema::type (),
_xsd_Longitudinal_ (_xsd_Longitudinal,
                    ::xml_schema::flags (),
                    this),
_xsd_Transverse_ (_xsd_Transverse,
                  ::xml_schema::flags (),
                  this),
_xsd_Normal_ (_xsd_Normal,
              ::xml_schema::flags (),
              this),
_xsd_Location_ (_xsd_Location,
                ::xml_schema::flags (),
                this)
{
}

conductivity_heterogeneity_type::
conductivity_heterogeneity_type (const conductivity_heterogeneity_type& _xsd_conductivity_heterogeneity_type,
                                 ::xml_schema::flags f,
                                 ::xml_schema::type* c)
: ::xml_schema::type (_xsd_conductivity_heterogeneity_type, f, c),
_xsd_Longitudinal_ (_xsd_conductivity_heterogeneity_type._xsd_Longitudinal_,
                    f | ::xml_schema::flags::not_root,
                    this),
_xsd_Transverse_ (_xsd_conductivity_heterogeneity_type._xsd_Transverse_,
                  f | ::xml_schema::flags::not_root,
                  this),
_xsd_Normal_ (_xsd_conductivity_heterogeneity_type._xsd_Normal_,
              f | ::xml_schema::flags::not_root,
              this),
_xsd_Location_ (_xsd_conductivity_heterogeneity_type._xsd_Location_,
                f | ::xml_schema::flags::not_root,
                this)
{
}

conductivity_heterogeneity_type::
conductivity_heterogeneity_type (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f,
                                 ::xml_schema::type* c)
: ::xml_schema::type (e, f, c),
_xsd_Longitudinal_ (f | ::xml_schema::flags::not_root, this),
_xsd_Transverse_ (f | ::xml_schema::flags::not_root, this),
_xsd_Normal_ (f | ::xml_schema::flags::not_root, this),
_xsd_Location_ (f | ::xml_schema::flags::not_root, this)
{
  parse (e, f);
}

void conductivity_heterogeneity_type::
parse (const ::xercesc::DOMElement& e, ::xml_schema::flags f)
{
  ::xsd::cxx::xml::dom::parser< char > p (e);

  while (p.more_elements ())
  {
    const ::xsd::cxx::xml::dom::element< char > e (p.next_element ());

    // Longitudinal
    //
    {
      if (e.name () == "Longitudinal" && e.namespace_ ().empty ())
      {
        if (_xsd_Longitudinal_.present ())
          continue;
        this->Longitudinal (
          Longitudinal::traits::create (
            e.dom_element (),
            f | ::xml_schema::flags::not_root,
            this));
        continue;
      }
    }

    // Transverse
    //
    {
      if (e.name () == "Transverse" && e.namespace_ ().empty ())
      {
        if (_xsd_Transverse_.present ())
          continue;
        this->Transverse (
          Transverse::traits::create (
            e.dom_element (),
            f | ::xml_schema::flags::not_root,
            this));
        continue;
      }
    }

    // Normal
    //
    {
      if (e.name () == "Normal" && e.namespace_ ().empty ())
      {
        if (_xsd_Normal_.present ())
          continue;
        this->Normal (
          Normal::traits::create (
            e.dom_element (),
            f | ::xml_schema::flags::not_root,
            this));
        continue;
      }
    }

    // Location
    //
    {
      if (e.name () == "Location" && e.namespace_ ().empty ())
      {
        ::std::auto_ptr< Location::type > r (
          Location::traits::create (
            e.dom_element (),
            f | ::xml_schema::flags::not_root,
            this));

        if (_xsd_Location_.present ())
          continue;
        this->Location (r);
        continue;
      }
    }
  }

  if (!_xsd_Longitudinal_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "Longitudinal",
      "");
  }

  if (!_xsd_Transverse_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "Transverse",
      "");
  }

  if (!_xsd_Normal_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "Normal",
      "");
  }

  if (!_xsd_Location_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "Location",
      "");
  }
}

conductivity_heterogeneity_type* conductivity_heterogeneity_type::
_clone (::xml_schema::flags f,
        ::xml_schema::type* c) const
{
  return new conductivity_heterogeneity_type (*this, f, c);
}

// chaste_parameters_type
//

chaste_parameters_type::
chaste_parameters_type (const SimulationDuration::type& _xsd_SimulationDuration,
                        const Domain::type& _xsd_Domain,
                        const IonicModel::type& _xsd_IonicModel,
                        const SlabX::type& _xsd_SlabX,
                        const SlabY::type& _xsd_SlabY,
                        const SlabZ::type& _xsd_SlabZ,
                        const InterNodeSpace::type& _xsd_InterNodeSpace,
                        const LongitudinalConductivity::type& _xsd_LongitudinalConductivity,
                        const TransverseConductivity::type& _xsd_TransverseConductivity,
                        const NormalConductivity::type& _xsd_NormalConductivity,
                        const OutputDirectory::type& _xsd_OutputDirectory,
                        const MeshOutputDirectory::type& _xsd_MeshOutputDirectory)
: ::xml_schema::type (),
_xsd_SimulationDuration_ (_xsd_SimulationDuration,
                          ::xml_schema::flags (),
                          this),
_xsd_Domain_ (_xsd_Domain,
              ::xml_schema::flags (),
              this),
_xsd_IonicModel_ (_xsd_IonicModel,
                  ::xml_schema::flags (),
                  this),
_xsd_SlabX_ (_xsd_SlabX,
             ::xml_schema::flags (),
             this),
_xsd_SlabY_ (_xsd_SlabY,
             ::xml_schema::flags (),
             this),
_xsd_SlabZ_ (_xsd_SlabZ,
             ::xml_schema::flags (),
             this),
_xsd_InterNodeSpace_ (_xsd_InterNodeSpace,
                      ::xml_schema::flags (),
                      this),
_xsd_LongitudinalConductivity_ (_xsd_LongitudinalConductivity,
                                ::xml_schema::flags (),
                                this),
_xsd_TransverseConductivity_ (_xsd_TransverseConductivity,
                              ::xml_schema::flags (),
                              this),
_xsd_NormalConductivity_ (_xsd_NormalConductivity,
                          ::xml_schema::flags (),
                          this),
_xsd_Stimulus_ (::xml_schema::flags (), this),
_xsd_CellHeterogeneity_ (::xml_schema::flags (), this),
_xsd_ConductivityHeterogeneity_ (::xml_schema::flags (), this),
_xsd_OutputDirectory_ (_xsd_OutputDirectory,
                       ::xml_schema::flags (),
                       this),
_xsd_MeshOutputDirectory_ (_xsd_MeshOutputDirectory,
                           ::xml_schema::flags (),
                           this)
{
}

chaste_parameters_type::
chaste_parameters_type (const chaste_parameters_type& _xsd_chaste_parameters_type,
                        ::xml_schema::flags f,
                        ::xml_schema::type* c)
: ::xml_schema::type (_xsd_chaste_parameters_type, f, c),
_xsd_SimulationDuration_ (_xsd_chaste_parameters_type._xsd_SimulationDuration_,
                          f | ::xml_schema::flags::not_root,
                          this),
_xsd_Domain_ (_xsd_chaste_parameters_type._xsd_Domain_,
              f | ::xml_schema::flags::not_root,
              this),
_xsd_IonicModel_ (_xsd_chaste_parameters_type._xsd_IonicModel_,
                  f | ::xml_schema::flags::not_root,
                  this),
_xsd_SlabX_ (_xsd_chaste_parameters_type._xsd_SlabX_,
             f | ::xml_schema::flags::not_root,
             this),
_xsd_SlabY_ (_xsd_chaste_parameters_type._xsd_SlabY_,
             f | ::xml_schema::flags::not_root,
             this),
_xsd_SlabZ_ (_xsd_chaste_parameters_type._xsd_SlabZ_,
             f | ::xml_schema::flags::not_root,
             this),
_xsd_InterNodeSpace_ (_xsd_chaste_parameters_type._xsd_InterNodeSpace_,
                      f | ::xml_schema::flags::not_root,
                      this),
_xsd_LongitudinalConductivity_ (_xsd_chaste_parameters_type._xsd_LongitudinalConductivity_,
                                f | ::xml_schema::flags::not_root,
                                this),
_xsd_TransverseConductivity_ (_xsd_chaste_parameters_type._xsd_TransverseConductivity_,
                              f | ::xml_schema::flags::not_root,
                              this),
_xsd_NormalConductivity_ (_xsd_chaste_parameters_type._xsd_NormalConductivity_,
                          f | ::xml_schema::flags::not_root,
                          this),
_xsd_Stimulus_ (_xsd_chaste_parameters_type._xsd_Stimulus_,
                f | ::xml_schema::flags::not_root,
                this),
_xsd_CellHeterogeneity_ (_xsd_chaste_parameters_type._xsd_CellHeterogeneity_,
                         f | ::xml_schema::flags::not_root,
                         this),
_xsd_ConductivityHeterogeneity_ (_xsd_chaste_parameters_type._xsd_ConductivityHeterogeneity_,
                                 f | ::xml_schema::flags::not_root,
                                 this),
_xsd_OutputDirectory_ (_xsd_chaste_parameters_type._xsd_OutputDirectory_,
                       f | ::xml_schema::flags::not_root,
                       this),
_xsd_MeshOutputDirectory_ (_xsd_chaste_parameters_type._xsd_MeshOutputDirectory_,
                           f | ::xml_schema::flags::not_root,
                           this)
{
}

chaste_parameters_type::
chaste_parameters_type (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f,
                        ::xml_schema::type* c)
: ::xml_schema::type (e, f, c),
_xsd_SimulationDuration_ (f | ::xml_schema::flags::not_root, this),
_xsd_Domain_ (f | ::xml_schema::flags::not_root, this),
_xsd_IonicModel_ (f | ::xml_schema::flags::not_root, this),
_xsd_SlabX_ (f | ::xml_schema::flags::not_root, this),
_xsd_SlabY_ (f | ::xml_schema::flags::not_root, this),
_xsd_SlabZ_ (f | ::xml_schema::flags::not_root, this),
_xsd_InterNodeSpace_ (f | ::xml_schema::flags::not_root, this),
_xsd_LongitudinalConductivity_ (f | ::xml_schema::flags::not_root, this),
_xsd_TransverseConductivity_ (f | ::xml_schema::flags::not_root, this),
_xsd_NormalConductivity_ (f | ::xml_schema::flags::not_root, this),
_xsd_Stimulus_ (f | ::xml_schema::flags::not_root, this),
_xsd_CellHeterogeneity_ (f | ::xml_schema::flags::not_root, this),
_xsd_ConductivityHeterogeneity_ (f | ::xml_schema::flags::not_root, this),
_xsd_OutputDirectory_ (f | ::xml_schema::flags::not_root, this),
_xsd_MeshOutputDirectory_ (f | ::xml_schema::flags::not_root, this)
{
  parse (e, f);
}

void chaste_parameters_type::
parse (const ::xercesc::DOMElement& e, ::xml_schema::flags f)
{
  ::xsd::cxx::xml::dom::parser< char > p (e);

  while (p.more_elements ())
  {
    const ::xsd::cxx::xml::dom::element< char > e (p.next_element ());

    // SimulationDuration
    //
    {
      if (e.name () == "SimulationDuration" && e.namespace_ ().empty ())
      {
        if (_xsd_SimulationDuration_.present ())
          continue;
        this->SimulationDuration (
          SimulationDuration::traits::create (
            e.dom_element (),
            f | ::xml_schema::flags::not_root,
            this));
        continue;
      }
    }

    // Domain
    //
    {
      if (e.name () == "Domain" && e.namespace_ ().empty ())
      {
        ::std::auto_ptr< Domain::type > r (
          Domain::traits::create (
            e.dom_element (),
            f | ::xml_schema::flags::not_root,
            this));

        if (_xsd_Domain_.present ())
          continue;
        this->Domain (r);
        continue;
      }
    }

    // IonicModel
    //
    {
      if (e.name () == "IonicModel" && e.namespace_ ().empty ())
      {
        ::std::auto_ptr< IonicModel::type > r (
          IonicModel::traits::create (
            e.dom_element (),
            f | ::xml_schema::flags::not_root,
            this));

        if (_xsd_IonicModel_.present ())
          continue;
        this->IonicModel (r);
        continue;
      }
    }

    // SlabX
    //
    {
      if (e.name () == "SlabX" && e.namespace_ ().empty ())
      {
        if (_xsd_SlabX_.present ())
          continue;
        this->SlabX (
          SlabX::traits::create (
            e.dom_element (),
            f | ::xml_schema::flags::not_root,
            this));
        continue;
      }
    }

    // SlabY
    //
    {
      if (e.name () == "SlabY" && e.namespace_ ().empty ())
      {
        if (_xsd_SlabY_.present ())
          continue;
        this->SlabY (
          SlabY::traits::create (
            e.dom_element (),
            f | ::xml_schema::flags::not_root,
            this));
        continue;
      }
    }

    // SlabZ
    //
    {
      if (e.name () == "SlabZ" && e.namespace_ ().empty ())
      {
        if (_xsd_SlabZ_.present ())
          continue;
        this->SlabZ (
          SlabZ::traits::create (
            e.dom_element (),
            f | ::xml_schema::flags::not_root,
            this));
        continue;
      }
    }

    // InterNodeSpace
    //
    {
      if (e.name () == "InterNodeSpace" && e.namespace_ ().empty ())
      {
        if (_xsd_InterNodeSpace_.present ())
          continue;
        this->InterNodeSpace (
          InterNodeSpace::traits::create (
            e.dom_element (),
            f | ::xml_schema::flags::not_root,
            this));
        continue;
      }
    }

    // LongitudinalConductivity
    //
    {
      if (e.name () == "LongitudinalConductivity" && e.namespace_ ().empty ())
      {
        if (_xsd_LongitudinalConductivity_.present ())
          continue;
        this->LongitudinalConductivity (
          LongitudinalConductivity::traits::create (
            e.dom_element (),
            f | ::xml_schema::flags::not_root,
            this));
        continue;
      }
    }

    // TransverseConductivity
    //
    {
      if (e.name () == "TransverseConductivity" && e.namespace_ ().empty ())
      {
        if (_xsd_TransverseConductivity_.present ())
          continue;
        this->TransverseConductivity (
          TransverseConductivity::traits::create (
            e.dom_element (),
            f | ::xml_schema::flags::not_root,
            this));
        continue;
      }
    }

    // NormalConductivity
    //
    {
      if (e.name () == "NormalConductivity" && e.namespace_ ().empty ())
      {
        if (_xsd_NormalConductivity_.present ())
          continue;
        this->NormalConductivity (
          NormalConductivity::traits::create (
            e.dom_element (),
            f | ::xml_schema::flags::not_root,
            this));
        continue;
      }
    }

    // Stimulus
    //
    {
      if (e.name () == "Stimulus" && e.namespace_ ().empty ())
      {
        ::std::auto_ptr< Stimulus::type > r (
          Stimulus::traits::create (
            e.dom_element (),
            f | ::xml_schema::flags::not_root,
            this));

        this->Stimulus ().push_back (r);
        continue;
      }
    }

    // CellHeterogeneity
    //
    {
      if (e.name () == "CellHeterogeneity" && e.namespace_ ().empty ())
      {
        ::std::auto_ptr< CellHeterogeneity::type > r (
          CellHeterogeneity::traits::create (
            e.dom_element (),
            f | ::xml_schema::flags::not_root,
            this));

        this->CellHeterogeneity ().push_back (r);
        continue;
      }
    }

    // ConductivityHeterogeneity
    //
    {
      if (e.name () == "ConductivityHeterogeneity" && e.namespace_ ().empty ())
      {
        ::std::auto_ptr< ConductivityHeterogeneity::type > r (
          ConductivityHeterogeneity::traits::create (
            e.dom_element (),
            f | ::xml_schema::flags::not_root,
            this));

        this->ConductivityHeterogeneity ().push_back (r);
        continue;
      }
    }

    // OutputDirectory
    //
    {
      if (e.name () == "OutputDirectory" && e.namespace_ ().empty ())
      {
        ::std::auto_ptr< OutputDirectory::type > r (
          OutputDirectory::traits::create (
            e.dom_element (),
            f | ::xml_schema::flags::not_root,
            this));

        if (_xsd_OutputDirectory_.present ())
          continue;
        this->OutputDirectory (r);
        continue;
      }
    }

    // MeshOutputDirectory
    //
    {
      if (e.name () == "MeshOutputDirectory" && e.namespace_ ().empty ())
      {
        ::std::auto_ptr< MeshOutputDirectory::type > r (
          MeshOutputDirectory::traits::create (
            e.dom_element (),
            f | ::xml_schema::flags::not_root,
            this));

        if (_xsd_MeshOutputDirectory_.present ())
          continue;
        this->MeshOutputDirectory (r);
        continue;
      }
    }
  }

  if (!_xsd_SimulationDuration_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "SimulationDuration",
      "");
  }

  if (!_xsd_Domain_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "Domain",
      "");
  }

  if (!_xsd_IonicModel_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "IonicModel",
      "");
  }

  if (!_xsd_SlabX_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "SlabX",
      "");
  }

  if (!_xsd_SlabY_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "SlabY",
      "");
  }

  if (!_xsd_SlabZ_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "SlabZ",
      "");
  }

  if (!_xsd_InterNodeSpace_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "InterNodeSpace",
      "");
  }

  if (!_xsd_LongitudinalConductivity_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "LongitudinalConductivity",
      "");
  }

  if (!_xsd_TransverseConductivity_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "TransverseConductivity",
      "");
  }

  if (!_xsd_NormalConductivity_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "NormalConductivity",
      "");
  }

  if (!_xsd_OutputDirectory_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "OutputDirectory",
      "");
  }

  if (!_xsd_MeshOutputDirectory_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "MeshOutputDirectory",
      "");
  }
}

chaste_parameters_type* chaste_parameters_type::
_clone (::xml_schema::flags f,
        ::xml_schema::type* c) const
{
  return new chaste_parameters_type (*this, f, c);
}

#include <istream>
#include <xercesc/framework/Wrapper4InputSource.hpp>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

::std::auto_ptr< ::chaste_parameters_type >
ChasteParameters (const ::std::basic_string< char >& u,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< char >& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::tree::error_handler< char > h;

  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::ChasteParameters (
    static_cast< const ::xercesc::DOMDocument& > (*d), f);
}

::std::auto_ptr< ::chaste_parameters_type >
ChasteParameters (const ::std::basic_string< char >& u,
                  ::xsd::cxx::xml::error_handler< char >& h,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< char >& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

  if (!d)
  {
    throw ::xsd::cxx::tree::parsing< char > ();
  }

  return ::ChasteParameters (
    static_cast< const ::xercesc::DOMDocument& > (*d), f);
}

::std::auto_ptr< ::chaste_parameters_type >
ChasteParameters (const ::std::basic_string< char >& u,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< char >& p)
{
  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

  if (!d)
  {
    throw ::xsd::cxx::tree::parsing< char > ();
  }

  return ::ChasteParameters (
    static_cast< const ::xercesc::DOMDocument& > (*d), f);
}

::std::auto_ptr< ::chaste_parameters_type >
ChasteParameters (::std::istream& is,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< char >& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  ::xercesc::Wrapper4InputSource wrap (&isrc, false);
  return ::ChasteParameters (wrap, f, p);
}

::std::auto_ptr< ::chaste_parameters_type >
ChasteParameters (::std::istream& is,
                  ::xsd::cxx::xml::error_handler< char >& h,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< char >& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  ::xercesc::Wrapper4InputSource wrap (&isrc, false);
  return ::ChasteParameters (wrap, h, f, p);
}

::std::auto_ptr< ::chaste_parameters_type >
ChasteParameters (::std::istream& is,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< char >& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  ::xercesc::Wrapper4InputSource wrap (&isrc, false);
  return ::ChasteParameters (wrap, h, f, p);
}

::std::auto_ptr< ::chaste_parameters_type >
ChasteParameters (::std::istream& is,
                  const ::std::basic_string< char >& sid,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< char >& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  ::xercesc::Wrapper4InputSource wrap (&isrc, false);
  return ::ChasteParameters (wrap, f, p);
}

::std::auto_ptr< ::chaste_parameters_type >
ChasteParameters (::std::istream& is,
                  const ::std::basic_string< char >& sid,
                  ::xsd::cxx::xml::error_handler< char >& h,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< char >& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  ::xercesc::Wrapper4InputSource wrap (&isrc, false);
  return ::ChasteParameters (wrap, h, f, p);
}

::std::auto_ptr< ::chaste_parameters_type >
ChasteParameters (::std::istream& is,
                  const ::std::basic_string< char >& sid,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< char >& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  ::xercesc::Wrapper4InputSource wrap (&isrc, false);
  return ::ChasteParameters (wrap, h, f, p);
}

::std::auto_ptr< ::chaste_parameters_type >
ChasteParameters (const ::xercesc::DOMInputSource& i,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< char >& p)
{
  ::xsd::cxx::tree::error_handler< char > h;

  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::ChasteParameters (
    static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
}

::std::auto_ptr< ::chaste_parameters_type >
ChasteParameters (const ::xercesc::DOMInputSource& i,
                  ::xsd::cxx::xml::error_handler< char >& h,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< char >& p)
{
  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

  if (!d)
  {
    throw ::xsd::cxx::tree::parsing< char > ();
  }

  return ::ChasteParameters (
    static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
}

::std::auto_ptr< ::chaste_parameters_type >
ChasteParameters (const ::xercesc::DOMInputSource& i,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< char >& p)
{
  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

  if (!d)
  {
    throw ::xsd::cxx::tree::parsing< char > ();
  }

  return ::ChasteParameters (
    static_cast< const ::xercesc::DOMDocument& > (*d), f, p);
}

::std::auto_ptr< ::chaste_parameters_type >
ChasteParameters (const ::xercesc::DOMDocument& d,
                  ::xml_schema::flags f,
                  const ::xsd::cxx::tree::properties< char >&)
{
  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
    (f & ::xml_schema::flags::keep_dom) 
    ? static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true))
    : 0);

  const ::xsd::cxx::xml::dom::element< char > e (
    c.get ()
    ? *c->getDocumentElement ()
    : *d.getDocumentElement ());

  if (e.name () == "ChasteParameters" &&
      e.namespace_ () == "")
  {
    ::std::auto_ptr< ::chaste_parameters_type > r (
      ::xsd::cxx::tree::traits< ::chaste_parameters_type, char >::create (
        e.dom_element (), f, 0));
    if (f & ::xml_schema::flags::keep_dom) c.release ();
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    e.name (),
    e.namespace_ (),
    "ChasteParameters",
    "");
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
#undef COVERAGE_IGNORE
//
// End epilogue.

