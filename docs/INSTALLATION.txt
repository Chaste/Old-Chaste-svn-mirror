CHASTE DEVELOPER INSTALLATION GUIDE (for SOURCE-CODE users only, NOT STANDALONE EXECUTABLE users)


This guide walks you through a "standard" installation of Chaste and all its
dependencies.  Other guides can be found on the developer wiki at
https://chaste.comlab.ox.ac.uk/cgi-bin/trac.cgi/wiki/DeveloperInstallGuide
For a guest login, use the username "anonymous", and your email address as
the password.

There are many dependencies, so if you are running the Ubuntu Linux
distribution we strongly recommend using our Ubuntu package of Chaste.
See https://chaste.comlab.ox.ac.uk/chaste/Inc/download.php?file=Ubuntu_package.html
for details.


First define the folder where you want to install the libraries which Chaste depends on, for example,
export CHASTE_LIBS=/home/scratch/chaste-libs

If it doesn't already exist, create this directory:
mkdir $CHASTE_LIBS



===================================================================================
=
=   Installing prerequisites
=
===================================================================================

The following packages and libraries are all compulsory for the Chaste code to run,
but not required for the standalone executable (the version numbers of packages and 
libraries might need updating). Please install them as described below.


==========SCONS:=============
(Python is a prerequisite for this)
Use your package manager to install Scons or

cd $CHASTE_LIBS
wget http://mesh.dl.sourceforge.net/sourceforge/scons/scons-1.2.0.tar.gz
tar zxf scons-1.2.0.tar.gz
cd scons-1.2.0
python setup.py install --prefix=$CHASTE_LIBS
cd ..
rm -rf scons-1.2.0.tar.gz scons-1.2.0

On a 64-bit machine you may find that an invocation of Scons
($CHASTE_LIBS/bin/scons) produces the error "ImportError: No module named
SCons.Script".
This is a known bug with Scons and may be fixed by adding a symbolic link
from the 64-bit library.  Do so like this:
cd $CHASTE_LIBS
ln -s lib64 lib

Note: we have had reports that Chaste may not yet work with SCons 1.3.0.
We have not been able to verify these however.


========PETSC:=======

Note that the version of HDF5 installed by PETSc (HDF5 v 1.6.6) has a known bug when extending large files in 
parallel.  If you wish to avoid this bug then you will need to leave out the "--download-hdf5=yes".  Then follow the
install HDF5 instructions from INSTALLATION_OLD.txt.  The configure line will look like:
export PATH=$CHASTE_LIBS/petsc-3.0.0-p8/linux-gnu/bin/:${PATH}
CC=mpicc ./configure --enable-parallel --prefix=$CHASTE_LIBS/hdf5

PETSc 3.0 and later versions can install some of our dependencies for us (OpenMPI, HDF5,
ParMETIS, hypre):

# You need to install a fortran compiler for the petsc configure to be able to compile hypre.
# The following works assuming you have the gnu fortran and c compilers installed.

cd $CHASTE_LIBS
wget http://ftp.mcs.anl.gov/pub/petsc/release-snapshots/petsc-3.0.0-p8.tar.gz
tar xzvf petsc-3.0.0-p8.tar.gz 
rm -f petsc-3.0.0-p8.tar.gz
cd petsc-3.0.0-p8/
export PETSC_DIR=`pwd`
export PETSC_ARCH=linux-gnu
./config/configure.py --with-gnu-compilers==true --download-f-blas-lapack=1 --with-x=false --with-clanguage=cxx --download-hypre=yes --download-openmpi=yes --with-static-mpi=1 --CXXFLAGS=-fPIC --CFLAGS=-fPIC --download-parmetis=yes
make all test

# (optional) Build an optimised version of PETSc
export PETSC_ARCH=linux-gnu-opt
# ** note 'ifneeded' not 'yes' below **
./config/configure.py --with-gnu-compilers==true --download-f-blas-lapack=1 --with-x=false --with-clanguage=cxx --download-hypre=yes --download-openmpi=yes --with-static-mpi=1 --CXXFLAGS="-fPIC -O3" --CFLAGS="-fPIC -O3" --with-debugging=0 --download-hdf5=ifneeded --download-parmetis=ifneeded
make all test


=========BOOSTJAM and BOOST:===========

Most modern Linux distributions have Boost libraries installed.  Please
check before compiling since this step can be lengthy.
A simple check would be to see if the include files are in the "usual place":
ls /usr/include/boost/serialization/

Please don't use Boost versions 1.35 or 1.36 as serialization in these versions is broken.
Note that archives created by a newer version of Boost may be unreadable by older versions.

cd $CHASTE_LIBS
wget http://fastbull.dl.sourceforge.net/sourceforge/boost/boost-jam-3.1.17-1-linuxx86.tgz
wget http://garr.dl.sourceforge.net/sourceforge/boost/boost_1_34_1.tar.gz
tar -zxvf boost-jam-3.1.17-1-linuxx86.tgz
tar -zxvf boost_1_34_1.tar.gz
cd boost_1_34_1
../boost-jam-3.1.17-1-linuxx86/bjam "-sTOOLS=gcc" --prefix=$CHASTE_LIBS/boost install
cd ..
rm -f boost_1_34_1.tar.gz boost-jam-3.1.17-1-linuxx86.tgz
rm -rf boost_1_34_1 boost-jam-3.1.17-1-linuxx86

================METIS:==================
From release 2.0 METIS dependencies are handled by parMETIS, so separate installation is no
longer required.

============= XSD and XML =============
Installing Apache Xerces XML libraries:

cd $CHASTE_LIBS
wget http://archive.apache.org/dist/xml/xerces-c/Xerces-C_2_7_0/source/xerces-c-src_2_7_0.tar.gz
tar -zxf xerces-c-src_2_7_0.tar.gz
cd xerces-c-src_2_7_0/
export XERCESCROOT=`pwd`
cd $XERCESCROOT/src/xercesc
./runConfigure -plinux -cgcc -xg++ -P$CHASTE_LIBS/xerces
make
make install
cd $CHASTE_LIBS
rm -rf xerces-c-src_2_7_0 xerces-c-src_2_7_0.tar.gz

If you experience any problems then you can modify the configuration options
for your system according to http://xerces.apache.org/xerces-c/build-3.html


Installing XSD:

#32-bit binary
cd $CHASTE_LIBS
wget http://codesynthesis.com/download/xsd/3.2/linux-gnu/i686/xsd-3.2.0-i686-linux-gnu.tar.bz2
tar -xjf xsd-3.2.0-i686-linux-gnu.tar.bz2
ln -s $CHASTE_LIBS/xsd-3.2.0-i686-linux-gnu/bin/xsd $CHASTE_LIBS/bin/xsd
rm -f xsd-3.2.0-i686-linux-gnu.tar.bz2
#64-bit binary
cd $CHASTE_LIBS
wget http://codesynthesis.com/download/xsd/3.2/linux-gnu/x86_64/xsd-3.2.0-x86_64-linux-gnu.tar.bz2
tar -xjf xsd-3.2.0-x86_64-linux-gnu.tar.bz2
ln -s $CHASTE_LIBS/xsd-3.2.0-x86_64-linux-gnu/bin/xsd $CHASTE_LIBS/bin/xsd
rm -f xsd-3.2.0-x86_64-linux-gnu.tar.bz2

Note that older versions of XSD (including 2.3.1 and 3.1.1a3) should
still work, but are not tested on a regular basis.

=============== TETGEN =====================

Note: From Release 2.1 installation of TetGen is not required.

=============== TRIANGLE =====================

Note: From Release 1.1 installation of triangle is not required.

=============== VTK =====================

VTK installation is optional.  If you wish to produce VTK output for a visualizer such as Paraview or Mayavi2 then you will need to install the VTK development libraries.  If you have a root/priviledged access then it is easy to install 
the libvtk5-dev with
sudo aptitude install libvtk5-dev #(Ubuntu/Debian)
sudo yum install vtk-devel             #(Fedora/RedHat)

If you are installing in userspace there are 3 steps:
1. Installation of CMake (for compiling VTK from source)
2. Installation of VTK
3. Configuring default.py to pick up the libraries

1. (CMAKE -- First check to see if you have this on your system)
cd $CHASTE_LIBS 
wget http://www.cmake.org/files/v2.6/cmake-2.6.2-Linux-i386.tar.gz 
tar xvfz cmake-2.6.2-Linux-i386.tar.gz 
export PATH=${CHASTE_LIBS}/cmake-2.6.2-Linux-i386/bin/:${PATH}

2. (VTK) 
cd $CHASTE_LIBS 
#Note that we currently test with VTK-5.0.4 so some tests may fail due to minor output differences.
#However, 5.0.4 won't compile with recent versions of gcc! 
wget http://www.vtk.org/files/release/5.2/vtk-5.2.1.tar.gz
tar xvfz vtk-5.2.1.tar.gz 
cd VTK
ccmake -DCMAKE_INSTALL_PREFIX:PATH=${CHASTE_LIBS}/Vtk5 .
# (Select option "C" (twice) to configure and 
# then "G" to generate config files and quit
make
make install
cd $CHASTE_LIBS 
rm vtk-5.2.1.tar.gz 
rm -rf VTK

3. (CONFIGURE)
Edit python/hostconfig/default.py:
use_vtk = True

=============== Paraview (VTK visualizer) =====================

32-bit:
cd $CHASTE_LIBS
wget http://www.paraview.org/files/v3.6/paraview-3.6.2-Linux32-x86.tar.gz
tar xfvz paraview-3.6.2-Linux32-x86.tar.gz

# You need to add these lines to your .bashrc (or similar) The syntax may change depending on your command-line interpreter.
# Note that the following may break your python as there is a libpython2.5.so.1.0 in ${CHASTE_LIBS}/paraview-3.6.2-Linux-i686/lib/paraview-3.6/ (fixme!)
export PATH=${PATH}:${CHASTE_LIBS}/paraview-3.6.2-Linux-i686/bin/
export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:${CHASTE_LIBS}/paraview-3.6.2-Linux-i686/lib/paraview-3.6/

64-bit:
cd $CHASTE_LIBS
wget http://www.paraview.org/files/v3.6/paraview-3.6.2-Linux64-x86.tar.gz
tar xvfz paraview-3.6.2-Linux64-x86.tar.gz

# You need to add these lines to your .bashrc (or similar) The syntax may change depending on your command-line interpreter.
# Note that the following may break your python as there is a libpython2.5.so.1.0 in ${CHASTE_LIBS}/paraview-3.6.2-Linux-i686/lib/paraview-3.6/ (fixme!)
export PATH=${PATH}:${CHASTE_LIBS}/paraview-3.6.2-Linux-x86_64/bin/
export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:${CHASTE_LIBS}/paraview-3.6.2-Linux-x86_64/lib/paraview-3.6/

=============== PyCml dependencies ===============

There is a companion tool to Chaste, named PyCml, which can generate
Chaste-compatible C++ code from cardiac ionic cell models described in
CellML.  This allows Chaste to make use of any such model.

Starting with release 2.0, PyCml is now run in the default build of Chaste.
You thus need to install its pre-requisites if you wish the relevant tests
to pass.  You can still use Chaste without installing these packages, but
some tests will fail.  See also README_CELLML.txt for more information about
PyCml.

PyCml is a python tool, and also requires Amara, RNV, and the Redland RDF
library.  All of these in turn require the expat library to parse XML.
This is available in most Linux distributions, e.g.
  sudo aptitude install expat libexpat1-dev #(Ubuntu/Debian)
  sudo yum install expat expat-devel #(Fedora/RedHat)
You will also need the Python header files:
  sudo aptitude install python-dev #(Ubuntu/Debian)
  sudo yum install python-devel #(Fedora/RedHat)

To install Python libraries without root access, you need to create a
file .pydistutils.cfg in your home directory, with the following content:

[install]
install_lib = /home/scratch/chaste-libs/python
install_scripts = /home/scratch/chaste-libs/bin

This assumes that you have installed chaste libraries in /home/scratch/chaste-libs;
edit the path if not.

Amara
-----
export PYTHONPATH=$PYTHONPATH:$CHASTE_LIBS/python
cd $CHASTE_LIBS
mkdir python
wget http://peak.telecommunity.com/dist/ez_setup.py
python ez_setup.py
cd bin
./easy_install "Amara==1.2.0.2"
cd ..

RNV
---

wget "http://ftp.davidashen.net/PreTI/RNV/RNV.ZIP"
unzip RNV.ZIP
cd rnv-*
make -f Makefile.gnu
cp rvp $CHASTE_LIBS/bin/
cd ..
rm RNV.ZIP

RDFLib
------

If this is installed in your Linux distribution, it may be easiest to install from there, e.g.
  sudo aptitude install python-librdf

Otherwise, it is also available via easy_install:
  easy_install rdflib


===========SET ENVIRONMENTAL VARIABLES AND PATHS:===================

If you always use Chaste from within the Eclipse IDE, and do not wish
to use PyCml (i.e. will not use the cardiac functionality), this step
is probably not needed.  If you ever wish to use Chaste from the command
line, however, you will need these configuration settings.

Edit the ~/.bashrc file in the home directory and append the following:

export CHASTE_LIBS=<THE FOLDER YOU CALLED $CHASTE_LIBS ABOVE>
export PATH=$CHASTE_LIBS/bin:$PATH
export LD_LIBRARY_PATH=$CHASTE_LIBS/petsc-3.0.0-p8/linux-gnu/lib:$CHASTE_LIBS/rdf/lib
export PYTHONPATH=$CHASTE_LIBS/python:$CHASTE_LIBS/lib/python

Note that the above settings assume that PATH already has a value but that
LD_LIBRARY_PATH has not.  If LD_LIBRARY_PATH is set elsewhere in ~/.bashrc
or in system-wide configuration then you will need the following instead of
the LD_LIBRARY_PATH line above:

export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$CHASTE_LIBS/petsc-3.0.0-p8/linux-gnu/lib:$CHASTE_LIBS/rdf/lib

Similarly if PYTHONPATH is already set in your .bashrc, use

export PYTHONPATH=$PYTHONPATH:$CHASTE_LIBS/python:$CHASTE_LIBS/lib/python

Note that test output will be put in the folder given by the environment variable CHASTE_TEST_OUTPUT. 
If this has not been assigned to anything, it will be (temporarily) set to be the directory 
"/tmp/<USER_NAME>/testoutput/" whenever scons is run. If you would prefer output in a different 
directory also add the following to the .bashrc file.

export CHASTE_TEST_OUTPUT=<YOUR CHOICE OF DIRECTORY>


NB. You will need to logout and in again for the above to take effect (or instead do 
"source ~/.bashrc" to implement the above changes for that particular terminal).


===================================================================================
=
=   Running Chaste
=
===================================================================================



========== Configuring Chaste ==========

First, return to the main Chaste directory (the folder with the code and this README file)

You will need to edit the python/hostconfig/default.py to give the correct paths to each 
of the libraries.  Note that if you followed these instructions (placing all dependencies below
a ${CHASTE_LIBS} directory) then this should be a matter of editing the line that sets chaste_libs_path.

If you've used a variation on these instructions then you may need to make other alterations.  For
example, the name of the Boost serialization library may differ in the 'other_libraries' field.
The location and names of the Blas and Lapack libraries are also included in the default.py file 
and should be changed to the correct paths and names for your installation.  The correct names
for MKL Blas/Lapack libraries are
blas_lapack = ['mkl_lapack', 'mkl', 'svml']

Note that if you have the Intel compiler available, you may want to enable Chaste compilation 
with Intel.  We've found that on some tests the build-type for optimised Intel 
"build=IntelProduction" (see below) provides an executable that is up to 60% faster than 
optimised Gnu "build=GccOpt".


========== Compiling and running Chaste ==========
Now we should have all the necessary libraries to compile Chaste. To run the Chaste tests to see if 
everything compiles and the tests pass type one of the following (note that scons should always be 
run from the main Chaste directory):
 
scons          # runs all the tests - will take a while
scons global   # just runs the tests in the global folder
scons io       # just runs the tests in the io folder
scons linalg   # just runs the tests in the linalg (linear algebra) folder
scons mesh     # just runs the tests in the mesh folder
scons ode      # just runs the tests in the ode folder
scons pde      # just runs the tests in the pde folder
scons heart    # just runs the tests in the heart folder
scons cell_based   # just runs the tests in the cell_based folder

If the tests compile and run, to check the results, open a web browser and go to the following (local) page:

file:///<CHASTE_CODE_DIRECTORY>/testoutput/<NAME_OF_YOUR_COMPUTER>.default/index.html

for example: file:///home/scratch/chaste-code/testoutput/msc30.ecs.ox.ac.uk.default/index.html
Note that this is just a file in the Chaste directory.


To run a single test, do (for example):
scons test_suite=heart/test/bidomain/TestBidomainProblem.hpp

To run a single test in parallel, do:
scons build=Parallel test_suite=heart/test/bidomain/TestBidomainProblem.hpp   # 2 processors
scons build=Parallel3 test_suite=heart/test/bidomain/TestBidomainProblem.hpp  # 3 processors

To run a single test with an optimised gcc build, do
scons build=GccOpt test_suite=heart/test/bidomain/TestBidomainProblem.hpp 

To just compile a single test, do (for example):
scons test_suite=heart/test/bidomain/TestBidomainProblem.hpp compile_only=1

Note that if you scons build=<SOMETHING>, the webpage to go to is
file:///<CHASTE_CODE_DIRECTORY>/testoutput/<NAME_OF_YOUR_COMPUTER>.<SOMETHING>/index.html
for example: file:///home/scratch/chaste-code/testoutput/msc30.ecs.ox.ac.uk.GccOpt/index.html


By default the build does not create library files for the Chaste code, but directly links the
object files required by each test.  To use libraries, which will reduce the compilation time
if you are not making frequent changes to core Chaste code, use the chaste_libs=1 option, e.g.
scons chaste_libs=1 core


Further details on build options can be found on the Chaste developers' wiki at
https://chaste.comlab.ox.ac.uk/cgi-bin/trac.cgi/wiki/BuildGuide.
For a guest login, use the username "anonymous", and your email address as
the password.

========== Creating an executable ==========

*IF* you want to create the standalone cardiac Chaste executable:

The following command generates the Chaste executable:
scons compile_only=1 chaste_libs=1 static=0 build=GccOpt exe=1 apps

(The distributed stand-alone executable uses "static=1", but it requires
making sure that all the dependencies are available as static libraries.)

The executable Chaste can then be found in the apps/src folder.

To use the correct dynamic libraries you will need to add this to your
environment (where [*PATH_TO_CHASTE*] is the location of your Chaste
directory):

export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:[*PATH_TO_CHASTE*]/linklib
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$CHASTE_LIBS/boost/lib:$CHASTE_LIBS/xerces/lib
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$CHASTE_LIBS/hdf/lib:$CHASTE_LIBS/rdf/lib

In order to run a simulation edit the ChasteParameters.xml file according to your needs and, 
from the Chaste directory, type

apps/src/Chaste ChasteParameters.xml

Please note that the output directory specified in the ChasteParameters.xml file is relative to 
a directory defined by the environmental variable CHASTE_TEST_OUTPUT, as described above. If this
variable is not set, results will be found relative to the 'testoutput' folder in the main 
Chaste directory (unlike when scons is used to run tests). Add CHASTE_TEST_OUTPUT to the .bashrc 
file as described above, to change this location.

If you want to run Chaste in parallel manner you have to add mpirun to your PATH. 
You can for example  type:

ln -s $CHASTE_LIBS/petsc-3.0.0-p8/linux-gnu/bin/mpirun ~/bin/

Now you can run Chaste in parallel on "N" processors, by typing 

mpirun -np "N" apps/src/Chaste ChasteParameters.xml

Please note that the number of processors "N" should be less or equal to the number of the prcessors
 existing on your machine.
