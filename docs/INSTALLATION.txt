CHASTE DEVELOPER INSTALLATION GUIDE


This guide walks you through a "standard" installation of Chaste and all its
dependencies.  Other guides can be found on the developer wiki at
https://chaste.comlab.ox.ac.uk/cgi-bin/trac.cgi/wiki/DeveloperInstallGuide
For a guest login, use the username "anonymous", and your email address as
the password.


First define the folder where you want to install the libraries which Chaste depends on, for example,
export CHASTE_LIBS=/home/scratch/chaste-libs

If it doesn't already exist, create this directory:
mkdir $CHASTE_LIBS



===================================================================================
=
=   Installing prerequisites
=
===================================================================================

The following packages and libraries are all compulsory for Chaste to run 
(the version numbers of packages and libraries might need updating). 
Please install them as described below.


==========SCONS:=============
(Python is a prerequisite for this)
Use your package manager to install Scons or

cd $CHASTE_LIBS
wget http://mesh.dl.sourceforge.net/sourceforge/scons/scons-1.2.0.tar.gz
tar zxf scons-1.2.0.tar.gz
cd scons-1.2.0
python setup.py install --prefix=$CHASTE_LIBS
cd ..
rm -rf scons-1.2.0.tar.gz scons-1.2.0

On a 64-bit machine you may find that an invocation of Scons
($CHASTE_LIBS/bin/scons) produces the error "ImportError: No module named
SCons.Script".
This is a known bug with Scons and may be fixed by adding a symbolic link
from the 64-bit library.  Do so like this:
cd $CHASTE_LIBS
ln -s lib64 lib


========MPI and PETSC:=======

Note: while these instructions use the MPICH library to provide MPI
functionality, other MPI implementations may work for you.  The Chaste
developers have also used OpenMPI successfully.

cd $CHASTE_LIBS
wget ftp://ftp.mcs.anl.gov/pub/mpi/mpich.tar.gz
tar -zxvf mpich.tar.gz
cd mpich-1.2.7p1
CCFLAGS=-fPIC CFLAGS=-fPIC ./configure --prefix=$CHASTE_LIBS/mpi --with-comm=shared --with-device=ch_shmem --enable-sharedlib --disable-f77
make
cd examples/test/
make testing
cd ../..
make install
cd ..
rm -rf mpich-1.2.7p1/  mpich.tar.gz

cd $CHASTE_LIBS
wget ftp://ftp.mcs.anl.gov/pub/petsc/release-snapshots/petsc-2.3.3-p15.tar.gz
tar -zxvf petsc-2.3.3-p15.tar.gz
rm -f petsc-2.3.3-p15.tar.gz
cd petsc-2.3.3-p15/
export PETSC_DIR=`pwd` 
./config/configure.py  --download-c-blas-lapack=1 --with-mpi-dir=$CHASTE_LIBS/mpi --with-x=false  -PETSC_ARCH=linux-gnu --with-clanguage=cxx
make all
./config/configure.py  --download-c-blas-lapack=1 --with-mpi-dir=$CHASTE_LIBS/mpi --with-x=false   --with-debugging=0 -PETSC_ARCH=linux-gnu-opt --with-clanguage=cxx
make all
cd ..

=========BOOSTJAM and BOOST:===========

Most modern Linux distributions have Boost libraries installed.  Please
check before compiling since this step can be lengthy.
A simple check would be to see if the include files are in the "usual place":
ls /usr/include/boost/serialization/

cd $CHASTE_LIBS
wget http://fastbull.dl.sourceforge.net/sourceforge/boost/boost-jam-3.1.17-1-linuxx86.tgz
wget http://garr.dl.sourceforge.net/sourceforge/boost/boost_1_34_1.tar.gz
tar -zxvf boost-jam-3.1.17-1-linuxx86.tgz
tar -zxvf boost_1_34_1.tar.gz
cd boost_1_34_1
../boost-jam-3.1.17-1-linuxx86/bjam "-sTOOLS=gcc" --prefix=$CHASTE_LIBS/boost install
cd ..
rm -f boost_1_34_1.tar.gz boost-jam-3.1.17-1-linuxx86.tgz
rm -rf boost_1_34_1 boost-jam-3.1.17-1-linuxx86

==============HDF5:====================

cd $CHASTE_LIBS
wget ftp://ftp.hdfgroup.org/HDF5/prev-releases/hdf5-1.6.6/src/hdf5-1.6.6.tar.gz
tar -zxf hdf5-1.6.6.tar.gz
cd hdf5-1.6.6
CC=${CHASTE_LIBS}/mpi/bin/mpicc ./configure --enable-parallel --prefix=$CHASTE_LIBS/hdf5
#If you are compiling with a modern gcc (4.3 and higher) then you will need
#to fix a known bug in hdf5-1.6.6.
# At line 548 of perform/zip_perf.c 
#    output = open(filename, O_RDWR | O_CREAT);
# should be edited to 
#    output = open(filename, O_RDWR | O_CREAT, S_IRWXU);
make
cd test
make check
cd ../testpar
make check
cd ..
make install
cd ..
rm -f hdf5-1.6.6.tar.gz
rm -rf hdf5-1.6.6

================METIS:==================

cd $CHASTE_LIBS
wget http://glaros.dtc.umn.edu/gkhome/fetch/sw/metis/metis-4.0.tar.gz
tar -zxf metis-4.0.tar.gz
cd metis-4.0
make
cd ..
rm -f metis-4.0.tar.gz

============= XSD and XML =============
Installing Apache Xerces XML libraries:

cd $CHASTE_LIBS
wget http://archive.apache.org/dist/xml/xerces-c/Xerces-C_2_7_0/source/xerces-c-src_2_7_0.tar.gz
tar -zxf xerces-c-src_2_7_0.tar.gz
cd xerces-c-src_2_7_0/
export XERCESCROOT=`pwd`
cd $XERCESCROOT/src/xercesc
./runConfigure -plinux -cgcc -xg++ -P$CHASTE_LIBS/xerces
make
make install
cd $CHASTE_LIBS
rm -rf xerces-c-src_2_7_0 xerces-c-src_2_7_0.tar.gz

If you experience any problems then you can modify the configuration options
for your system according to http://xerces.apache.org/xerces-c/build-3.html


Installing XSD:

cd $CHASTE_LIBS
wget http://codesynthesis.com/download/xsd/3.2/linux-gnu/i686/xsd-3.2.0-i686-linux-gnu.tar.bz2
tar -xjf xsd-3.2.0-i686-linux-gnu.tar.bz2
ln -s $CHASTE_LIBS/xsd-3.2.0-i686-linux-gnu/bin/xsd $CHASTE_LIBS/bin/xsd
rm -f xsd-3.2.0-i686-linux-gnu.tar.bz2

Note that older versions of XSD (including 2.3.1 and 3.1.1a3) should
still work, but are not tested on a regular basis.


=============== TETGEN =====================

cd $CHASTE_LIBS
wget http://www.wias-berlin.de/people/si/tetgen1.4.2.tar.gz
tar -zxvf tetgen1.4.2.tar.gz
cd tetgen1.4.2
make
mv tetgen $CHASTE_LIBS/bin/
cd ..
rm -rf tetgen1.4.2*

=============== TRIANGLE =====================

Note: From Release 1.1 installation of triangle/showme binaries is optional
since all 2D re-meshing methods in Chaste use direct library calls to
Triangle code which is bundled with Chaste.
 
cd $CHASTE_LIBS
wget http://www.netlib.org/voronoi/triangle.zip
mkdir triangle
cd triangle
unzip ../triangle.zip
make
cp ./triangle $CHASTE_LIBS/bin/
cp ./showme  $CHASTE_LIBS/bin/
cd ..
rm -rf triangle.zip triangle

===========SET ENVIRONMENTAL VARIABLES AND PATHS:===================

If you always use Chaste from within the Eclipse IDE, this step is
probably not needed.  If you ever wish to use Chaste from the command
line, however, you will need these configuration settings.

Edit the ~/.bashrc file in the home directory and append the following:

export CHASTE_LIBS=<THE FOLDER YOU CALLED $CHASTE_LIBS ABOVE>
export PATH=$CHASTE_LIBS/bin:$PATH
export LD_LIBRARY_PATH=$CHASTE_LIBS/petsc-2.3.3-p15/lib/linux-gnu

Note that the above settings assume that PATH already has a value but that
LD_LIBRARY_PATH has not.  If LD_LIBRARY_PATH is set elsewhere in ~/.bashrc
or in system-wide configuration then you will need:

export CHASTE_LIBS=<THE FOLDER YOU CALLED $CHASTE_LIBS ABOVE>
export PATH=$CHASTE_LIBS/bin:$PATH
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$CHASTE_LIBS/petsc-2.3.3-p15/lib/linux-gnu


Note that test output will be put in the folder given by the environment variable CHASTE_TEST_OUTPUT. 
If this has not been assigned to anything, it will be (temporarily) set to be the directory 
"/tmp/<USER_NAME>/testoutput/" whenever scons is run. If you would prefer output in a different 
directory also add the following to the .bashrc file.

export CHASTE_TEST_OUTPUT=<YOUR CHOICE OF DIRECTORY>


NB. You will need to logout and in again for the above to take effect (or instead do 
"source ~/.bashrc" to implement the above changes for that particular terminal).



===================================================================================
=
=   Running Chaste
=
===================================================================================



========== Configuring Chaste ==========

First, return to the main Chaste directory (the folder with the code and this README file)

You will need to edit the python/hostconfig/default.py to give the correct paths to each 
of the libraries.  Note that if you followed these instructions (placing all dependencies below
a ${CHASTE_LIBS} directory) then this should a matter of removing two lines and editing one 
line below them.  

If you've used a variation on these instructions then you may need to make other alterations.  For
example, the name of the Boost serialization library may differ in the 'other_libraries' field.
The location and names of the Blas and Lapack libraries are also included in the default.py file 
and should be changed to the correct paths and names for your installation.  The correct names
for MKL Blas/Lapack libraries are
blas_lapack = ['mkl_lapack', 'mkl', 'svml']

Note that if you have the Intel compiler available, you may want to enable Chaste compilation 
with Intel.  We've found that on some tests the build-type for optimised Intel 
"build=IntelProduction" (see below) provides an executable that is up to 60% faster than 
optimised Gnu "build=GccOpt".


========== Compiling and running Chaste ==========
Now we should have all the necessary libraries to compile Chaste. To run the Chaste tests to see if 
everything compiles and the tests pass type one of the following (note that scons should always be 
run from the main Chaste directory):
 
scons          # runs all the tests - will take a while
scons global   # just runs the tests in the global folder
scons io       # just runs the tests in the io folder
scons linalg   # just runs the tests in the linalg (linear algebra) folder
scons mesh     # just runs the tests in the mesh folder
scons ode      # just runs the tests in the ode folder
scons pde      # just runs the tests in the pde folder
scons heart    # just runs the tests in the heart folder
scons cancer   # just runs the tests in the cancer folder

If the tests compile and run, to check the results, open a web browser and go to the following (local) page:

file:///<CHASTE_CODE_DIRECTORY>/testoutput/<NAME_OF_YOUR_COMPUTER>.default/index.html

for example: file:///home/scratch/chaste-code/testoutput/msc30.ecs.ox.ac.uk.default/index.html
Note that this is just a file in the Chaste directory.


To run a single test, do (for example):
scons test_suite=heart/test/bidomain/TestBidomainProblem.hpp

To run a single test in parallel, do:
scons build=Parallel test_suite=heart/test/bidomain/TestBidomainProblem.hpp   # 2 processors
scons build=Parallel3 test_suite=heart/test/bidomain/TestBidomainProblem.hpp  # 3 processors

To run a single test with an optimised gcc build, do
scons build=GccOpt test_suite=heart/test/bidomain/TestBidomainProblem.hpp 

To just compile a single test, do (for example):
scons test_suite=heart/test/bidomain/TestBidomainProblem.hpp compile_only=1

Note that if you scons build=<SOMETHING>, the webpage to go to is
file:///<CHASTE_CODE_DIRECTORY>/testoutput/<NAME_OF_YOUR_COMPUTER>.<SOMETHING>/index.html
for example: file:///home/scratch/chaste-code/testoutput/msc30.ecs.ox.ac.uk.GccOpt/index.html


========== Creating an executable ==========

*IF* you want to create the standalone cardiac Chaste executable:

The following command generates Chaste executable:
scons compile_only=1 chaste_libs=1 static=0 build=GccOpt exe=1 apps

(The distributed stand-alone executable uses "static=1", but it requires a
making sure that all the dependencies are available as static libraries.)

The executable Chaste can be found in the apps/src folder.

To use the correct dynamic libraries you will need to add this to your
environment (where [*PATH_TO_CHASTE*] is the location of your Chaste
directory):

export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:[*PATH_TO_CHASTE*]/linklib
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$CHASTE_LIBS/boost/lib
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$CHASTE_LIBS/xerces/lib

In order to run a simulation edit the ChasteParameters.xml file according to your needs and, 
from the Chaste directory, type

apps/src/Chaste ChasteParameters.xml

Please note that the output directory specified in the ChasteParameters.xml file is relative to 
a directory defined by the environmental variable CHASTE_TEST_OUTPUT, as described above. If this
variable is not set, results will be found relative to the 'testoutput' folder in the main 
Chaste directory (unlike when scons is used to run tests). Add CHASTE_TEST_OUTPUT to the .bashrc 
file as described above.
